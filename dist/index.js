var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var browser = { exports: {} };
var katex = { exports: {} };
var hasRequiredKatex;
function requireKatex() {
  if (hasRequiredKatex)
    return katex.exports;
  hasRequiredKatex = 1;
  (function(module2, exports) {
    (function webpackUniversalModuleDefinition(root2, factory) {
      module2.exports = factory();
    })(typeof self !== "undefined" ? self : commonjsGlobal, function() {
      return (
        /******/
        function() {
          var __webpack_require__ = {};
          !function() {
            __webpack_require__.d = function(exports2, definition) {
              for (var key in definition) {
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
                  Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
                }
              }
            };
          }();
          !function() {
            __webpack_require__.o = function(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            };
          }();
          var __webpack_exports__ = {};
          __webpack_require__.d(__webpack_exports__, {
            "default": function() {
              return (
                /* binding */
                katex_webpack
              );
            }
          });
          class ParseError {
            // Error start position based on passed-in Token or ParseNode.
            // Length of affected text based on passed-in Token or ParseNode.
            // The underlying error message without any context added.
            constructor(message, token) {
              this.name = void 0;
              this.position = void 0;
              this.length = void 0;
              this.rawMessage = void 0;
              let error = "KaTeX parse error: " + message;
              let start2;
              let end;
              const loc = token && token.loc;
              if (loc && loc.start <= loc.end) {
                const input = loc.lexer.input;
                start2 = loc.start;
                end = loc.end;
                if (start2 === input.length) {
                  error += " at end of input: ";
                } else {
                  error += " at position " + (start2 + 1) + ": ";
                }
                const underlined = input.slice(start2, end).replace(/[^]/g, "$&̲");
                let left;
                if (start2 > 15) {
                  left = "…" + input.slice(start2 - 15, start2);
                } else {
                  left = input.slice(0, start2);
                }
                let right;
                if (end + 15 < input.length) {
                  right = input.slice(end, end + 15) + "…";
                } else {
                  right = input.slice(end);
                }
                error += left + underlined + right;
              }
              const self2 = new Error(error);
              self2.name = "ParseError";
              self2.__proto__ = ParseError.prototype;
              self2.position = start2;
              if (start2 != null && end != null) {
                self2.length = end - start2;
              }
              self2.rawMessage = message;
              return self2;
            }
          }
          ParseError.prototype.__proto__ = Error.prototype;
          var src_ParseError = ParseError;
          const contains = function(list, elem) {
            return list.indexOf(elem) !== -1;
          };
          const deflt = function(setting, defaultIfUndefined) {
            return setting === void 0 ? defaultIfUndefined : setting;
          };
          const uppercase = /([A-Z])/g;
          const hyphenate = function(str) {
            return str.replace(uppercase, "-$1").toLowerCase();
          };
          const ESCAPE_LOOKUP = {
            "&": "&amp;",
            ">": "&gt;",
            "<": "&lt;",
            '"': "&quot;",
            "'": "&#x27;"
          };
          const ESCAPE_REGEX = /[&><"']/g;
          function utils_escape(text) {
            return String(text).replace(ESCAPE_REGEX, (match) => ESCAPE_LOOKUP[match]);
          }
          const getBaseElem = function(group) {
            if (group.type === "ordgroup") {
              if (group.body.length === 1) {
                return getBaseElem(group.body[0]);
              } else {
                return group;
              }
            } else if (group.type === "color") {
              if (group.body.length === 1) {
                return getBaseElem(group.body[0]);
              } else {
                return group;
              }
            } else if (group.type === "font") {
              return getBaseElem(group.body);
            } else {
              return group;
            }
          };
          const isCharacterBox = function(group) {
            const baseElem = getBaseElem(group);
            return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "atom";
          };
          const assert = function(value) {
            if (!value) {
              throw new Error("Expected non-null, but got " + String(value));
            }
            return value;
          };
          const protocolFromUrl = function(url) {
            const protocol = /^[\x00-\x20]*([^\\/#?]*?)(:|&#0*58|&#x0*3a|&colon)/i.exec(url);
            if (!protocol) {
              return "_relative";
            }
            if (protocol[2] !== ":") {
              return null;
            }
            if (!/^[a-zA-Z][a-zA-Z0-9+\-.]*$/.test(protocol[1])) {
              return null;
            }
            return protocol[1].toLowerCase();
          };
          var utils = {
            contains,
            deflt,
            escape: utils_escape,
            hyphenate,
            getBaseElem,
            isCharacterBox,
            protocolFromUrl
          };
          const SETTINGS_SCHEMA = {
            displayMode: {
              type: "boolean",
              description: "Render math in display mode, which puts the math in display style (so \\int and \\sum are large, for example), and centers the math on the page on its own line.",
              cli: "-d, --display-mode"
            },
            output: {
              type: {
                enum: ["htmlAndMathml", "html", "mathml"]
              },
              description: "Determines the markup language of the output.",
              cli: "-F, --format <type>"
            },
            leqno: {
              type: "boolean",
              description: "Render display math in leqno style (left-justified tags)."
            },
            fleqn: {
              type: "boolean",
              description: "Render display math flush left."
            },
            throwOnError: {
              type: "boolean",
              default: true,
              cli: "-t, --no-throw-on-error",
              cliDescription: "Render errors (in the color given by --error-color) instead of throwing a ParseError exception when encountering an error."
            },
            errorColor: {
              type: "string",
              default: "#cc0000",
              cli: "-c, --error-color <color>",
              cliDescription: "A color string given in the format 'rgb' or 'rrggbb' (no #). This option determines the color of errors rendered by the -t option.",
              cliProcessor: (color2) => "#" + color2
            },
            macros: {
              type: "object",
              cli: "-m, --macro <def>",
              cliDescription: "Define custom macro of the form '\\foo:expansion' (use multiple -m arguments for multiple macros).",
              cliDefault: [],
              cliProcessor: (def, defs) => {
                defs.push(def);
                return defs;
              }
            },
            minRuleThickness: {
              type: "number",
              description: "Specifies a minimum thickness, in ems, for fraction lines, `\\sqrt` top lines, `{array}` vertical lines, `\\hline`, `\\hdashline`, `\\underline`, `\\overline`, and the borders of `\\fbox`, `\\boxed`, and `\\fcolorbox`.",
              processor: (t) => Math.max(0, t),
              cli: "--min-rule-thickness <size>",
              cliProcessor: parseFloat
            },
            colorIsTextColor: {
              type: "boolean",
              description: "Makes \\color behave like LaTeX's 2-argument \\textcolor, instead of LaTeX's one-argument \\color mode change.",
              cli: "-b, --color-is-text-color"
            },
            strict: {
              type: [{
                enum: ["warn", "ignore", "error"]
              }, "boolean", "function"],
              description: "Turn on strict / LaTeX faithfulness mode, which throws an error if the input uses features that are not supported by LaTeX.",
              cli: "-S, --strict",
              cliDefault: false
            },
            trust: {
              type: ["boolean", "function"],
              description: "Trust the input, enabling all HTML features such as \\url.",
              cli: "-T, --trust"
            },
            maxSize: {
              type: "number",
              default: Infinity,
              description: "If non-zero, all user-specified sizes, e.g. in \\rule{500em}{500em}, will be capped to maxSize ems. Otherwise, elements and spaces can be arbitrarily large",
              processor: (s) => Math.max(0, s),
              cli: "-s, --max-size <n>",
              cliProcessor: parseInt
            },
            maxExpand: {
              type: "number",
              default: 1e3,
              description: "Limit the number of macro expansions to the specified number, to prevent e.g. infinite macro loops. If set to Infinity, the macro expander will try to fully expand as in LaTeX.",
              processor: (n) => Math.max(0, n),
              cli: "-e, --max-expand <n>",
              cliProcessor: (n) => n === "Infinity" ? Infinity : parseInt(n)
            },
            globalGroup: {
              type: "boolean",
              cli: false
            }
          };
          function getDefaultValue(schema) {
            if (schema.default) {
              return schema.default;
            }
            const type = schema.type;
            const defaultType = Array.isArray(type) ? type[0] : type;
            if (typeof defaultType !== "string") {
              return defaultType.enum[0];
            }
            switch (defaultType) {
              case "boolean":
                return false;
              case "string":
                return "";
              case "number":
                return 0;
              case "object":
                return {};
            }
          }
          class Settings {
            constructor(options) {
              this.displayMode = void 0;
              this.output = void 0;
              this.leqno = void 0;
              this.fleqn = void 0;
              this.throwOnError = void 0;
              this.errorColor = void 0;
              this.macros = void 0;
              this.minRuleThickness = void 0;
              this.colorIsTextColor = void 0;
              this.strict = void 0;
              this.trust = void 0;
              this.maxSize = void 0;
              this.maxExpand = void 0;
              this.globalGroup = void 0;
              options = options || {};
              for (const prop in SETTINGS_SCHEMA) {
                if (SETTINGS_SCHEMA.hasOwnProperty(prop)) {
                  const schema = SETTINGS_SCHEMA[prop];
                  this[prop] = options[prop] !== void 0 ? schema.processor ? schema.processor(options[prop]) : options[prop] : getDefaultValue(schema);
                }
              }
            }
            /**
             * Report nonstrict (non-LaTeX-compatible) input.
             * Can safely not be called if `this.strict` is false in JavaScript.
             */
            reportNonstrict(errorCode, errorMsg, token) {
              let strict = this.strict;
              if (typeof strict === "function") {
                strict = strict(errorCode, errorMsg, token);
              }
              if (!strict || strict === "ignore") {
                return;
              } else if (strict === true || strict === "error") {
                throw new src_ParseError("LaTeX-incompatible input and strict mode is set to 'error': " + (errorMsg + " [" + errorCode + "]"), token);
              } else if (strict === "warn") {
                typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
              } else {
                typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
              }
            }
            /**
             * Check whether to apply strict (LaTeX-adhering) behavior for unusual
             * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
             * instead, "error" translates to a return value of `true`, while "ignore"
             * translates to a return value of `false`.  May still print a warning:
             * "warn" prints a warning and returns `false`.
             * This is for the second category of `errorCode`s listed in the README.
             */
            useStrictBehavior(errorCode, errorMsg, token) {
              let strict = this.strict;
              if (typeof strict === "function") {
                try {
                  strict = strict(errorCode, errorMsg, token);
                } catch (error) {
                  strict = "error";
                }
              }
              if (!strict || strict === "ignore") {
                return false;
              } else if (strict === true || strict === "error") {
                return true;
              } else if (strict === "warn") {
                typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
                return false;
              } else {
                typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
                return false;
              }
            }
            /**
             * Check whether to test potentially dangerous input, and return
             * `true` (trusted) or `false` (untrusted).  The sole argument `context`
             * should be an object with `command` field specifying the relevant LaTeX
             * command (as a string starting with `\`), and any other arguments, etc.
             * If `context` has a `url` field, a `protocol` field will automatically
             * get added by this function (changing the specified object).
             */
            isTrusted(context) {
              if (context.url && !context.protocol) {
                const protocol = utils.protocolFromUrl(context.url);
                if (protocol == null) {
                  return false;
                }
                context.protocol = protocol;
              }
              const trust = typeof this.trust === "function" ? this.trust(context) : this.trust;
              return Boolean(trust);
            }
          }
          class Style {
            constructor(id2, size, cramped) {
              this.id = void 0;
              this.size = void 0;
              this.cramped = void 0;
              this.id = id2;
              this.size = size;
              this.cramped = cramped;
            }
            /**
             * Get the style of a superscript given a base in the current style.
             */
            sup() {
              return styles[sup[this.id]];
            }
            /**
             * Get the style of a subscript given a base in the current style.
             */
            sub() {
              return styles[sub[this.id]];
            }
            /**
             * Get the style of a fraction numerator given the fraction in the current
             * style.
             */
            fracNum() {
              return styles[fracNum[this.id]];
            }
            /**
             * Get the style of a fraction denominator given the fraction in the current
             * style.
             */
            fracDen() {
              return styles[fracDen[this.id]];
            }
            /**
             * Get the cramped version of a style (in particular, cramping a cramped style
             * doesn't change the style).
             */
            cramp() {
              return styles[cramp[this.id]];
            }
            /**
             * Get a text or display version of this style.
             */
            text() {
              return styles[Style_text[this.id]];
            }
            /**
             * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
             */
            isTight() {
              return this.size >= 2;
            }
          }
          const D = 0;
          const Dc = 1;
          const T = 2;
          const Tc = 3;
          const S = 4;
          const Sc = 5;
          const SS = 6;
          const SSc = 7;
          const styles = [new Style(D, 0, false), new Style(Dc, 0, true), new Style(T, 1, false), new Style(Tc, 1, true), new Style(S, 2, false), new Style(Sc, 2, true), new Style(SS, 3, false), new Style(SSc, 3, true)];
          const sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
          const sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
          const fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
          const fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
          const cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];
          const Style_text = [D, Dc, T, Tc, T, Tc, T, Tc];
          var src_Style = {
            DISPLAY: styles[D],
            TEXT: styles[T],
            SCRIPT: styles[S],
            SCRIPTSCRIPT: styles[SS]
          };
          const scriptData = [{
            // Latin characters beyond the Latin-1 characters we have metrics for.
            // Needed for Czech, Hungarian and Turkish text, for example.
            name: "latin",
            blocks: [
              [256, 591],
              // Latin Extended-A and Latin Extended-B
              [768, 879]
              // Combining Diacritical marks
            ]
          }, {
            // The Cyrillic script used by Russian and related languages.
            // A Cyrillic subset used to be supported as explicitly defined
            // symbols in symbols.js
            name: "cyrillic",
            blocks: [[1024, 1279]]
          }, {
            // Armenian
            name: "armenian",
            blocks: [[1328, 1423]]
          }, {
            // The Brahmic scripts of South and Southeast Asia
            // Devanagari (0900–097F)
            // Bengali (0980–09FF)
            // Gurmukhi (0A00–0A7F)
            // Gujarati (0A80–0AFF)
            // Oriya (0B00–0B7F)
            // Tamil (0B80–0BFF)
            // Telugu (0C00–0C7F)
            // Kannada (0C80–0CFF)
            // Malayalam (0D00–0D7F)
            // Sinhala (0D80–0DFF)
            // Thai (0E00–0E7F)
            // Lao (0E80–0EFF)
            // Tibetan (0F00–0FFF)
            // Myanmar (1000–109F)
            name: "brahmic",
            blocks: [[2304, 4255]]
          }, {
            name: "georgian",
            blocks: [[4256, 4351]]
          }, {
            // Chinese and Japanese.
            // The "k" in cjk is for Korean, but we've separated Korean out
            name: "cjk",
            blocks: [
              [12288, 12543],
              // CJK symbols and punctuation, Hiragana, Katakana
              [19968, 40879],
              // CJK ideograms
              [65280, 65376]
              // Fullwidth punctuation
              // TODO: add halfwidth Katakana and Romanji glyphs
            ]
          }, {
            // Korean
            name: "hangul",
            blocks: [[44032, 55215]]
          }];
          function scriptFromCodepoint(codepoint) {
            for (let i = 0; i < scriptData.length; i++) {
              const script = scriptData[i];
              for (let i2 = 0; i2 < script.blocks.length; i2++) {
                const block = script.blocks[i2];
                if (codepoint >= block[0] && codepoint <= block[1]) {
                  return script.name;
                }
              }
            }
            return null;
          }
          const allBlocks = [];
          scriptData.forEach((s) => s.blocks.forEach((b) => allBlocks.push(...b)));
          function supportedCodepoint(codepoint) {
            for (let i = 0; i < allBlocks.length; i += 2) {
              if (codepoint >= allBlocks[i] && codepoint <= allBlocks[i + 1]) {
                return true;
              }
            }
            return false;
          }
          const hLinePad = 80;
          const sqrtMain = function(extraVinculum, hLinePad2) {
            return "M95," + (622 + extraVinculum + hLinePad2) + "\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl" + extraVinculum / 2.075 + " -" + extraVinculum + "\nc5.3,-9.3,12,-14,20,-14\nH400000v" + (40 + extraVinculum) + "H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM" + (834 + extraVinculum) + " " + hLinePad2 + "h400000v" + (40 + extraVinculum) + "h-400000z";
          };
          const sqrtSize1 = function(extraVinculum, hLinePad2) {
            return "M263," + (601 + extraVinculum + hLinePad2) + "c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl" + extraVinculum / 2.084 + " -" + extraVinculum + "\nc4.7,-7.3,11,-11,19,-11\nH40000v" + (40 + extraVinculum) + "H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM" + (1001 + extraVinculum) + " " + hLinePad2 + "h400000v" + (40 + extraVinculum) + "h-400000z";
          };
          const sqrtSize2 = function(extraVinculum, hLinePad2) {
            return "M983 " + (10 + extraVinculum + hLinePad2) + "\nl" + extraVinculum / 3.13 + " -" + extraVinculum + "\nc4,-6.7,10,-10,18,-10 H400000v" + (40 + extraVinculum) + "\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM" + (1001 + extraVinculum) + " " + hLinePad2 + "h400000v" + (40 + extraVinculum) + "h-400000z";
          };
          const sqrtSize3 = function(extraVinculum, hLinePad2) {
            return "M424," + (2398 + extraVinculum + hLinePad2) + "\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl" + extraVinculum / 4.223 + " -" + extraVinculum + "c4,-6.7,10,-10,18,-10 H400000\nv" + (40 + extraVinculum) + "H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M" + (1001 + extraVinculum) + " " + hLinePad2 + "\nh400000v" + (40 + extraVinculum) + "h-400000z";
          };
          const sqrtSize4 = function(extraVinculum, hLinePad2) {
            return "M473," + (2713 + extraVinculum + hLinePad2) + "\nc339.3,-1799.3,509.3,-2700,510,-2702 l" + extraVinculum / 5.298 + " -" + extraVinculum + "\nc3.3,-7.3,9.3,-11,18,-11 H400000v" + (40 + extraVinculum) + "H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM" + (1001 + extraVinculum) + " " + hLinePad2 + "h400000v" + (40 + extraVinculum) + "H1017.7z";
          };
          const phasePath = function(y2) {
            const x2 = y2 / 2;
            return "M400000 " + y2 + " H0 L" + x2 + " 0 l65 45 L145 " + (y2 - 80) + " H400000z";
          };
          const sqrtTall = function(extraVinculum, hLinePad2, viewBoxHeight) {
            const vertSegment = viewBoxHeight - 54 - hLinePad2 - extraVinculum;
            return "M702 " + (extraVinculum + hLinePad2) + "H400000" + (40 + extraVinculum) + "\nH742v" + vertSegment + "l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 " + hLinePad2 + "H400000v" + (40 + extraVinculum) + "H742z";
          };
          const sqrtPath = function(size, extraVinculum, viewBoxHeight) {
            extraVinculum = 1e3 * extraVinculum;
            let path3 = "";
            switch (size) {
              case "sqrtMain":
                path3 = sqrtMain(extraVinculum, hLinePad);
                break;
              case "sqrtSize1":
                path3 = sqrtSize1(extraVinculum, hLinePad);
                break;
              case "sqrtSize2":
                path3 = sqrtSize2(extraVinculum, hLinePad);
                break;
              case "sqrtSize3":
                path3 = sqrtSize3(extraVinculum, hLinePad);
                break;
              case "sqrtSize4":
                path3 = sqrtSize4(extraVinculum, hLinePad);
                break;
              case "sqrtTall":
                path3 = sqrtTall(extraVinculum, hLinePad, viewBoxHeight);
            }
            return path3;
          };
          const innerPath = function(name2, height) {
            switch (name2) {
              case "⎜":
                return "M291 0 H417 V" + height + " H291z M291 0 H417 V" + height + " H291z";
              case "∣":
                return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z";
              case "∥":
                return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z" + ("M367 0 H410 V" + height + " H367z M367 0 H410 V" + height + " H367z");
              case "⎟":
                return "M457 0 H583 V" + height + " H457z M457 0 H583 V" + height + " H457z";
              case "⎢":
                return "M319 0 H403 V" + height + " H319z M319 0 H403 V" + height + " H319z";
              case "⎥":
                return "M263 0 H347 V" + height + " H263z M263 0 H347 V" + height + " H263z";
              case "⎪":
                return "M384 0 H504 V" + height + " H384z M384 0 H504 V" + height + " H384z";
              case "⏐":
                return "M312 0 H355 V" + height + " H312z M312 0 H355 V" + height + " H312z";
              case "‖":
                return "M257 0 H300 V" + height + " H257z M257 0 H300 V" + height + " H257z" + ("M478 0 H521 V" + height + " H478z M478 0 H521 V" + height + " H478z");
              default:
                return "";
            }
          };
          const path2 = {
            // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
            doubleleftarrow: "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",
            // doublerightarrow is from glyph U+21D2 in font KaTeX Main
            doublerightarrow: "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",
            // leftarrow is from glyph U+2190 in font KaTeX Main
            leftarrow: "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",
            // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
            leftbrace: "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",
            leftbraceunder: "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",
            // overgroup is from the MnSymbol package (public domain)
            leftgroup: "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",
            leftgroupunder: "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",
            // Harpoons are from glyph U+21BD in font KaTeX Main
            leftharpoon: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",
            leftharpoonplus: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",
            leftharpoondown: "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",
            leftharpoondownplus: "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",
            // hook is from glyph U+21A9 in font KaTeX Main
            lefthook: "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",
            leftlinesegment: "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",
            leftmapsto: "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",
            // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
            leftToFrom: "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",
            longequal: "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",
            midbrace: "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",
            midbraceunder: "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",
            oiintSize1: "M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",
            oiintSize2: "M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",
            oiiintSize1: "M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",
            oiiintSize2: "M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",
            rightarrow: "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",
            rightbrace: "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",
            rightbraceunder: "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",
            rightgroup: "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",
            rightgroupunder: "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",
            rightharpoon: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",
            rightharpoonplus: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",
            rightharpoondown: "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",
            rightharpoondownplus: "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",
            righthook: "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",
            rightlinesegment: "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",
            rightToFrom: "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",
            // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
            twoheadleftarrow: "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",
            twoheadrightarrow: "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",
            // tilde1 is a modified version of a glyph from the MnSymbol package
            tilde1: "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",
            // ditto tilde2, tilde3, & tilde4
            tilde2: "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",
            tilde3: "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",
            tilde4: "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",
            // vec is from glyph U+20D7 in font KaTeX Main
            vec: "M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",
            // widehat1 is a modified version of a glyph from the MnSymbol package
            widehat1: "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",
            // ditto widehat2, widehat3, & widehat4
            widehat2: "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
            widehat3: "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
            widehat4: "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
            // widecheck paths are all inverted versions of widehat
            widecheck1: "M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",
            widecheck2: "M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
            widecheck3: "M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
            widecheck4: "M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
            // The next ten paths support reaction arrows from the mhchem package.
            // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
            // baraboveleftarrow is mostly from glyph U+2190 in font KaTeX Main
            baraboveleftarrow: "M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",
            // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
            rightarrowabovebar: "M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",
            // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
            // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
            baraboveshortleftharpoon: "M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",
            rightharpoonaboveshortbar: "M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",
            shortbaraboveleftharpoon: "M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",
            shortrightharpoonabovebar: "M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"
          };
          const tallDelim = function(label, midHeight) {
            switch (label) {
              case "lbrack":
                return "M403 1759 V84 H666 V0 H319 V1759 v" + midHeight + " v1759 h347 v-84\nH403z M403 1759 V0 H319 V1759 v" + midHeight + " v1759 h84z";
              case "rbrack":
                return "M347 1759 V0 H0 V84 H263 V1759 v" + midHeight + " v1759 H0 v84 H347z\nM347 1759 V0 H263 V1759 v" + midHeight + " v1759 h84z";
              case "vert":
                return "M145 15 v585 v" + midHeight + " v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v" + -midHeight + " v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v" + midHeight + " v585 h43z";
              case "doublevert":
                return "M145 15 v585 v" + midHeight + " v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v" + -midHeight + " v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v" + midHeight + " v585 h43z\nM367 15 v585 v" + midHeight + " v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v" + -midHeight + " v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M410 15 H367 v585 v" + midHeight + " v585 h43z";
              case "lfloor":
                return "M319 602 V0 H403 V602 v" + midHeight + " v1715 h263 v84 H319z\nMM319 602 V0 H403 V602 v" + midHeight + " v1715 H319z";
              case "rfloor":
                return "M319 602 V0 H403 V602 v" + midHeight + " v1799 H0 v-84 H319z\nMM319 602 V0 H403 V602 v" + midHeight + " v1715 H319z";
              case "lceil":
                return "M403 1759 V84 H666 V0 H319 V1759 v" + midHeight + " v602 h84z\nM403 1759 V0 H319 V1759 v" + midHeight + " v602 h84z";
              case "rceil":
                return "M347 1759 V0 H0 V84 H263 V1759 v" + midHeight + " v602 h84z\nM347 1759 V0 h-84 V1759 v" + midHeight + " v602 h84z";
              case "lparen":
                return "M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1\nc-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,\n-36,557 l0," + (midHeight + 84) + "c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,\n949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9\nc0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,\n-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189\nl0,-" + (midHeight + 92) + "c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,\n-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z";
              case "rparen":
                return "M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,\n63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5\nc11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0," + (midHeight + 9) + "\nc-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664\nc-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11\nc0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17\nc242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558\nl0,-" + (midHeight + 144) + "c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,\n-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z";
              default:
                throw new Error("Unknown stretchy delimiter.");
            }
          };
          class DocumentFragment {
            // HtmlDomNode
            // Never used; needed for satisfying interface.
            constructor(children2) {
              this.children = void 0;
              this.classes = void 0;
              this.height = void 0;
              this.depth = void 0;
              this.maxFontSize = void 0;
              this.style = void 0;
              this.children = children2;
              this.classes = [];
              this.height = 0;
              this.depth = 0;
              this.maxFontSize = 0;
              this.style = {};
            }
            hasClass(className) {
              return utils.contains(this.classes, className);
            }
            /** Convert the fragment into a node. */
            toNode() {
              const frag = document.createDocumentFragment();
              for (let i = 0; i < this.children.length; i++) {
                frag.appendChild(this.children[i].toNode());
              }
              return frag;
            }
            /** Convert the fragment into HTML markup. */
            toMarkup() {
              let markup = "";
              for (let i = 0; i < this.children.length; i++) {
                markup += this.children[i].toMarkup();
              }
              return markup;
            }
            /**
             * Converts the math node into a string, similar to innerText. Applies to
             * MathDomNode's only.
             */
            toText() {
              const toText = (child) => child.toText();
              return this.children.map(toText).join("");
            }
          }
          var fontMetricsData = {
            "AMS-Regular": {
              "32": [0, 0, 0, 0, 0.25],
              "65": [0, 0.68889, 0, 0, 0.72222],
              "66": [0, 0.68889, 0, 0, 0.66667],
              "67": [0, 0.68889, 0, 0, 0.72222],
              "68": [0, 0.68889, 0, 0, 0.72222],
              "69": [0, 0.68889, 0, 0, 0.66667],
              "70": [0, 0.68889, 0, 0, 0.61111],
              "71": [0, 0.68889, 0, 0, 0.77778],
              "72": [0, 0.68889, 0, 0, 0.77778],
              "73": [0, 0.68889, 0, 0, 0.38889],
              "74": [0.16667, 0.68889, 0, 0, 0.5],
              "75": [0, 0.68889, 0, 0, 0.77778],
              "76": [0, 0.68889, 0, 0, 0.66667],
              "77": [0, 0.68889, 0, 0, 0.94445],
              "78": [0, 0.68889, 0, 0, 0.72222],
              "79": [0.16667, 0.68889, 0, 0, 0.77778],
              "80": [0, 0.68889, 0, 0, 0.61111],
              "81": [0.16667, 0.68889, 0, 0, 0.77778],
              "82": [0, 0.68889, 0, 0, 0.72222],
              "83": [0, 0.68889, 0, 0, 0.55556],
              "84": [0, 0.68889, 0, 0, 0.66667],
              "85": [0, 0.68889, 0, 0, 0.72222],
              "86": [0, 0.68889, 0, 0, 0.72222],
              "87": [0, 0.68889, 0, 0, 1],
              "88": [0, 0.68889, 0, 0, 0.72222],
              "89": [0, 0.68889, 0, 0, 0.72222],
              "90": [0, 0.68889, 0, 0, 0.66667],
              "107": [0, 0.68889, 0, 0, 0.55556],
              "160": [0, 0, 0, 0, 0.25],
              "165": [0, 0.675, 0.025, 0, 0.75],
              "174": [0.15559, 0.69224, 0, 0, 0.94666],
              "240": [0, 0.68889, 0, 0, 0.55556],
              "295": [0, 0.68889, 0, 0, 0.54028],
              "710": [0, 0.825, 0, 0, 2.33334],
              "732": [0, 0.9, 0, 0, 2.33334],
              "770": [0, 0.825, 0, 0, 2.33334],
              "771": [0, 0.9, 0, 0, 2.33334],
              "989": [0.08167, 0.58167, 0, 0, 0.77778],
              "1008": [0, 0.43056, 0.04028, 0, 0.66667],
              "8245": [0, 0.54986, 0, 0, 0.275],
              "8463": [0, 0.68889, 0, 0, 0.54028],
              "8487": [0, 0.68889, 0, 0, 0.72222],
              "8498": [0, 0.68889, 0, 0, 0.55556],
              "8502": [0, 0.68889, 0, 0, 0.66667],
              "8503": [0, 0.68889, 0, 0, 0.44445],
              "8504": [0, 0.68889, 0, 0, 0.66667],
              "8513": [0, 0.68889, 0, 0, 0.63889],
              "8592": [-0.03598, 0.46402, 0, 0, 0.5],
              "8594": [-0.03598, 0.46402, 0, 0, 0.5],
              "8602": [-0.13313, 0.36687, 0, 0, 1],
              "8603": [-0.13313, 0.36687, 0, 0, 1],
              "8606": [0.01354, 0.52239, 0, 0, 1],
              "8608": [0.01354, 0.52239, 0, 0, 1],
              "8610": [0.01354, 0.52239, 0, 0, 1.11111],
              "8611": [0.01354, 0.52239, 0, 0, 1.11111],
              "8619": [0, 0.54986, 0, 0, 1],
              "8620": [0, 0.54986, 0, 0, 1],
              "8621": [-0.13313, 0.37788, 0, 0, 1.38889],
              "8622": [-0.13313, 0.36687, 0, 0, 1],
              "8624": [0, 0.69224, 0, 0, 0.5],
              "8625": [0, 0.69224, 0, 0, 0.5],
              "8630": [0, 0.43056, 0, 0, 1],
              "8631": [0, 0.43056, 0, 0, 1],
              "8634": [0.08198, 0.58198, 0, 0, 0.77778],
              "8635": [0.08198, 0.58198, 0, 0, 0.77778],
              "8638": [0.19444, 0.69224, 0, 0, 0.41667],
              "8639": [0.19444, 0.69224, 0, 0, 0.41667],
              "8642": [0.19444, 0.69224, 0, 0, 0.41667],
              "8643": [0.19444, 0.69224, 0, 0, 0.41667],
              "8644": [0.1808, 0.675, 0, 0, 1],
              "8646": [0.1808, 0.675, 0, 0, 1],
              "8647": [0.1808, 0.675, 0, 0, 1],
              "8648": [0.19444, 0.69224, 0, 0, 0.83334],
              "8649": [0.1808, 0.675, 0, 0, 1],
              "8650": [0.19444, 0.69224, 0, 0, 0.83334],
              "8651": [0.01354, 0.52239, 0, 0, 1],
              "8652": [0.01354, 0.52239, 0, 0, 1],
              "8653": [-0.13313, 0.36687, 0, 0, 1],
              "8654": [-0.13313, 0.36687, 0, 0, 1],
              "8655": [-0.13313, 0.36687, 0, 0, 1],
              "8666": [0.13667, 0.63667, 0, 0, 1],
              "8667": [0.13667, 0.63667, 0, 0, 1],
              "8669": [-0.13313, 0.37788, 0, 0, 1],
              "8672": [-0.064, 0.437, 0, 0, 1.334],
              "8674": [-0.064, 0.437, 0, 0, 1.334],
              "8705": [0, 0.825, 0, 0, 0.5],
              "8708": [0, 0.68889, 0, 0, 0.55556],
              "8709": [0.08167, 0.58167, 0, 0, 0.77778],
              "8717": [0, 0.43056, 0, 0, 0.42917],
              "8722": [-0.03598, 0.46402, 0, 0, 0.5],
              "8724": [0.08198, 0.69224, 0, 0, 0.77778],
              "8726": [0.08167, 0.58167, 0, 0, 0.77778],
              "8733": [0, 0.69224, 0, 0, 0.77778],
              "8736": [0, 0.69224, 0, 0, 0.72222],
              "8737": [0, 0.69224, 0, 0, 0.72222],
              "8738": [0.03517, 0.52239, 0, 0, 0.72222],
              "8739": [0.08167, 0.58167, 0, 0, 0.22222],
              "8740": [0.25142, 0.74111, 0, 0, 0.27778],
              "8741": [0.08167, 0.58167, 0, 0, 0.38889],
              "8742": [0.25142, 0.74111, 0, 0, 0.5],
              "8756": [0, 0.69224, 0, 0, 0.66667],
              "8757": [0, 0.69224, 0, 0, 0.66667],
              "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
              "8765": [-0.13313, 0.37788, 0, 0, 0.77778],
              "8769": [-0.13313, 0.36687, 0, 0, 0.77778],
              "8770": [-0.03625, 0.46375, 0, 0, 0.77778],
              "8774": [0.30274, 0.79383, 0, 0, 0.77778],
              "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
              "8778": [0.08167, 0.58167, 0, 0, 0.77778],
              "8782": [0.06062, 0.54986, 0, 0, 0.77778],
              "8783": [0.06062, 0.54986, 0, 0, 0.77778],
              "8785": [0.08198, 0.58198, 0, 0, 0.77778],
              "8786": [0.08198, 0.58198, 0, 0, 0.77778],
              "8787": [0.08198, 0.58198, 0, 0, 0.77778],
              "8790": [0, 0.69224, 0, 0, 0.77778],
              "8791": [0.22958, 0.72958, 0, 0, 0.77778],
              "8796": [0.08198, 0.91667, 0, 0, 0.77778],
              "8806": [0.25583, 0.75583, 0, 0, 0.77778],
              "8807": [0.25583, 0.75583, 0, 0, 0.77778],
              "8808": [0.25142, 0.75726, 0, 0, 0.77778],
              "8809": [0.25142, 0.75726, 0, 0, 0.77778],
              "8812": [0.25583, 0.75583, 0, 0, 0.5],
              "8814": [0.20576, 0.70576, 0, 0, 0.77778],
              "8815": [0.20576, 0.70576, 0, 0, 0.77778],
              "8816": [0.30274, 0.79383, 0, 0, 0.77778],
              "8817": [0.30274, 0.79383, 0, 0, 0.77778],
              "8818": [0.22958, 0.72958, 0, 0, 0.77778],
              "8819": [0.22958, 0.72958, 0, 0, 0.77778],
              "8822": [0.1808, 0.675, 0, 0, 0.77778],
              "8823": [0.1808, 0.675, 0, 0, 0.77778],
              "8828": [0.13667, 0.63667, 0, 0, 0.77778],
              "8829": [0.13667, 0.63667, 0, 0, 0.77778],
              "8830": [0.22958, 0.72958, 0, 0, 0.77778],
              "8831": [0.22958, 0.72958, 0, 0, 0.77778],
              "8832": [0.20576, 0.70576, 0, 0, 0.77778],
              "8833": [0.20576, 0.70576, 0, 0, 0.77778],
              "8840": [0.30274, 0.79383, 0, 0, 0.77778],
              "8841": [0.30274, 0.79383, 0, 0, 0.77778],
              "8842": [0.13597, 0.63597, 0, 0, 0.77778],
              "8843": [0.13597, 0.63597, 0, 0, 0.77778],
              "8847": [0.03517, 0.54986, 0, 0, 0.77778],
              "8848": [0.03517, 0.54986, 0, 0, 0.77778],
              "8858": [0.08198, 0.58198, 0, 0, 0.77778],
              "8859": [0.08198, 0.58198, 0, 0, 0.77778],
              "8861": [0.08198, 0.58198, 0, 0, 0.77778],
              "8862": [0, 0.675, 0, 0, 0.77778],
              "8863": [0, 0.675, 0, 0, 0.77778],
              "8864": [0, 0.675, 0, 0, 0.77778],
              "8865": [0, 0.675, 0, 0, 0.77778],
              "8872": [0, 0.69224, 0, 0, 0.61111],
              "8873": [0, 0.69224, 0, 0, 0.72222],
              "8874": [0, 0.69224, 0, 0, 0.88889],
              "8876": [0, 0.68889, 0, 0, 0.61111],
              "8877": [0, 0.68889, 0, 0, 0.61111],
              "8878": [0, 0.68889, 0, 0, 0.72222],
              "8879": [0, 0.68889, 0, 0, 0.72222],
              "8882": [0.03517, 0.54986, 0, 0, 0.77778],
              "8883": [0.03517, 0.54986, 0, 0, 0.77778],
              "8884": [0.13667, 0.63667, 0, 0, 0.77778],
              "8885": [0.13667, 0.63667, 0, 0, 0.77778],
              "8888": [0, 0.54986, 0, 0, 1.11111],
              "8890": [0.19444, 0.43056, 0, 0, 0.55556],
              "8891": [0.19444, 0.69224, 0, 0, 0.61111],
              "8892": [0.19444, 0.69224, 0, 0, 0.61111],
              "8901": [0, 0.54986, 0, 0, 0.27778],
              "8903": [0.08167, 0.58167, 0, 0, 0.77778],
              "8905": [0.08167, 0.58167, 0, 0, 0.77778],
              "8906": [0.08167, 0.58167, 0, 0, 0.77778],
              "8907": [0, 0.69224, 0, 0, 0.77778],
              "8908": [0, 0.69224, 0, 0, 0.77778],
              "8909": [-0.03598, 0.46402, 0, 0, 0.77778],
              "8910": [0, 0.54986, 0, 0, 0.76042],
              "8911": [0, 0.54986, 0, 0, 0.76042],
              "8912": [0.03517, 0.54986, 0, 0, 0.77778],
              "8913": [0.03517, 0.54986, 0, 0, 0.77778],
              "8914": [0, 0.54986, 0, 0, 0.66667],
              "8915": [0, 0.54986, 0, 0, 0.66667],
              "8916": [0, 0.69224, 0, 0, 0.66667],
              "8918": [0.0391, 0.5391, 0, 0, 0.77778],
              "8919": [0.0391, 0.5391, 0, 0, 0.77778],
              "8920": [0.03517, 0.54986, 0, 0, 1.33334],
              "8921": [0.03517, 0.54986, 0, 0, 1.33334],
              "8922": [0.38569, 0.88569, 0, 0, 0.77778],
              "8923": [0.38569, 0.88569, 0, 0, 0.77778],
              "8926": [0.13667, 0.63667, 0, 0, 0.77778],
              "8927": [0.13667, 0.63667, 0, 0, 0.77778],
              "8928": [0.30274, 0.79383, 0, 0, 0.77778],
              "8929": [0.30274, 0.79383, 0, 0, 0.77778],
              "8934": [0.23222, 0.74111, 0, 0, 0.77778],
              "8935": [0.23222, 0.74111, 0, 0, 0.77778],
              "8936": [0.23222, 0.74111, 0, 0, 0.77778],
              "8937": [0.23222, 0.74111, 0, 0, 0.77778],
              "8938": [0.20576, 0.70576, 0, 0, 0.77778],
              "8939": [0.20576, 0.70576, 0, 0, 0.77778],
              "8940": [0.30274, 0.79383, 0, 0, 0.77778],
              "8941": [0.30274, 0.79383, 0, 0, 0.77778],
              "8994": [0.19444, 0.69224, 0, 0, 0.77778],
              "8995": [0.19444, 0.69224, 0, 0, 0.77778],
              "9416": [0.15559, 0.69224, 0, 0, 0.90222],
              "9484": [0, 0.69224, 0, 0, 0.5],
              "9488": [0, 0.69224, 0, 0, 0.5],
              "9492": [0, 0.37788, 0, 0, 0.5],
              "9496": [0, 0.37788, 0, 0, 0.5],
              "9585": [0.19444, 0.68889, 0, 0, 0.88889],
              "9586": [0.19444, 0.74111, 0, 0, 0.88889],
              "9632": [0, 0.675, 0, 0, 0.77778],
              "9633": [0, 0.675, 0, 0, 0.77778],
              "9650": [0, 0.54986, 0, 0, 0.72222],
              "9651": [0, 0.54986, 0, 0, 0.72222],
              "9654": [0.03517, 0.54986, 0, 0, 0.77778],
              "9660": [0, 0.54986, 0, 0, 0.72222],
              "9661": [0, 0.54986, 0, 0, 0.72222],
              "9664": [0.03517, 0.54986, 0, 0, 0.77778],
              "9674": [0.11111, 0.69224, 0, 0, 0.66667],
              "9733": [0.19444, 0.69224, 0, 0, 0.94445],
              "10003": [0, 0.69224, 0, 0, 0.83334],
              "10016": [0, 0.69224, 0, 0, 0.83334],
              "10731": [0.11111, 0.69224, 0, 0, 0.66667],
              "10846": [0.19444, 0.75583, 0, 0, 0.61111],
              "10877": [0.13667, 0.63667, 0, 0, 0.77778],
              "10878": [0.13667, 0.63667, 0, 0, 0.77778],
              "10885": [0.25583, 0.75583, 0, 0, 0.77778],
              "10886": [0.25583, 0.75583, 0, 0, 0.77778],
              "10887": [0.13597, 0.63597, 0, 0, 0.77778],
              "10888": [0.13597, 0.63597, 0, 0, 0.77778],
              "10889": [0.26167, 0.75726, 0, 0, 0.77778],
              "10890": [0.26167, 0.75726, 0, 0, 0.77778],
              "10891": [0.48256, 0.98256, 0, 0, 0.77778],
              "10892": [0.48256, 0.98256, 0, 0, 0.77778],
              "10901": [0.13667, 0.63667, 0, 0, 0.77778],
              "10902": [0.13667, 0.63667, 0, 0, 0.77778],
              "10933": [0.25142, 0.75726, 0, 0, 0.77778],
              "10934": [0.25142, 0.75726, 0, 0, 0.77778],
              "10935": [0.26167, 0.75726, 0, 0, 0.77778],
              "10936": [0.26167, 0.75726, 0, 0, 0.77778],
              "10937": [0.26167, 0.75726, 0, 0, 0.77778],
              "10938": [0.26167, 0.75726, 0, 0, 0.77778],
              "10949": [0.25583, 0.75583, 0, 0, 0.77778],
              "10950": [0.25583, 0.75583, 0, 0, 0.77778],
              "10955": [0.28481, 0.79383, 0, 0, 0.77778],
              "10956": [0.28481, 0.79383, 0, 0, 0.77778],
              "57350": [0.08167, 0.58167, 0, 0, 0.22222],
              "57351": [0.08167, 0.58167, 0, 0, 0.38889],
              "57352": [0.08167, 0.58167, 0, 0, 0.77778],
              "57353": [0, 0.43056, 0.04028, 0, 0.66667],
              "57356": [0.25142, 0.75726, 0, 0, 0.77778],
              "57357": [0.25142, 0.75726, 0, 0, 0.77778],
              "57358": [0.41951, 0.91951, 0, 0, 0.77778],
              "57359": [0.30274, 0.79383, 0, 0, 0.77778],
              "57360": [0.30274, 0.79383, 0, 0, 0.77778],
              "57361": [0.41951, 0.91951, 0, 0, 0.77778],
              "57366": [0.25142, 0.75726, 0, 0, 0.77778],
              "57367": [0.25142, 0.75726, 0, 0, 0.77778],
              "57368": [0.25142, 0.75726, 0, 0, 0.77778],
              "57369": [0.25142, 0.75726, 0, 0, 0.77778],
              "57370": [0.13597, 0.63597, 0, 0, 0.77778],
              "57371": [0.13597, 0.63597, 0, 0, 0.77778]
            },
            "Caligraphic-Regular": {
              "32": [0, 0, 0, 0, 0.25],
              "65": [0, 0.68333, 0, 0.19445, 0.79847],
              "66": [0, 0.68333, 0.03041, 0.13889, 0.65681],
              "67": [0, 0.68333, 0.05834, 0.13889, 0.52653],
              "68": [0, 0.68333, 0.02778, 0.08334, 0.77139],
              "69": [0, 0.68333, 0.08944, 0.11111, 0.52778],
              "70": [0, 0.68333, 0.09931, 0.11111, 0.71875],
              "71": [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
              "72": [0, 0.68333, 965e-5, 0.11111, 0.84452],
              "73": [0, 0.68333, 0.07382, 0, 0.54452],
              "74": [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
              "75": [0, 0.68333, 0.01445, 0.05556, 0.76195],
              "76": [0, 0.68333, 0, 0.13889, 0.68972],
              "77": [0, 0.68333, 0, 0.13889, 1.2009],
              "78": [0, 0.68333, 0.14736, 0.08334, 0.82049],
              "79": [0, 0.68333, 0.02778, 0.11111, 0.79611],
              "80": [0, 0.68333, 0.08222, 0.08334, 0.69556],
              "81": [0.09722, 0.68333, 0, 0.11111, 0.81667],
              "82": [0, 0.68333, 0, 0.08334, 0.8475],
              "83": [0, 0.68333, 0.075, 0.13889, 0.60556],
              "84": [0, 0.68333, 0.25417, 0, 0.54464],
              "85": [0, 0.68333, 0.09931, 0.08334, 0.62583],
              "86": [0, 0.68333, 0.08222, 0, 0.61278],
              "87": [0, 0.68333, 0.08222, 0.08334, 0.98778],
              "88": [0, 0.68333, 0.14643, 0.13889, 0.7133],
              "89": [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
              "90": [0, 0.68333, 0.07944, 0.13889, 0.72473],
              "160": [0, 0, 0, 0, 0.25]
            },
            "Fraktur-Regular": {
              "32": [0, 0, 0, 0, 0.25],
              "33": [0, 0.69141, 0, 0, 0.29574],
              "34": [0, 0.69141, 0, 0, 0.21471],
              "38": [0, 0.69141, 0, 0, 0.73786],
              "39": [0, 0.69141, 0, 0, 0.21201],
              "40": [0.24982, 0.74947, 0, 0, 0.38865],
              "41": [0.24982, 0.74947, 0, 0, 0.38865],
              "42": [0, 0.62119, 0, 0, 0.27764],
              "43": [0.08319, 0.58283, 0, 0, 0.75623],
              "44": [0, 0.10803, 0, 0, 0.27764],
              "45": [0.08319, 0.58283, 0, 0, 0.75623],
              "46": [0, 0.10803, 0, 0, 0.27764],
              "47": [0.24982, 0.74947, 0, 0, 0.50181],
              "48": [0, 0.47534, 0, 0, 0.50181],
              "49": [0, 0.47534, 0, 0, 0.50181],
              "50": [0, 0.47534, 0, 0, 0.50181],
              "51": [0.18906, 0.47534, 0, 0, 0.50181],
              "52": [0.18906, 0.47534, 0, 0, 0.50181],
              "53": [0.18906, 0.47534, 0, 0, 0.50181],
              "54": [0, 0.69141, 0, 0, 0.50181],
              "55": [0.18906, 0.47534, 0, 0, 0.50181],
              "56": [0, 0.69141, 0, 0, 0.50181],
              "57": [0.18906, 0.47534, 0, 0, 0.50181],
              "58": [0, 0.47534, 0, 0, 0.21606],
              "59": [0.12604, 0.47534, 0, 0, 0.21606],
              "61": [-0.13099, 0.36866, 0, 0, 0.75623],
              "63": [0, 0.69141, 0, 0, 0.36245],
              "65": [0, 0.69141, 0, 0, 0.7176],
              "66": [0, 0.69141, 0, 0, 0.88397],
              "67": [0, 0.69141, 0, 0, 0.61254],
              "68": [0, 0.69141, 0, 0, 0.83158],
              "69": [0, 0.69141, 0, 0, 0.66278],
              "70": [0.12604, 0.69141, 0, 0, 0.61119],
              "71": [0, 0.69141, 0, 0, 0.78539],
              "72": [0.06302, 0.69141, 0, 0, 0.7203],
              "73": [0, 0.69141, 0, 0, 0.55448],
              "74": [0.12604, 0.69141, 0, 0, 0.55231],
              "75": [0, 0.69141, 0, 0, 0.66845],
              "76": [0, 0.69141, 0, 0, 0.66602],
              "77": [0, 0.69141, 0, 0, 1.04953],
              "78": [0, 0.69141, 0, 0, 0.83212],
              "79": [0, 0.69141, 0, 0, 0.82699],
              "80": [0.18906, 0.69141, 0, 0, 0.82753],
              "81": [0.03781, 0.69141, 0, 0, 0.82699],
              "82": [0, 0.69141, 0, 0, 0.82807],
              "83": [0, 0.69141, 0, 0, 0.82861],
              "84": [0, 0.69141, 0, 0, 0.66899],
              "85": [0, 0.69141, 0, 0, 0.64576],
              "86": [0, 0.69141, 0, 0, 0.83131],
              "87": [0, 0.69141, 0, 0, 1.04602],
              "88": [0, 0.69141, 0, 0, 0.71922],
              "89": [0.18906, 0.69141, 0, 0, 0.83293],
              "90": [0.12604, 0.69141, 0, 0, 0.60201],
              "91": [0.24982, 0.74947, 0, 0, 0.27764],
              "93": [0.24982, 0.74947, 0, 0, 0.27764],
              "94": [0, 0.69141, 0, 0, 0.49965],
              "97": [0, 0.47534, 0, 0, 0.50046],
              "98": [0, 0.69141, 0, 0, 0.51315],
              "99": [0, 0.47534, 0, 0, 0.38946],
              "100": [0, 0.62119, 0, 0, 0.49857],
              "101": [0, 0.47534, 0, 0, 0.40053],
              "102": [0.18906, 0.69141, 0, 0, 0.32626],
              "103": [0.18906, 0.47534, 0, 0, 0.5037],
              "104": [0.18906, 0.69141, 0, 0, 0.52126],
              "105": [0, 0.69141, 0, 0, 0.27899],
              "106": [0, 0.69141, 0, 0, 0.28088],
              "107": [0, 0.69141, 0, 0, 0.38946],
              "108": [0, 0.69141, 0, 0, 0.27953],
              "109": [0, 0.47534, 0, 0, 0.76676],
              "110": [0, 0.47534, 0, 0, 0.52666],
              "111": [0, 0.47534, 0, 0, 0.48885],
              "112": [0.18906, 0.52396, 0, 0, 0.50046],
              "113": [0.18906, 0.47534, 0, 0, 0.48912],
              "114": [0, 0.47534, 0, 0, 0.38919],
              "115": [0, 0.47534, 0, 0, 0.44266],
              "116": [0, 0.62119, 0, 0, 0.33301],
              "117": [0, 0.47534, 0, 0, 0.5172],
              "118": [0, 0.52396, 0, 0, 0.5118],
              "119": [0, 0.52396, 0, 0, 0.77351],
              "120": [0.18906, 0.47534, 0, 0, 0.38865],
              "121": [0.18906, 0.47534, 0, 0, 0.49884],
              "122": [0.18906, 0.47534, 0, 0, 0.39054],
              "160": [0, 0, 0, 0, 0.25],
              "8216": [0, 0.69141, 0, 0, 0.21471],
              "8217": [0, 0.69141, 0, 0, 0.21471],
              "58112": [0, 0.62119, 0, 0, 0.49749],
              "58113": [0, 0.62119, 0, 0, 0.4983],
              "58114": [0.18906, 0.69141, 0, 0, 0.33328],
              "58115": [0.18906, 0.69141, 0, 0, 0.32923],
              "58116": [0.18906, 0.47534, 0, 0, 0.50343],
              "58117": [0, 0.69141, 0, 0, 0.33301],
              "58118": [0, 0.62119, 0, 0, 0.33409],
              "58119": [0, 0.47534, 0, 0, 0.50073]
            },
            "Main-Bold": {
              "32": [0, 0, 0, 0, 0.25],
              "33": [0, 0.69444, 0, 0, 0.35],
              "34": [0, 0.69444, 0, 0, 0.60278],
              "35": [0.19444, 0.69444, 0, 0, 0.95833],
              "36": [0.05556, 0.75, 0, 0, 0.575],
              "37": [0.05556, 0.75, 0, 0, 0.95833],
              "38": [0, 0.69444, 0, 0, 0.89444],
              "39": [0, 0.69444, 0, 0, 0.31944],
              "40": [0.25, 0.75, 0, 0, 0.44722],
              "41": [0.25, 0.75, 0, 0, 0.44722],
              "42": [0, 0.75, 0, 0, 0.575],
              "43": [0.13333, 0.63333, 0, 0, 0.89444],
              "44": [0.19444, 0.15556, 0, 0, 0.31944],
              "45": [0, 0.44444, 0, 0, 0.38333],
              "46": [0, 0.15556, 0, 0, 0.31944],
              "47": [0.25, 0.75, 0, 0, 0.575],
              "48": [0, 0.64444, 0, 0, 0.575],
              "49": [0, 0.64444, 0, 0, 0.575],
              "50": [0, 0.64444, 0, 0, 0.575],
              "51": [0, 0.64444, 0, 0, 0.575],
              "52": [0, 0.64444, 0, 0, 0.575],
              "53": [0, 0.64444, 0, 0, 0.575],
              "54": [0, 0.64444, 0, 0, 0.575],
              "55": [0, 0.64444, 0, 0, 0.575],
              "56": [0, 0.64444, 0, 0, 0.575],
              "57": [0, 0.64444, 0, 0, 0.575],
              "58": [0, 0.44444, 0, 0, 0.31944],
              "59": [0.19444, 0.44444, 0, 0, 0.31944],
              "60": [0.08556, 0.58556, 0, 0, 0.89444],
              "61": [-0.10889, 0.39111, 0, 0, 0.89444],
              "62": [0.08556, 0.58556, 0, 0, 0.89444],
              "63": [0, 0.69444, 0, 0, 0.54305],
              "64": [0, 0.69444, 0, 0, 0.89444],
              "65": [0, 0.68611, 0, 0, 0.86944],
              "66": [0, 0.68611, 0, 0, 0.81805],
              "67": [0, 0.68611, 0, 0, 0.83055],
              "68": [0, 0.68611, 0, 0, 0.88194],
              "69": [0, 0.68611, 0, 0, 0.75555],
              "70": [0, 0.68611, 0, 0, 0.72361],
              "71": [0, 0.68611, 0, 0, 0.90416],
              "72": [0, 0.68611, 0, 0, 0.9],
              "73": [0, 0.68611, 0, 0, 0.43611],
              "74": [0, 0.68611, 0, 0, 0.59444],
              "75": [0, 0.68611, 0, 0, 0.90138],
              "76": [0, 0.68611, 0, 0, 0.69166],
              "77": [0, 0.68611, 0, 0, 1.09166],
              "78": [0, 0.68611, 0, 0, 0.9],
              "79": [0, 0.68611, 0, 0, 0.86388],
              "80": [0, 0.68611, 0, 0, 0.78611],
              "81": [0.19444, 0.68611, 0, 0, 0.86388],
              "82": [0, 0.68611, 0, 0, 0.8625],
              "83": [0, 0.68611, 0, 0, 0.63889],
              "84": [0, 0.68611, 0, 0, 0.8],
              "85": [0, 0.68611, 0, 0, 0.88472],
              "86": [0, 0.68611, 0.01597, 0, 0.86944],
              "87": [0, 0.68611, 0.01597, 0, 1.18888],
              "88": [0, 0.68611, 0, 0, 0.86944],
              "89": [0, 0.68611, 0.02875, 0, 0.86944],
              "90": [0, 0.68611, 0, 0, 0.70277],
              "91": [0.25, 0.75, 0, 0, 0.31944],
              "92": [0.25, 0.75, 0, 0, 0.575],
              "93": [0.25, 0.75, 0, 0, 0.31944],
              "94": [0, 0.69444, 0, 0, 0.575],
              "95": [0.31, 0.13444, 0.03194, 0, 0.575],
              "97": [0, 0.44444, 0, 0, 0.55902],
              "98": [0, 0.69444, 0, 0, 0.63889],
              "99": [0, 0.44444, 0, 0, 0.51111],
              "100": [0, 0.69444, 0, 0, 0.63889],
              "101": [0, 0.44444, 0, 0, 0.52708],
              "102": [0, 0.69444, 0.10903, 0, 0.35139],
              "103": [0.19444, 0.44444, 0.01597, 0, 0.575],
              "104": [0, 0.69444, 0, 0, 0.63889],
              "105": [0, 0.69444, 0, 0, 0.31944],
              "106": [0.19444, 0.69444, 0, 0, 0.35139],
              "107": [0, 0.69444, 0, 0, 0.60694],
              "108": [0, 0.69444, 0, 0, 0.31944],
              "109": [0, 0.44444, 0, 0, 0.95833],
              "110": [0, 0.44444, 0, 0, 0.63889],
              "111": [0, 0.44444, 0, 0, 0.575],
              "112": [0.19444, 0.44444, 0, 0, 0.63889],
              "113": [0.19444, 0.44444, 0, 0, 0.60694],
              "114": [0, 0.44444, 0, 0, 0.47361],
              "115": [0, 0.44444, 0, 0, 0.45361],
              "116": [0, 0.63492, 0, 0, 0.44722],
              "117": [0, 0.44444, 0, 0, 0.63889],
              "118": [0, 0.44444, 0.01597, 0, 0.60694],
              "119": [0, 0.44444, 0.01597, 0, 0.83055],
              "120": [0, 0.44444, 0, 0, 0.60694],
              "121": [0.19444, 0.44444, 0.01597, 0, 0.60694],
              "122": [0, 0.44444, 0, 0, 0.51111],
              "123": [0.25, 0.75, 0, 0, 0.575],
              "124": [0.25, 0.75, 0, 0, 0.31944],
              "125": [0.25, 0.75, 0, 0, 0.575],
              "126": [0.35, 0.34444, 0, 0, 0.575],
              "160": [0, 0, 0, 0, 0.25],
              "163": [0, 0.69444, 0, 0, 0.86853],
              "168": [0, 0.69444, 0, 0, 0.575],
              "172": [0, 0.44444, 0, 0, 0.76666],
              "176": [0, 0.69444, 0, 0, 0.86944],
              "177": [0.13333, 0.63333, 0, 0, 0.89444],
              "184": [0.17014, 0, 0, 0, 0.51111],
              "198": [0, 0.68611, 0, 0, 1.04166],
              "215": [0.13333, 0.63333, 0, 0, 0.89444],
              "216": [0.04861, 0.73472, 0, 0, 0.89444],
              "223": [0, 0.69444, 0, 0, 0.59722],
              "230": [0, 0.44444, 0, 0, 0.83055],
              "247": [0.13333, 0.63333, 0, 0, 0.89444],
              "248": [0.09722, 0.54167, 0, 0, 0.575],
              "305": [0, 0.44444, 0, 0, 0.31944],
              "338": [0, 0.68611, 0, 0, 1.16944],
              "339": [0, 0.44444, 0, 0, 0.89444],
              "567": [0.19444, 0.44444, 0, 0, 0.35139],
              "710": [0, 0.69444, 0, 0, 0.575],
              "711": [0, 0.63194, 0, 0, 0.575],
              "713": [0, 0.59611, 0, 0, 0.575],
              "714": [0, 0.69444, 0, 0, 0.575],
              "715": [0, 0.69444, 0, 0, 0.575],
              "728": [0, 0.69444, 0, 0, 0.575],
              "729": [0, 0.69444, 0, 0, 0.31944],
              "730": [0, 0.69444, 0, 0, 0.86944],
              "732": [0, 0.69444, 0, 0, 0.575],
              "733": [0, 0.69444, 0, 0, 0.575],
              "915": [0, 0.68611, 0, 0, 0.69166],
              "916": [0, 0.68611, 0, 0, 0.95833],
              "920": [0, 0.68611, 0, 0, 0.89444],
              "923": [0, 0.68611, 0, 0, 0.80555],
              "926": [0, 0.68611, 0, 0, 0.76666],
              "928": [0, 0.68611, 0, 0, 0.9],
              "931": [0, 0.68611, 0, 0, 0.83055],
              "933": [0, 0.68611, 0, 0, 0.89444],
              "934": [0, 0.68611, 0, 0, 0.83055],
              "936": [0, 0.68611, 0, 0, 0.89444],
              "937": [0, 0.68611, 0, 0, 0.83055],
              "8211": [0, 0.44444, 0.03194, 0, 0.575],
              "8212": [0, 0.44444, 0.03194, 0, 1.14999],
              "8216": [0, 0.69444, 0, 0, 0.31944],
              "8217": [0, 0.69444, 0, 0, 0.31944],
              "8220": [0, 0.69444, 0, 0, 0.60278],
              "8221": [0, 0.69444, 0, 0, 0.60278],
              "8224": [0.19444, 0.69444, 0, 0, 0.51111],
              "8225": [0.19444, 0.69444, 0, 0, 0.51111],
              "8242": [0, 0.55556, 0, 0, 0.34444],
              "8407": [0, 0.72444, 0.15486, 0, 0.575],
              "8463": [0, 0.69444, 0, 0, 0.66759],
              "8465": [0, 0.69444, 0, 0, 0.83055],
              "8467": [0, 0.69444, 0, 0, 0.47361],
              "8472": [0.19444, 0.44444, 0, 0, 0.74027],
              "8476": [0, 0.69444, 0, 0, 0.83055],
              "8501": [0, 0.69444, 0, 0, 0.70277],
              "8592": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8593": [0.19444, 0.69444, 0, 0, 0.575],
              "8594": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8595": [0.19444, 0.69444, 0, 0, 0.575],
              "8596": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8597": [0.25, 0.75, 0, 0, 0.575],
              "8598": [0.19444, 0.69444, 0, 0, 1.14999],
              "8599": [0.19444, 0.69444, 0, 0, 1.14999],
              "8600": [0.19444, 0.69444, 0, 0, 1.14999],
              "8601": [0.19444, 0.69444, 0, 0, 1.14999],
              "8636": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8637": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8640": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8641": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8656": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8657": [0.19444, 0.69444, 0, 0, 0.70277],
              "8658": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8659": [0.19444, 0.69444, 0, 0, 0.70277],
              "8660": [-0.10889, 0.39111, 0, 0, 1.14999],
              "8661": [0.25, 0.75, 0, 0, 0.70277],
              "8704": [0, 0.69444, 0, 0, 0.63889],
              "8706": [0, 0.69444, 0.06389, 0, 0.62847],
              "8707": [0, 0.69444, 0, 0, 0.63889],
              "8709": [0.05556, 0.75, 0, 0, 0.575],
              "8711": [0, 0.68611, 0, 0, 0.95833],
              "8712": [0.08556, 0.58556, 0, 0, 0.76666],
              "8715": [0.08556, 0.58556, 0, 0, 0.76666],
              "8722": [0.13333, 0.63333, 0, 0, 0.89444],
              "8723": [0.13333, 0.63333, 0, 0, 0.89444],
              "8725": [0.25, 0.75, 0, 0, 0.575],
              "8726": [0.25, 0.75, 0, 0, 0.575],
              "8727": [-0.02778, 0.47222, 0, 0, 0.575],
              "8728": [-0.02639, 0.47361, 0, 0, 0.575],
              "8729": [-0.02639, 0.47361, 0, 0, 0.575],
              "8730": [0.18, 0.82, 0, 0, 0.95833],
              "8733": [0, 0.44444, 0, 0, 0.89444],
              "8734": [0, 0.44444, 0, 0, 1.14999],
              "8736": [0, 0.69224, 0, 0, 0.72222],
              "8739": [0.25, 0.75, 0, 0, 0.31944],
              "8741": [0.25, 0.75, 0, 0, 0.575],
              "8743": [0, 0.55556, 0, 0, 0.76666],
              "8744": [0, 0.55556, 0, 0, 0.76666],
              "8745": [0, 0.55556, 0, 0, 0.76666],
              "8746": [0, 0.55556, 0, 0, 0.76666],
              "8747": [0.19444, 0.69444, 0.12778, 0, 0.56875],
              "8764": [-0.10889, 0.39111, 0, 0, 0.89444],
              "8768": [0.19444, 0.69444, 0, 0, 0.31944],
              "8771": [222e-5, 0.50222, 0, 0, 0.89444],
              "8773": [0.027, 0.638, 0, 0, 0.894],
              "8776": [0.02444, 0.52444, 0, 0, 0.89444],
              "8781": [222e-5, 0.50222, 0, 0, 0.89444],
              "8801": [222e-5, 0.50222, 0, 0, 0.89444],
              "8804": [0.19667, 0.69667, 0, 0, 0.89444],
              "8805": [0.19667, 0.69667, 0, 0, 0.89444],
              "8810": [0.08556, 0.58556, 0, 0, 1.14999],
              "8811": [0.08556, 0.58556, 0, 0, 1.14999],
              "8826": [0.08556, 0.58556, 0, 0, 0.89444],
              "8827": [0.08556, 0.58556, 0, 0, 0.89444],
              "8834": [0.08556, 0.58556, 0, 0, 0.89444],
              "8835": [0.08556, 0.58556, 0, 0, 0.89444],
              "8838": [0.19667, 0.69667, 0, 0, 0.89444],
              "8839": [0.19667, 0.69667, 0, 0, 0.89444],
              "8846": [0, 0.55556, 0, 0, 0.76666],
              "8849": [0.19667, 0.69667, 0, 0, 0.89444],
              "8850": [0.19667, 0.69667, 0, 0, 0.89444],
              "8851": [0, 0.55556, 0, 0, 0.76666],
              "8852": [0, 0.55556, 0, 0, 0.76666],
              "8853": [0.13333, 0.63333, 0, 0, 0.89444],
              "8854": [0.13333, 0.63333, 0, 0, 0.89444],
              "8855": [0.13333, 0.63333, 0, 0, 0.89444],
              "8856": [0.13333, 0.63333, 0, 0, 0.89444],
              "8857": [0.13333, 0.63333, 0, 0, 0.89444],
              "8866": [0, 0.69444, 0, 0, 0.70277],
              "8867": [0, 0.69444, 0, 0, 0.70277],
              "8868": [0, 0.69444, 0, 0, 0.89444],
              "8869": [0, 0.69444, 0, 0, 0.89444],
              "8900": [-0.02639, 0.47361, 0, 0, 0.575],
              "8901": [-0.02639, 0.47361, 0, 0, 0.31944],
              "8902": [-0.02778, 0.47222, 0, 0, 0.575],
              "8968": [0.25, 0.75, 0, 0, 0.51111],
              "8969": [0.25, 0.75, 0, 0, 0.51111],
              "8970": [0.25, 0.75, 0, 0, 0.51111],
              "8971": [0.25, 0.75, 0, 0, 0.51111],
              "8994": [-0.13889, 0.36111, 0, 0, 1.14999],
              "8995": [-0.13889, 0.36111, 0, 0, 1.14999],
              "9651": [0.19444, 0.69444, 0, 0, 1.02222],
              "9657": [-0.02778, 0.47222, 0, 0, 0.575],
              "9661": [0.19444, 0.69444, 0, 0, 1.02222],
              "9667": [-0.02778, 0.47222, 0, 0, 0.575],
              "9711": [0.19444, 0.69444, 0, 0, 1.14999],
              "9824": [0.12963, 0.69444, 0, 0, 0.89444],
              "9825": [0.12963, 0.69444, 0, 0, 0.89444],
              "9826": [0.12963, 0.69444, 0, 0, 0.89444],
              "9827": [0.12963, 0.69444, 0, 0, 0.89444],
              "9837": [0, 0.75, 0, 0, 0.44722],
              "9838": [0.19444, 0.69444, 0, 0, 0.44722],
              "9839": [0.19444, 0.69444, 0, 0, 0.44722],
              "10216": [0.25, 0.75, 0, 0, 0.44722],
              "10217": [0.25, 0.75, 0, 0, 0.44722],
              "10815": [0, 0.68611, 0, 0, 0.9],
              "10927": [0.19667, 0.69667, 0, 0, 0.89444],
              "10928": [0.19667, 0.69667, 0, 0, 0.89444],
              "57376": [0.19444, 0.69444, 0, 0, 0]
            },
            "Main-BoldItalic": {
              "32": [0, 0, 0, 0, 0.25],
              "33": [0, 0.69444, 0.11417, 0, 0.38611],
              "34": [0, 0.69444, 0.07939, 0, 0.62055],
              "35": [0.19444, 0.69444, 0.06833, 0, 0.94444],
              "37": [0.05556, 0.75, 0.12861, 0, 0.94444],
              "38": [0, 0.69444, 0.08528, 0, 0.88555],
              "39": [0, 0.69444, 0.12945, 0, 0.35555],
              "40": [0.25, 0.75, 0.15806, 0, 0.47333],
              "41": [0.25, 0.75, 0.03306, 0, 0.47333],
              "42": [0, 0.75, 0.14333, 0, 0.59111],
              "43": [0.10333, 0.60333, 0.03306, 0, 0.88555],
              "44": [0.19444, 0.14722, 0, 0, 0.35555],
              "45": [0, 0.44444, 0.02611, 0, 0.41444],
              "46": [0, 0.14722, 0, 0, 0.35555],
              "47": [0.25, 0.75, 0.15806, 0, 0.59111],
              "48": [0, 0.64444, 0.13167, 0, 0.59111],
              "49": [0, 0.64444, 0.13167, 0, 0.59111],
              "50": [0, 0.64444, 0.13167, 0, 0.59111],
              "51": [0, 0.64444, 0.13167, 0, 0.59111],
              "52": [0.19444, 0.64444, 0.13167, 0, 0.59111],
              "53": [0, 0.64444, 0.13167, 0, 0.59111],
              "54": [0, 0.64444, 0.13167, 0, 0.59111],
              "55": [0.19444, 0.64444, 0.13167, 0, 0.59111],
              "56": [0, 0.64444, 0.13167, 0, 0.59111],
              "57": [0, 0.64444, 0.13167, 0, 0.59111],
              "58": [0, 0.44444, 0.06695, 0, 0.35555],
              "59": [0.19444, 0.44444, 0.06695, 0, 0.35555],
              "61": [-0.10889, 0.39111, 0.06833, 0, 0.88555],
              "63": [0, 0.69444, 0.11472, 0, 0.59111],
              "64": [0, 0.69444, 0.09208, 0, 0.88555],
              "65": [0, 0.68611, 0, 0, 0.86555],
              "66": [0, 0.68611, 0.0992, 0, 0.81666],
              "67": [0, 0.68611, 0.14208, 0, 0.82666],
              "68": [0, 0.68611, 0.09062, 0, 0.87555],
              "69": [0, 0.68611, 0.11431, 0, 0.75666],
              "70": [0, 0.68611, 0.12903, 0, 0.72722],
              "71": [0, 0.68611, 0.07347, 0, 0.89527],
              "72": [0, 0.68611, 0.17208, 0, 0.8961],
              "73": [0, 0.68611, 0.15681, 0, 0.47166],
              "74": [0, 0.68611, 0.145, 0, 0.61055],
              "75": [0, 0.68611, 0.14208, 0, 0.89499],
              "76": [0, 0.68611, 0, 0, 0.69777],
              "77": [0, 0.68611, 0.17208, 0, 1.07277],
              "78": [0, 0.68611, 0.17208, 0, 0.8961],
              "79": [0, 0.68611, 0.09062, 0, 0.85499],
              "80": [0, 0.68611, 0.0992, 0, 0.78721],
              "81": [0.19444, 0.68611, 0.09062, 0, 0.85499],
              "82": [0, 0.68611, 0.02559, 0, 0.85944],
              "83": [0, 0.68611, 0.11264, 0, 0.64999],
              "84": [0, 0.68611, 0.12903, 0, 0.7961],
              "85": [0, 0.68611, 0.17208, 0, 0.88083],
              "86": [0, 0.68611, 0.18625, 0, 0.86555],
              "87": [0, 0.68611, 0.18625, 0, 1.15999],
              "88": [0, 0.68611, 0.15681, 0, 0.86555],
              "89": [0, 0.68611, 0.19803, 0, 0.86555],
              "90": [0, 0.68611, 0.14208, 0, 0.70888],
              "91": [0.25, 0.75, 0.1875, 0, 0.35611],
              "93": [0.25, 0.75, 0.09972, 0, 0.35611],
              "94": [0, 0.69444, 0.06709, 0, 0.59111],
              "95": [0.31, 0.13444, 0.09811, 0, 0.59111],
              "97": [0, 0.44444, 0.09426, 0, 0.59111],
              "98": [0, 0.69444, 0.07861, 0, 0.53222],
              "99": [0, 0.44444, 0.05222, 0, 0.53222],
              "100": [0, 0.69444, 0.10861, 0, 0.59111],
              "101": [0, 0.44444, 0.085, 0, 0.53222],
              "102": [0.19444, 0.69444, 0.21778, 0, 0.4],
              "103": [0.19444, 0.44444, 0.105, 0, 0.53222],
              "104": [0, 0.69444, 0.09426, 0, 0.59111],
              "105": [0, 0.69326, 0.11387, 0, 0.35555],
              "106": [0.19444, 0.69326, 0.1672, 0, 0.35555],
              "107": [0, 0.69444, 0.11111, 0, 0.53222],
              "108": [0, 0.69444, 0.10861, 0, 0.29666],
              "109": [0, 0.44444, 0.09426, 0, 0.94444],
              "110": [0, 0.44444, 0.09426, 0, 0.64999],
              "111": [0, 0.44444, 0.07861, 0, 0.59111],
              "112": [0.19444, 0.44444, 0.07861, 0, 0.59111],
              "113": [0.19444, 0.44444, 0.105, 0, 0.53222],
              "114": [0, 0.44444, 0.11111, 0, 0.50167],
              "115": [0, 0.44444, 0.08167, 0, 0.48694],
              "116": [0, 0.63492, 0.09639, 0, 0.385],
              "117": [0, 0.44444, 0.09426, 0, 0.62055],
              "118": [0, 0.44444, 0.11111, 0, 0.53222],
              "119": [0, 0.44444, 0.11111, 0, 0.76777],
              "120": [0, 0.44444, 0.12583, 0, 0.56055],
              "121": [0.19444, 0.44444, 0.105, 0, 0.56166],
              "122": [0, 0.44444, 0.13889, 0, 0.49055],
              "126": [0.35, 0.34444, 0.11472, 0, 0.59111],
              "160": [0, 0, 0, 0, 0.25],
              "168": [0, 0.69444, 0.11473, 0, 0.59111],
              "176": [0, 0.69444, 0, 0, 0.94888],
              "184": [0.17014, 0, 0, 0, 0.53222],
              "198": [0, 0.68611, 0.11431, 0, 1.02277],
              "216": [0.04861, 0.73472, 0.09062, 0, 0.88555],
              "223": [0.19444, 0.69444, 0.09736, 0, 0.665],
              "230": [0, 0.44444, 0.085, 0, 0.82666],
              "248": [0.09722, 0.54167, 0.09458, 0, 0.59111],
              "305": [0, 0.44444, 0.09426, 0, 0.35555],
              "338": [0, 0.68611, 0.11431, 0, 1.14054],
              "339": [0, 0.44444, 0.085, 0, 0.82666],
              "567": [0.19444, 0.44444, 0.04611, 0, 0.385],
              "710": [0, 0.69444, 0.06709, 0, 0.59111],
              "711": [0, 0.63194, 0.08271, 0, 0.59111],
              "713": [0, 0.59444, 0.10444, 0, 0.59111],
              "714": [0, 0.69444, 0.08528, 0, 0.59111],
              "715": [0, 0.69444, 0, 0, 0.59111],
              "728": [0, 0.69444, 0.10333, 0, 0.59111],
              "729": [0, 0.69444, 0.12945, 0, 0.35555],
              "730": [0, 0.69444, 0, 0, 0.94888],
              "732": [0, 0.69444, 0.11472, 0, 0.59111],
              "733": [0, 0.69444, 0.11472, 0, 0.59111],
              "915": [0, 0.68611, 0.12903, 0, 0.69777],
              "916": [0, 0.68611, 0, 0, 0.94444],
              "920": [0, 0.68611, 0.09062, 0, 0.88555],
              "923": [0, 0.68611, 0, 0, 0.80666],
              "926": [0, 0.68611, 0.15092, 0, 0.76777],
              "928": [0, 0.68611, 0.17208, 0, 0.8961],
              "931": [0, 0.68611, 0.11431, 0, 0.82666],
              "933": [0, 0.68611, 0.10778, 0, 0.88555],
              "934": [0, 0.68611, 0.05632, 0, 0.82666],
              "936": [0, 0.68611, 0.10778, 0, 0.88555],
              "937": [0, 0.68611, 0.0992, 0, 0.82666],
              "8211": [0, 0.44444, 0.09811, 0, 0.59111],
              "8212": [0, 0.44444, 0.09811, 0, 1.18221],
              "8216": [0, 0.69444, 0.12945, 0, 0.35555],
              "8217": [0, 0.69444, 0.12945, 0, 0.35555],
              "8220": [0, 0.69444, 0.16772, 0, 0.62055],
              "8221": [0, 0.69444, 0.07939, 0, 0.62055]
            },
            "Main-Italic": {
              "32": [0, 0, 0, 0, 0.25],
              "33": [0, 0.69444, 0.12417, 0, 0.30667],
              "34": [0, 0.69444, 0.06961, 0, 0.51444],
              "35": [0.19444, 0.69444, 0.06616, 0, 0.81777],
              "37": [0.05556, 0.75, 0.13639, 0, 0.81777],
              "38": [0, 0.69444, 0.09694, 0, 0.76666],
              "39": [0, 0.69444, 0.12417, 0, 0.30667],
              "40": [0.25, 0.75, 0.16194, 0, 0.40889],
              "41": [0.25, 0.75, 0.03694, 0, 0.40889],
              "42": [0, 0.75, 0.14917, 0, 0.51111],
              "43": [0.05667, 0.56167, 0.03694, 0, 0.76666],
              "44": [0.19444, 0.10556, 0, 0, 0.30667],
              "45": [0, 0.43056, 0.02826, 0, 0.35778],
              "46": [0, 0.10556, 0, 0, 0.30667],
              "47": [0.25, 0.75, 0.16194, 0, 0.51111],
              "48": [0, 0.64444, 0.13556, 0, 0.51111],
              "49": [0, 0.64444, 0.13556, 0, 0.51111],
              "50": [0, 0.64444, 0.13556, 0, 0.51111],
              "51": [0, 0.64444, 0.13556, 0, 0.51111],
              "52": [0.19444, 0.64444, 0.13556, 0, 0.51111],
              "53": [0, 0.64444, 0.13556, 0, 0.51111],
              "54": [0, 0.64444, 0.13556, 0, 0.51111],
              "55": [0.19444, 0.64444, 0.13556, 0, 0.51111],
              "56": [0, 0.64444, 0.13556, 0, 0.51111],
              "57": [0, 0.64444, 0.13556, 0, 0.51111],
              "58": [0, 0.43056, 0.0582, 0, 0.30667],
              "59": [0.19444, 0.43056, 0.0582, 0, 0.30667],
              "61": [-0.13313, 0.36687, 0.06616, 0, 0.76666],
              "63": [0, 0.69444, 0.1225, 0, 0.51111],
              "64": [0, 0.69444, 0.09597, 0, 0.76666],
              "65": [0, 0.68333, 0, 0, 0.74333],
              "66": [0, 0.68333, 0.10257, 0, 0.70389],
              "67": [0, 0.68333, 0.14528, 0, 0.71555],
              "68": [0, 0.68333, 0.09403, 0, 0.755],
              "69": [0, 0.68333, 0.12028, 0, 0.67833],
              "70": [0, 0.68333, 0.13305, 0, 0.65277],
              "71": [0, 0.68333, 0.08722, 0, 0.77361],
              "72": [0, 0.68333, 0.16389, 0, 0.74333],
              "73": [0, 0.68333, 0.15806, 0, 0.38555],
              "74": [0, 0.68333, 0.14028, 0, 0.525],
              "75": [0, 0.68333, 0.14528, 0, 0.76888],
              "76": [0, 0.68333, 0, 0, 0.62722],
              "77": [0, 0.68333, 0.16389, 0, 0.89666],
              "78": [0, 0.68333, 0.16389, 0, 0.74333],
              "79": [0, 0.68333, 0.09403, 0, 0.76666],
              "80": [0, 0.68333, 0.10257, 0, 0.67833],
              "81": [0.19444, 0.68333, 0.09403, 0, 0.76666],
              "82": [0, 0.68333, 0.03868, 0, 0.72944],
              "83": [0, 0.68333, 0.11972, 0, 0.56222],
              "84": [0, 0.68333, 0.13305, 0, 0.71555],
              "85": [0, 0.68333, 0.16389, 0, 0.74333],
              "86": [0, 0.68333, 0.18361, 0, 0.74333],
              "87": [0, 0.68333, 0.18361, 0, 0.99888],
              "88": [0, 0.68333, 0.15806, 0, 0.74333],
              "89": [0, 0.68333, 0.19383, 0, 0.74333],
              "90": [0, 0.68333, 0.14528, 0, 0.61333],
              "91": [0.25, 0.75, 0.1875, 0, 0.30667],
              "93": [0.25, 0.75, 0.10528, 0, 0.30667],
              "94": [0, 0.69444, 0.06646, 0, 0.51111],
              "95": [0.31, 0.12056, 0.09208, 0, 0.51111],
              "97": [0, 0.43056, 0.07671, 0, 0.51111],
              "98": [0, 0.69444, 0.06312, 0, 0.46],
              "99": [0, 0.43056, 0.05653, 0, 0.46],
              "100": [0, 0.69444, 0.10333, 0, 0.51111],
              "101": [0, 0.43056, 0.07514, 0, 0.46],
              "102": [0.19444, 0.69444, 0.21194, 0, 0.30667],
              "103": [0.19444, 0.43056, 0.08847, 0, 0.46],
              "104": [0, 0.69444, 0.07671, 0, 0.51111],
              "105": [0, 0.65536, 0.1019, 0, 0.30667],
              "106": [0.19444, 0.65536, 0.14467, 0, 0.30667],
              "107": [0, 0.69444, 0.10764, 0, 0.46],
              "108": [0, 0.69444, 0.10333, 0, 0.25555],
              "109": [0, 0.43056, 0.07671, 0, 0.81777],
              "110": [0, 0.43056, 0.07671, 0, 0.56222],
              "111": [0, 0.43056, 0.06312, 0, 0.51111],
              "112": [0.19444, 0.43056, 0.06312, 0, 0.51111],
              "113": [0.19444, 0.43056, 0.08847, 0, 0.46],
              "114": [0, 0.43056, 0.10764, 0, 0.42166],
              "115": [0, 0.43056, 0.08208, 0, 0.40889],
              "116": [0, 0.61508, 0.09486, 0, 0.33222],
              "117": [0, 0.43056, 0.07671, 0, 0.53666],
              "118": [0, 0.43056, 0.10764, 0, 0.46],
              "119": [0, 0.43056, 0.10764, 0, 0.66444],
              "120": [0, 0.43056, 0.12042, 0, 0.46389],
              "121": [0.19444, 0.43056, 0.08847, 0, 0.48555],
              "122": [0, 0.43056, 0.12292, 0, 0.40889],
              "126": [0.35, 0.31786, 0.11585, 0, 0.51111],
              "160": [0, 0, 0, 0, 0.25],
              "168": [0, 0.66786, 0.10474, 0, 0.51111],
              "176": [0, 0.69444, 0, 0, 0.83129],
              "184": [0.17014, 0, 0, 0, 0.46],
              "198": [0, 0.68333, 0.12028, 0, 0.88277],
              "216": [0.04861, 0.73194, 0.09403, 0, 0.76666],
              "223": [0.19444, 0.69444, 0.10514, 0, 0.53666],
              "230": [0, 0.43056, 0.07514, 0, 0.71555],
              "248": [0.09722, 0.52778, 0.09194, 0, 0.51111],
              "338": [0, 0.68333, 0.12028, 0, 0.98499],
              "339": [0, 0.43056, 0.07514, 0, 0.71555],
              "710": [0, 0.69444, 0.06646, 0, 0.51111],
              "711": [0, 0.62847, 0.08295, 0, 0.51111],
              "713": [0, 0.56167, 0.10333, 0, 0.51111],
              "714": [0, 0.69444, 0.09694, 0, 0.51111],
              "715": [0, 0.69444, 0, 0, 0.51111],
              "728": [0, 0.69444, 0.10806, 0, 0.51111],
              "729": [0, 0.66786, 0.11752, 0, 0.30667],
              "730": [0, 0.69444, 0, 0, 0.83129],
              "732": [0, 0.66786, 0.11585, 0, 0.51111],
              "733": [0, 0.69444, 0.1225, 0, 0.51111],
              "915": [0, 0.68333, 0.13305, 0, 0.62722],
              "916": [0, 0.68333, 0, 0, 0.81777],
              "920": [0, 0.68333, 0.09403, 0, 0.76666],
              "923": [0, 0.68333, 0, 0, 0.69222],
              "926": [0, 0.68333, 0.15294, 0, 0.66444],
              "928": [0, 0.68333, 0.16389, 0, 0.74333],
              "931": [0, 0.68333, 0.12028, 0, 0.71555],
              "933": [0, 0.68333, 0.11111, 0, 0.76666],
              "934": [0, 0.68333, 0.05986, 0, 0.71555],
              "936": [0, 0.68333, 0.11111, 0, 0.76666],
              "937": [0, 0.68333, 0.10257, 0, 0.71555],
              "8211": [0, 0.43056, 0.09208, 0, 0.51111],
              "8212": [0, 0.43056, 0.09208, 0, 1.02222],
              "8216": [0, 0.69444, 0.12417, 0, 0.30667],
              "8217": [0, 0.69444, 0.12417, 0, 0.30667],
              "8220": [0, 0.69444, 0.1685, 0, 0.51444],
              "8221": [0, 0.69444, 0.06961, 0, 0.51444],
              "8463": [0, 0.68889, 0, 0, 0.54028]
            },
            "Main-Regular": {
              "32": [0, 0, 0, 0, 0.25],
              "33": [0, 0.69444, 0, 0, 0.27778],
              "34": [0, 0.69444, 0, 0, 0.5],
              "35": [0.19444, 0.69444, 0, 0, 0.83334],
              "36": [0.05556, 0.75, 0, 0, 0.5],
              "37": [0.05556, 0.75, 0, 0, 0.83334],
              "38": [0, 0.69444, 0, 0, 0.77778],
              "39": [0, 0.69444, 0, 0, 0.27778],
              "40": [0.25, 0.75, 0, 0, 0.38889],
              "41": [0.25, 0.75, 0, 0, 0.38889],
              "42": [0, 0.75, 0, 0, 0.5],
              "43": [0.08333, 0.58333, 0, 0, 0.77778],
              "44": [0.19444, 0.10556, 0, 0, 0.27778],
              "45": [0, 0.43056, 0, 0, 0.33333],
              "46": [0, 0.10556, 0, 0, 0.27778],
              "47": [0.25, 0.75, 0, 0, 0.5],
              "48": [0, 0.64444, 0, 0, 0.5],
              "49": [0, 0.64444, 0, 0, 0.5],
              "50": [0, 0.64444, 0, 0, 0.5],
              "51": [0, 0.64444, 0, 0, 0.5],
              "52": [0, 0.64444, 0, 0, 0.5],
              "53": [0, 0.64444, 0, 0, 0.5],
              "54": [0, 0.64444, 0, 0, 0.5],
              "55": [0, 0.64444, 0, 0, 0.5],
              "56": [0, 0.64444, 0, 0, 0.5],
              "57": [0, 0.64444, 0, 0, 0.5],
              "58": [0, 0.43056, 0, 0, 0.27778],
              "59": [0.19444, 0.43056, 0, 0, 0.27778],
              "60": [0.0391, 0.5391, 0, 0, 0.77778],
              "61": [-0.13313, 0.36687, 0, 0, 0.77778],
              "62": [0.0391, 0.5391, 0, 0, 0.77778],
              "63": [0, 0.69444, 0, 0, 0.47222],
              "64": [0, 0.69444, 0, 0, 0.77778],
              "65": [0, 0.68333, 0, 0, 0.75],
              "66": [0, 0.68333, 0, 0, 0.70834],
              "67": [0, 0.68333, 0, 0, 0.72222],
              "68": [0, 0.68333, 0, 0, 0.76389],
              "69": [0, 0.68333, 0, 0, 0.68056],
              "70": [0, 0.68333, 0, 0, 0.65278],
              "71": [0, 0.68333, 0, 0, 0.78472],
              "72": [0, 0.68333, 0, 0, 0.75],
              "73": [0, 0.68333, 0, 0, 0.36111],
              "74": [0, 0.68333, 0, 0, 0.51389],
              "75": [0, 0.68333, 0, 0, 0.77778],
              "76": [0, 0.68333, 0, 0, 0.625],
              "77": [0, 0.68333, 0, 0, 0.91667],
              "78": [0, 0.68333, 0, 0, 0.75],
              "79": [0, 0.68333, 0, 0, 0.77778],
              "80": [0, 0.68333, 0, 0, 0.68056],
              "81": [0.19444, 0.68333, 0, 0, 0.77778],
              "82": [0, 0.68333, 0, 0, 0.73611],
              "83": [0, 0.68333, 0, 0, 0.55556],
              "84": [0, 0.68333, 0, 0, 0.72222],
              "85": [0, 0.68333, 0, 0, 0.75],
              "86": [0, 0.68333, 0.01389, 0, 0.75],
              "87": [0, 0.68333, 0.01389, 0, 1.02778],
              "88": [0, 0.68333, 0, 0, 0.75],
              "89": [0, 0.68333, 0.025, 0, 0.75],
              "90": [0, 0.68333, 0, 0, 0.61111],
              "91": [0.25, 0.75, 0, 0, 0.27778],
              "92": [0.25, 0.75, 0, 0, 0.5],
              "93": [0.25, 0.75, 0, 0, 0.27778],
              "94": [0, 0.69444, 0, 0, 0.5],
              "95": [0.31, 0.12056, 0.02778, 0, 0.5],
              "97": [0, 0.43056, 0, 0, 0.5],
              "98": [0, 0.69444, 0, 0, 0.55556],
              "99": [0, 0.43056, 0, 0, 0.44445],
              "100": [0, 0.69444, 0, 0, 0.55556],
              "101": [0, 0.43056, 0, 0, 0.44445],
              "102": [0, 0.69444, 0.07778, 0, 0.30556],
              "103": [0.19444, 0.43056, 0.01389, 0, 0.5],
              "104": [0, 0.69444, 0, 0, 0.55556],
              "105": [0, 0.66786, 0, 0, 0.27778],
              "106": [0.19444, 0.66786, 0, 0, 0.30556],
              "107": [0, 0.69444, 0, 0, 0.52778],
              "108": [0, 0.69444, 0, 0, 0.27778],
              "109": [0, 0.43056, 0, 0, 0.83334],
              "110": [0, 0.43056, 0, 0, 0.55556],
              "111": [0, 0.43056, 0, 0, 0.5],
              "112": [0.19444, 0.43056, 0, 0, 0.55556],
              "113": [0.19444, 0.43056, 0, 0, 0.52778],
              "114": [0, 0.43056, 0, 0, 0.39167],
              "115": [0, 0.43056, 0, 0, 0.39445],
              "116": [0, 0.61508, 0, 0, 0.38889],
              "117": [0, 0.43056, 0, 0, 0.55556],
              "118": [0, 0.43056, 0.01389, 0, 0.52778],
              "119": [0, 0.43056, 0.01389, 0, 0.72222],
              "120": [0, 0.43056, 0, 0, 0.52778],
              "121": [0.19444, 0.43056, 0.01389, 0, 0.52778],
              "122": [0, 0.43056, 0, 0, 0.44445],
              "123": [0.25, 0.75, 0, 0, 0.5],
              "124": [0.25, 0.75, 0, 0, 0.27778],
              "125": [0.25, 0.75, 0, 0, 0.5],
              "126": [0.35, 0.31786, 0, 0, 0.5],
              "160": [0, 0, 0, 0, 0.25],
              "163": [0, 0.69444, 0, 0, 0.76909],
              "167": [0.19444, 0.69444, 0, 0, 0.44445],
              "168": [0, 0.66786, 0, 0, 0.5],
              "172": [0, 0.43056, 0, 0, 0.66667],
              "176": [0, 0.69444, 0, 0, 0.75],
              "177": [0.08333, 0.58333, 0, 0, 0.77778],
              "182": [0.19444, 0.69444, 0, 0, 0.61111],
              "184": [0.17014, 0, 0, 0, 0.44445],
              "198": [0, 0.68333, 0, 0, 0.90278],
              "215": [0.08333, 0.58333, 0, 0, 0.77778],
              "216": [0.04861, 0.73194, 0, 0, 0.77778],
              "223": [0, 0.69444, 0, 0, 0.5],
              "230": [0, 0.43056, 0, 0, 0.72222],
              "247": [0.08333, 0.58333, 0, 0, 0.77778],
              "248": [0.09722, 0.52778, 0, 0, 0.5],
              "305": [0, 0.43056, 0, 0, 0.27778],
              "338": [0, 0.68333, 0, 0, 1.01389],
              "339": [0, 0.43056, 0, 0, 0.77778],
              "567": [0.19444, 0.43056, 0, 0, 0.30556],
              "710": [0, 0.69444, 0, 0, 0.5],
              "711": [0, 0.62847, 0, 0, 0.5],
              "713": [0, 0.56778, 0, 0, 0.5],
              "714": [0, 0.69444, 0, 0, 0.5],
              "715": [0, 0.69444, 0, 0, 0.5],
              "728": [0, 0.69444, 0, 0, 0.5],
              "729": [0, 0.66786, 0, 0, 0.27778],
              "730": [0, 0.69444, 0, 0, 0.75],
              "732": [0, 0.66786, 0, 0, 0.5],
              "733": [0, 0.69444, 0, 0, 0.5],
              "915": [0, 0.68333, 0, 0, 0.625],
              "916": [0, 0.68333, 0, 0, 0.83334],
              "920": [0, 0.68333, 0, 0, 0.77778],
              "923": [0, 0.68333, 0, 0, 0.69445],
              "926": [0, 0.68333, 0, 0, 0.66667],
              "928": [0, 0.68333, 0, 0, 0.75],
              "931": [0, 0.68333, 0, 0, 0.72222],
              "933": [0, 0.68333, 0, 0, 0.77778],
              "934": [0, 0.68333, 0, 0, 0.72222],
              "936": [0, 0.68333, 0, 0, 0.77778],
              "937": [0, 0.68333, 0, 0, 0.72222],
              "8211": [0, 0.43056, 0.02778, 0, 0.5],
              "8212": [0, 0.43056, 0.02778, 0, 1],
              "8216": [0, 0.69444, 0, 0, 0.27778],
              "8217": [0, 0.69444, 0, 0, 0.27778],
              "8220": [0, 0.69444, 0, 0, 0.5],
              "8221": [0, 0.69444, 0, 0, 0.5],
              "8224": [0.19444, 0.69444, 0, 0, 0.44445],
              "8225": [0.19444, 0.69444, 0, 0, 0.44445],
              "8230": [0, 0.123, 0, 0, 1.172],
              "8242": [0, 0.55556, 0, 0, 0.275],
              "8407": [0, 0.71444, 0.15382, 0, 0.5],
              "8463": [0, 0.68889, 0, 0, 0.54028],
              "8465": [0, 0.69444, 0, 0, 0.72222],
              "8467": [0, 0.69444, 0, 0.11111, 0.41667],
              "8472": [0.19444, 0.43056, 0, 0.11111, 0.63646],
              "8476": [0, 0.69444, 0, 0, 0.72222],
              "8501": [0, 0.69444, 0, 0, 0.61111],
              "8592": [-0.13313, 0.36687, 0, 0, 1],
              "8593": [0.19444, 0.69444, 0, 0, 0.5],
              "8594": [-0.13313, 0.36687, 0, 0, 1],
              "8595": [0.19444, 0.69444, 0, 0, 0.5],
              "8596": [-0.13313, 0.36687, 0, 0, 1],
              "8597": [0.25, 0.75, 0, 0, 0.5],
              "8598": [0.19444, 0.69444, 0, 0, 1],
              "8599": [0.19444, 0.69444, 0, 0, 1],
              "8600": [0.19444, 0.69444, 0, 0, 1],
              "8601": [0.19444, 0.69444, 0, 0, 1],
              "8614": [0.011, 0.511, 0, 0, 1],
              "8617": [0.011, 0.511, 0, 0, 1.126],
              "8618": [0.011, 0.511, 0, 0, 1.126],
              "8636": [-0.13313, 0.36687, 0, 0, 1],
              "8637": [-0.13313, 0.36687, 0, 0, 1],
              "8640": [-0.13313, 0.36687, 0, 0, 1],
              "8641": [-0.13313, 0.36687, 0, 0, 1],
              "8652": [0.011, 0.671, 0, 0, 1],
              "8656": [-0.13313, 0.36687, 0, 0, 1],
              "8657": [0.19444, 0.69444, 0, 0, 0.61111],
              "8658": [-0.13313, 0.36687, 0, 0, 1],
              "8659": [0.19444, 0.69444, 0, 0, 0.61111],
              "8660": [-0.13313, 0.36687, 0, 0, 1],
              "8661": [0.25, 0.75, 0, 0, 0.61111],
              "8704": [0, 0.69444, 0, 0, 0.55556],
              "8706": [0, 0.69444, 0.05556, 0.08334, 0.5309],
              "8707": [0, 0.69444, 0, 0, 0.55556],
              "8709": [0.05556, 0.75, 0, 0, 0.5],
              "8711": [0, 0.68333, 0, 0, 0.83334],
              "8712": [0.0391, 0.5391, 0, 0, 0.66667],
              "8715": [0.0391, 0.5391, 0, 0, 0.66667],
              "8722": [0.08333, 0.58333, 0, 0, 0.77778],
              "8723": [0.08333, 0.58333, 0, 0, 0.77778],
              "8725": [0.25, 0.75, 0, 0, 0.5],
              "8726": [0.25, 0.75, 0, 0, 0.5],
              "8727": [-0.03472, 0.46528, 0, 0, 0.5],
              "8728": [-0.05555, 0.44445, 0, 0, 0.5],
              "8729": [-0.05555, 0.44445, 0, 0, 0.5],
              "8730": [0.2, 0.8, 0, 0, 0.83334],
              "8733": [0, 0.43056, 0, 0, 0.77778],
              "8734": [0, 0.43056, 0, 0, 1],
              "8736": [0, 0.69224, 0, 0, 0.72222],
              "8739": [0.25, 0.75, 0, 0, 0.27778],
              "8741": [0.25, 0.75, 0, 0, 0.5],
              "8743": [0, 0.55556, 0, 0, 0.66667],
              "8744": [0, 0.55556, 0, 0, 0.66667],
              "8745": [0, 0.55556, 0, 0, 0.66667],
              "8746": [0, 0.55556, 0, 0, 0.66667],
              "8747": [0.19444, 0.69444, 0.11111, 0, 0.41667],
              "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
              "8768": [0.19444, 0.69444, 0, 0, 0.27778],
              "8771": [-0.03625, 0.46375, 0, 0, 0.77778],
              "8773": [-0.022, 0.589, 0, 0, 0.778],
              "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
              "8781": [-0.03625, 0.46375, 0, 0, 0.77778],
              "8784": [-0.133, 0.673, 0, 0, 0.778],
              "8801": [-0.03625, 0.46375, 0, 0, 0.77778],
              "8804": [0.13597, 0.63597, 0, 0, 0.77778],
              "8805": [0.13597, 0.63597, 0, 0, 0.77778],
              "8810": [0.0391, 0.5391, 0, 0, 1],
              "8811": [0.0391, 0.5391, 0, 0, 1],
              "8826": [0.0391, 0.5391, 0, 0, 0.77778],
              "8827": [0.0391, 0.5391, 0, 0, 0.77778],
              "8834": [0.0391, 0.5391, 0, 0, 0.77778],
              "8835": [0.0391, 0.5391, 0, 0, 0.77778],
              "8838": [0.13597, 0.63597, 0, 0, 0.77778],
              "8839": [0.13597, 0.63597, 0, 0, 0.77778],
              "8846": [0, 0.55556, 0, 0, 0.66667],
              "8849": [0.13597, 0.63597, 0, 0, 0.77778],
              "8850": [0.13597, 0.63597, 0, 0, 0.77778],
              "8851": [0, 0.55556, 0, 0, 0.66667],
              "8852": [0, 0.55556, 0, 0, 0.66667],
              "8853": [0.08333, 0.58333, 0, 0, 0.77778],
              "8854": [0.08333, 0.58333, 0, 0, 0.77778],
              "8855": [0.08333, 0.58333, 0, 0, 0.77778],
              "8856": [0.08333, 0.58333, 0, 0, 0.77778],
              "8857": [0.08333, 0.58333, 0, 0, 0.77778],
              "8866": [0, 0.69444, 0, 0, 0.61111],
              "8867": [0, 0.69444, 0, 0, 0.61111],
              "8868": [0, 0.69444, 0, 0, 0.77778],
              "8869": [0, 0.69444, 0, 0, 0.77778],
              "8872": [0.249, 0.75, 0, 0, 0.867],
              "8900": [-0.05555, 0.44445, 0, 0, 0.5],
              "8901": [-0.05555, 0.44445, 0, 0, 0.27778],
              "8902": [-0.03472, 0.46528, 0, 0, 0.5],
              "8904": [5e-3, 0.505, 0, 0, 0.9],
              "8942": [0.03, 0.903, 0, 0, 0.278],
              "8943": [-0.19, 0.313, 0, 0, 1.172],
              "8945": [-0.1, 0.823, 0, 0, 1.282],
              "8968": [0.25, 0.75, 0, 0, 0.44445],
              "8969": [0.25, 0.75, 0, 0, 0.44445],
              "8970": [0.25, 0.75, 0, 0, 0.44445],
              "8971": [0.25, 0.75, 0, 0, 0.44445],
              "8994": [-0.14236, 0.35764, 0, 0, 1],
              "8995": [-0.14236, 0.35764, 0, 0, 1],
              "9136": [0.244, 0.744, 0, 0, 0.412],
              "9137": [0.244, 0.745, 0, 0, 0.412],
              "9651": [0.19444, 0.69444, 0, 0, 0.88889],
              "9657": [-0.03472, 0.46528, 0, 0, 0.5],
              "9661": [0.19444, 0.69444, 0, 0, 0.88889],
              "9667": [-0.03472, 0.46528, 0, 0, 0.5],
              "9711": [0.19444, 0.69444, 0, 0, 1],
              "9824": [0.12963, 0.69444, 0, 0, 0.77778],
              "9825": [0.12963, 0.69444, 0, 0, 0.77778],
              "9826": [0.12963, 0.69444, 0, 0, 0.77778],
              "9827": [0.12963, 0.69444, 0, 0, 0.77778],
              "9837": [0, 0.75, 0, 0, 0.38889],
              "9838": [0.19444, 0.69444, 0, 0, 0.38889],
              "9839": [0.19444, 0.69444, 0, 0, 0.38889],
              "10216": [0.25, 0.75, 0, 0, 0.38889],
              "10217": [0.25, 0.75, 0, 0, 0.38889],
              "10222": [0.244, 0.744, 0, 0, 0.412],
              "10223": [0.244, 0.745, 0, 0, 0.412],
              "10229": [0.011, 0.511, 0, 0, 1.609],
              "10230": [0.011, 0.511, 0, 0, 1.638],
              "10231": [0.011, 0.511, 0, 0, 1.859],
              "10232": [0.024, 0.525, 0, 0, 1.609],
              "10233": [0.024, 0.525, 0, 0, 1.638],
              "10234": [0.024, 0.525, 0, 0, 1.858],
              "10236": [0.011, 0.511, 0, 0, 1.638],
              "10815": [0, 0.68333, 0, 0, 0.75],
              "10927": [0.13597, 0.63597, 0, 0, 0.77778],
              "10928": [0.13597, 0.63597, 0, 0, 0.77778],
              "57376": [0.19444, 0.69444, 0, 0, 0]
            },
            "Math-BoldItalic": {
              "32": [0, 0, 0, 0, 0.25],
              "48": [0, 0.44444, 0, 0, 0.575],
              "49": [0, 0.44444, 0, 0, 0.575],
              "50": [0, 0.44444, 0, 0, 0.575],
              "51": [0.19444, 0.44444, 0, 0, 0.575],
              "52": [0.19444, 0.44444, 0, 0, 0.575],
              "53": [0.19444, 0.44444, 0, 0, 0.575],
              "54": [0, 0.64444, 0, 0, 0.575],
              "55": [0.19444, 0.44444, 0, 0, 0.575],
              "56": [0, 0.64444, 0, 0, 0.575],
              "57": [0.19444, 0.44444, 0, 0, 0.575],
              "65": [0, 0.68611, 0, 0, 0.86944],
              "66": [0, 0.68611, 0.04835, 0, 0.8664],
              "67": [0, 0.68611, 0.06979, 0, 0.81694],
              "68": [0, 0.68611, 0.03194, 0, 0.93812],
              "69": [0, 0.68611, 0.05451, 0, 0.81007],
              "70": [0, 0.68611, 0.15972, 0, 0.68889],
              "71": [0, 0.68611, 0, 0, 0.88673],
              "72": [0, 0.68611, 0.08229, 0, 0.98229],
              "73": [0, 0.68611, 0.07778, 0, 0.51111],
              "74": [0, 0.68611, 0.10069, 0, 0.63125],
              "75": [0, 0.68611, 0.06979, 0, 0.97118],
              "76": [0, 0.68611, 0, 0, 0.75555],
              "77": [0, 0.68611, 0.11424, 0, 1.14201],
              "78": [0, 0.68611, 0.11424, 0, 0.95034],
              "79": [0, 0.68611, 0.03194, 0, 0.83666],
              "80": [0, 0.68611, 0.15972, 0, 0.72309],
              "81": [0.19444, 0.68611, 0, 0, 0.86861],
              "82": [0, 0.68611, 421e-5, 0, 0.87235],
              "83": [0, 0.68611, 0.05382, 0, 0.69271],
              "84": [0, 0.68611, 0.15972, 0, 0.63663],
              "85": [0, 0.68611, 0.11424, 0, 0.80027],
              "86": [0, 0.68611, 0.25555, 0, 0.67778],
              "87": [0, 0.68611, 0.15972, 0, 1.09305],
              "88": [0, 0.68611, 0.07778, 0, 0.94722],
              "89": [0, 0.68611, 0.25555, 0, 0.67458],
              "90": [0, 0.68611, 0.06979, 0, 0.77257],
              "97": [0, 0.44444, 0, 0, 0.63287],
              "98": [0, 0.69444, 0, 0, 0.52083],
              "99": [0, 0.44444, 0, 0, 0.51342],
              "100": [0, 0.69444, 0, 0, 0.60972],
              "101": [0, 0.44444, 0, 0, 0.55361],
              "102": [0.19444, 0.69444, 0.11042, 0, 0.56806],
              "103": [0.19444, 0.44444, 0.03704, 0, 0.5449],
              "104": [0, 0.69444, 0, 0, 0.66759],
              "105": [0, 0.69326, 0, 0, 0.4048],
              "106": [0.19444, 0.69326, 0.0622, 0, 0.47083],
              "107": [0, 0.69444, 0.01852, 0, 0.6037],
              "108": [0, 0.69444, 88e-4, 0, 0.34815],
              "109": [0, 0.44444, 0, 0, 1.0324],
              "110": [0, 0.44444, 0, 0, 0.71296],
              "111": [0, 0.44444, 0, 0, 0.58472],
              "112": [0.19444, 0.44444, 0, 0, 0.60092],
              "113": [0.19444, 0.44444, 0.03704, 0, 0.54213],
              "114": [0, 0.44444, 0.03194, 0, 0.5287],
              "115": [0, 0.44444, 0, 0, 0.53125],
              "116": [0, 0.63492, 0, 0, 0.41528],
              "117": [0, 0.44444, 0, 0, 0.68102],
              "118": [0, 0.44444, 0.03704, 0, 0.56666],
              "119": [0, 0.44444, 0.02778, 0, 0.83148],
              "120": [0, 0.44444, 0, 0, 0.65903],
              "121": [0.19444, 0.44444, 0.03704, 0, 0.59028],
              "122": [0, 0.44444, 0.04213, 0, 0.55509],
              "160": [0, 0, 0, 0, 0.25],
              "915": [0, 0.68611, 0.15972, 0, 0.65694],
              "916": [0, 0.68611, 0, 0, 0.95833],
              "920": [0, 0.68611, 0.03194, 0, 0.86722],
              "923": [0, 0.68611, 0, 0, 0.80555],
              "926": [0, 0.68611, 0.07458, 0, 0.84125],
              "928": [0, 0.68611, 0.08229, 0, 0.98229],
              "931": [0, 0.68611, 0.05451, 0, 0.88507],
              "933": [0, 0.68611, 0.15972, 0, 0.67083],
              "934": [0, 0.68611, 0, 0, 0.76666],
              "936": [0, 0.68611, 0.11653, 0, 0.71402],
              "937": [0, 0.68611, 0.04835, 0, 0.8789],
              "945": [0, 0.44444, 0, 0, 0.76064],
              "946": [0.19444, 0.69444, 0.03403, 0, 0.65972],
              "947": [0.19444, 0.44444, 0.06389, 0, 0.59003],
              "948": [0, 0.69444, 0.03819, 0, 0.52222],
              "949": [0, 0.44444, 0, 0, 0.52882],
              "950": [0.19444, 0.69444, 0.06215, 0, 0.50833],
              "951": [0.19444, 0.44444, 0.03704, 0, 0.6],
              "952": [0, 0.69444, 0.03194, 0, 0.5618],
              "953": [0, 0.44444, 0, 0, 0.41204],
              "954": [0, 0.44444, 0, 0, 0.66759],
              "955": [0, 0.69444, 0, 0, 0.67083],
              "956": [0.19444, 0.44444, 0, 0, 0.70787],
              "957": [0, 0.44444, 0.06898, 0, 0.57685],
              "958": [0.19444, 0.69444, 0.03021, 0, 0.50833],
              "959": [0, 0.44444, 0, 0, 0.58472],
              "960": [0, 0.44444, 0.03704, 0, 0.68241],
              "961": [0.19444, 0.44444, 0, 0, 0.6118],
              "962": [0.09722, 0.44444, 0.07917, 0, 0.42361],
              "963": [0, 0.44444, 0.03704, 0, 0.68588],
              "964": [0, 0.44444, 0.13472, 0, 0.52083],
              "965": [0, 0.44444, 0.03704, 0, 0.63055],
              "966": [0.19444, 0.44444, 0, 0, 0.74722],
              "967": [0.19444, 0.44444, 0, 0, 0.71805],
              "968": [0.19444, 0.69444, 0.03704, 0, 0.75833],
              "969": [0, 0.44444, 0.03704, 0, 0.71782],
              "977": [0, 0.69444, 0, 0, 0.69155],
              "981": [0.19444, 0.69444, 0, 0, 0.7125],
              "982": [0, 0.44444, 0.03194, 0, 0.975],
              "1009": [0.19444, 0.44444, 0, 0, 0.6118],
              "1013": [0, 0.44444, 0, 0, 0.48333],
              "57649": [0, 0.44444, 0, 0, 0.39352],
              "57911": [0.19444, 0.44444, 0, 0, 0.43889]
            },
            "Math-Italic": {
              "32": [0, 0, 0, 0, 0.25],
              "48": [0, 0.43056, 0, 0, 0.5],
              "49": [0, 0.43056, 0, 0, 0.5],
              "50": [0, 0.43056, 0, 0, 0.5],
              "51": [0.19444, 0.43056, 0, 0, 0.5],
              "52": [0.19444, 0.43056, 0, 0, 0.5],
              "53": [0.19444, 0.43056, 0, 0, 0.5],
              "54": [0, 0.64444, 0, 0, 0.5],
              "55": [0.19444, 0.43056, 0, 0, 0.5],
              "56": [0, 0.64444, 0, 0, 0.5],
              "57": [0.19444, 0.43056, 0, 0, 0.5],
              "65": [0, 0.68333, 0, 0.13889, 0.75],
              "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
              "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
              "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
              "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
              "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
              "71": [0, 0.68333, 0, 0.08334, 0.78625],
              "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
              "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
              "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
              "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
              "76": [0, 0.68333, 0, 0.02778, 0.68056],
              "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
              "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
              "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
              "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
              "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
              "82": [0, 0.68333, 773e-5, 0.08334, 0.75929],
              "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
              "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
              "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
              "86": [0, 0.68333, 0.22222, 0, 0.58333],
              "87": [0, 0.68333, 0.13889, 0, 0.94445],
              "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
              "89": [0, 0.68333, 0.22222, 0, 0.58056],
              "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
              "97": [0, 0.43056, 0, 0, 0.52859],
              "98": [0, 0.69444, 0, 0, 0.42917],
              "99": [0, 0.43056, 0, 0.05556, 0.43276],
              "100": [0, 0.69444, 0, 0.16667, 0.52049],
              "101": [0, 0.43056, 0, 0.05556, 0.46563],
              "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
              "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
              "104": [0, 0.69444, 0, 0, 0.57616],
              "105": [0, 0.65952, 0, 0, 0.34451],
              "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
              "107": [0, 0.69444, 0.03148, 0, 0.5206],
              "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
              "109": [0, 0.43056, 0, 0, 0.87801],
              "110": [0, 0.43056, 0, 0, 0.60023],
              "111": [0, 0.43056, 0, 0.05556, 0.48472],
              "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
              "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
              "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
              "115": [0, 0.43056, 0, 0.05556, 0.46875],
              "116": [0, 0.61508, 0, 0.08334, 0.36111],
              "117": [0, 0.43056, 0, 0.02778, 0.57246],
              "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
              "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
              "120": [0, 0.43056, 0, 0.02778, 0.57153],
              "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
              "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
              "160": [0, 0, 0, 0, 0.25],
              "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
              "916": [0, 0.68333, 0, 0.16667, 0.83334],
              "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
              "923": [0, 0.68333, 0, 0.16667, 0.69445],
              "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
              "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
              "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
              "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
              "934": [0, 0.68333, 0, 0.08334, 0.66667],
              "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
              "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
              "945": [0, 0.43056, 37e-4, 0.02778, 0.6397],
              "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
              "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
              "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
              "949": [0, 0.43056, 0, 0.08334, 0.46632],
              "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
              "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
              "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
              "953": [0, 0.43056, 0, 0.05556, 0.35394],
              "954": [0, 0.43056, 0, 0, 0.57616],
              "955": [0, 0.69444, 0, 0, 0.58334],
              "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
              "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
              "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
              "959": [0, 0.43056, 0, 0.05556, 0.48472],
              "960": [0, 0.43056, 0.03588, 0, 0.57003],
              "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
              "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
              "963": [0, 0.43056, 0.03588, 0, 0.57141],
              "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
              "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
              "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
              "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
              "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
              "969": [0, 0.43056, 0.03588, 0, 0.62245],
              "977": [0, 0.69444, 0, 0.08334, 0.59144],
              "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
              "982": [0, 0.43056, 0.02778, 0, 0.82813],
              "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
              "1013": [0, 0.43056, 0, 0.05556, 0.4059],
              "57649": [0, 0.43056, 0, 0.02778, 0.32246],
              "57911": [0.19444, 0.43056, 0, 0.08334, 0.38403]
            },
            "SansSerif-Bold": {
              "32": [0, 0, 0, 0, 0.25],
              "33": [0, 0.69444, 0, 0, 0.36667],
              "34": [0, 0.69444, 0, 0, 0.55834],
              "35": [0.19444, 0.69444, 0, 0, 0.91667],
              "36": [0.05556, 0.75, 0, 0, 0.55],
              "37": [0.05556, 0.75, 0, 0, 1.02912],
              "38": [0, 0.69444, 0, 0, 0.83056],
              "39": [0, 0.69444, 0, 0, 0.30556],
              "40": [0.25, 0.75, 0, 0, 0.42778],
              "41": [0.25, 0.75, 0, 0, 0.42778],
              "42": [0, 0.75, 0, 0, 0.55],
              "43": [0.11667, 0.61667, 0, 0, 0.85556],
              "44": [0.10556, 0.13056, 0, 0, 0.30556],
              "45": [0, 0.45833, 0, 0, 0.36667],
              "46": [0, 0.13056, 0, 0, 0.30556],
              "47": [0.25, 0.75, 0, 0, 0.55],
              "48": [0, 0.69444, 0, 0, 0.55],
              "49": [0, 0.69444, 0, 0, 0.55],
              "50": [0, 0.69444, 0, 0, 0.55],
              "51": [0, 0.69444, 0, 0, 0.55],
              "52": [0, 0.69444, 0, 0, 0.55],
              "53": [0, 0.69444, 0, 0, 0.55],
              "54": [0, 0.69444, 0, 0, 0.55],
              "55": [0, 0.69444, 0, 0, 0.55],
              "56": [0, 0.69444, 0, 0, 0.55],
              "57": [0, 0.69444, 0, 0, 0.55],
              "58": [0, 0.45833, 0, 0, 0.30556],
              "59": [0.10556, 0.45833, 0, 0, 0.30556],
              "61": [-0.09375, 0.40625, 0, 0, 0.85556],
              "63": [0, 0.69444, 0, 0, 0.51945],
              "64": [0, 0.69444, 0, 0, 0.73334],
              "65": [0, 0.69444, 0, 0, 0.73334],
              "66": [0, 0.69444, 0, 0, 0.73334],
              "67": [0, 0.69444, 0, 0, 0.70278],
              "68": [0, 0.69444, 0, 0, 0.79445],
              "69": [0, 0.69444, 0, 0, 0.64167],
              "70": [0, 0.69444, 0, 0, 0.61111],
              "71": [0, 0.69444, 0, 0, 0.73334],
              "72": [0, 0.69444, 0, 0, 0.79445],
              "73": [0, 0.69444, 0, 0, 0.33056],
              "74": [0, 0.69444, 0, 0, 0.51945],
              "75": [0, 0.69444, 0, 0, 0.76389],
              "76": [0, 0.69444, 0, 0, 0.58056],
              "77": [0, 0.69444, 0, 0, 0.97778],
              "78": [0, 0.69444, 0, 0, 0.79445],
              "79": [0, 0.69444, 0, 0, 0.79445],
              "80": [0, 0.69444, 0, 0, 0.70278],
              "81": [0.10556, 0.69444, 0, 0, 0.79445],
              "82": [0, 0.69444, 0, 0, 0.70278],
              "83": [0, 0.69444, 0, 0, 0.61111],
              "84": [0, 0.69444, 0, 0, 0.73334],
              "85": [0, 0.69444, 0, 0, 0.76389],
              "86": [0, 0.69444, 0.01528, 0, 0.73334],
              "87": [0, 0.69444, 0.01528, 0, 1.03889],
              "88": [0, 0.69444, 0, 0, 0.73334],
              "89": [0, 0.69444, 0.0275, 0, 0.73334],
              "90": [0, 0.69444, 0, 0, 0.67223],
              "91": [0.25, 0.75, 0, 0, 0.34306],
              "93": [0.25, 0.75, 0, 0, 0.34306],
              "94": [0, 0.69444, 0, 0, 0.55],
              "95": [0.35, 0.10833, 0.03056, 0, 0.55],
              "97": [0, 0.45833, 0, 0, 0.525],
              "98": [0, 0.69444, 0, 0, 0.56111],
              "99": [0, 0.45833, 0, 0, 0.48889],
              "100": [0, 0.69444, 0, 0, 0.56111],
              "101": [0, 0.45833, 0, 0, 0.51111],
              "102": [0, 0.69444, 0.07639, 0, 0.33611],
              "103": [0.19444, 0.45833, 0.01528, 0, 0.55],
              "104": [0, 0.69444, 0, 0, 0.56111],
              "105": [0, 0.69444, 0, 0, 0.25556],
              "106": [0.19444, 0.69444, 0, 0, 0.28611],
              "107": [0, 0.69444, 0, 0, 0.53056],
              "108": [0, 0.69444, 0, 0, 0.25556],
              "109": [0, 0.45833, 0, 0, 0.86667],
              "110": [0, 0.45833, 0, 0, 0.56111],
              "111": [0, 0.45833, 0, 0, 0.55],
              "112": [0.19444, 0.45833, 0, 0, 0.56111],
              "113": [0.19444, 0.45833, 0, 0, 0.56111],
              "114": [0, 0.45833, 0.01528, 0, 0.37222],
              "115": [0, 0.45833, 0, 0, 0.42167],
              "116": [0, 0.58929, 0, 0, 0.40417],
              "117": [0, 0.45833, 0, 0, 0.56111],
              "118": [0, 0.45833, 0.01528, 0, 0.5],
              "119": [0, 0.45833, 0.01528, 0, 0.74445],
              "120": [0, 0.45833, 0, 0, 0.5],
              "121": [0.19444, 0.45833, 0.01528, 0, 0.5],
              "122": [0, 0.45833, 0, 0, 0.47639],
              "126": [0.35, 0.34444, 0, 0, 0.55],
              "160": [0, 0, 0, 0, 0.25],
              "168": [0, 0.69444, 0, 0, 0.55],
              "176": [0, 0.69444, 0, 0, 0.73334],
              "180": [0, 0.69444, 0, 0, 0.55],
              "184": [0.17014, 0, 0, 0, 0.48889],
              "305": [0, 0.45833, 0, 0, 0.25556],
              "567": [0.19444, 0.45833, 0, 0, 0.28611],
              "710": [0, 0.69444, 0, 0, 0.55],
              "711": [0, 0.63542, 0, 0, 0.55],
              "713": [0, 0.63778, 0, 0, 0.55],
              "728": [0, 0.69444, 0, 0, 0.55],
              "729": [0, 0.69444, 0, 0, 0.30556],
              "730": [0, 0.69444, 0, 0, 0.73334],
              "732": [0, 0.69444, 0, 0, 0.55],
              "733": [0, 0.69444, 0, 0, 0.55],
              "915": [0, 0.69444, 0, 0, 0.58056],
              "916": [0, 0.69444, 0, 0, 0.91667],
              "920": [0, 0.69444, 0, 0, 0.85556],
              "923": [0, 0.69444, 0, 0, 0.67223],
              "926": [0, 0.69444, 0, 0, 0.73334],
              "928": [0, 0.69444, 0, 0, 0.79445],
              "931": [0, 0.69444, 0, 0, 0.79445],
              "933": [0, 0.69444, 0, 0, 0.85556],
              "934": [0, 0.69444, 0, 0, 0.79445],
              "936": [0, 0.69444, 0, 0, 0.85556],
              "937": [0, 0.69444, 0, 0, 0.79445],
              "8211": [0, 0.45833, 0.03056, 0, 0.55],
              "8212": [0, 0.45833, 0.03056, 0, 1.10001],
              "8216": [0, 0.69444, 0, 0, 0.30556],
              "8217": [0, 0.69444, 0, 0, 0.30556],
              "8220": [0, 0.69444, 0, 0, 0.55834],
              "8221": [0, 0.69444, 0, 0, 0.55834]
            },
            "SansSerif-Italic": {
              "32": [0, 0, 0, 0, 0.25],
              "33": [0, 0.69444, 0.05733, 0, 0.31945],
              "34": [0, 0.69444, 316e-5, 0, 0.5],
              "35": [0.19444, 0.69444, 0.05087, 0, 0.83334],
              "36": [0.05556, 0.75, 0.11156, 0, 0.5],
              "37": [0.05556, 0.75, 0.03126, 0, 0.83334],
              "38": [0, 0.69444, 0.03058, 0, 0.75834],
              "39": [0, 0.69444, 0.07816, 0, 0.27778],
              "40": [0.25, 0.75, 0.13164, 0, 0.38889],
              "41": [0.25, 0.75, 0.02536, 0, 0.38889],
              "42": [0, 0.75, 0.11775, 0, 0.5],
              "43": [0.08333, 0.58333, 0.02536, 0, 0.77778],
              "44": [0.125, 0.08333, 0, 0, 0.27778],
              "45": [0, 0.44444, 0.01946, 0, 0.33333],
              "46": [0, 0.08333, 0, 0, 0.27778],
              "47": [0.25, 0.75, 0.13164, 0, 0.5],
              "48": [0, 0.65556, 0.11156, 0, 0.5],
              "49": [0, 0.65556, 0.11156, 0, 0.5],
              "50": [0, 0.65556, 0.11156, 0, 0.5],
              "51": [0, 0.65556, 0.11156, 0, 0.5],
              "52": [0, 0.65556, 0.11156, 0, 0.5],
              "53": [0, 0.65556, 0.11156, 0, 0.5],
              "54": [0, 0.65556, 0.11156, 0, 0.5],
              "55": [0, 0.65556, 0.11156, 0, 0.5],
              "56": [0, 0.65556, 0.11156, 0, 0.5],
              "57": [0, 0.65556, 0.11156, 0, 0.5],
              "58": [0, 0.44444, 0.02502, 0, 0.27778],
              "59": [0.125, 0.44444, 0.02502, 0, 0.27778],
              "61": [-0.13, 0.37, 0.05087, 0, 0.77778],
              "63": [0, 0.69444, 0.11809, 0, 0.47222],
              "64": [0, 0.69444, 0.07555, 0, 0.66667],
              "65": [0, 0.69444, 0, 0, 0.66667],
              "66": [0, 0.69444, 0.08293, 0, 0.66667],
              "67": [0, 0.69444, 0.11983, 0, 0.63889],
              "68": [0, 0.69444, 0.07555, 0, 0.72223],
              "69": [0, 0.69444, 0.11983, 0, 0.59722],
              "70": [0, 0.69444, 0.13372, 0, 0.56945],
              "71": [0, 0.69444, 0.11983, 0, 0.66667],
              "72": [0, 0.69444, 0.08094, 0, 0.70834],
              "73": [0, 0.69444, 0.13372, 0, 0.27778],
              "74": [0, 0.69444, 0.08094, 0, 0.47222],
              "75": [0, 0.69444, 0.11983, 0, 0.69445],
              "76": [0, 0.69444, 0, 0, 0.54167],
              "77": [0, 0.69444, 0.08094, 0, 0.875],
              "78": [0, 0.69444, 0.08094, 0, 0.70834],
              "79": [0, 0.69444, 0.07555, 0, 0.73611],
              "80": [0, 0.69444, 0.08293, 0, 0.63889],
              "81": [0.125, 0.69444, 0.07555, 0, 0.73611],
              "82": [0, 0.69444, 0.08293, 0, 0.64584],
              "83": [0, 0.69444, 0.09205, 0, 0.55556],
              "84": [0, 0.69444, 0.13372, 0, 0.68056],
              "85": [0, 0.69444, 0.08094, 0, 0.6875],
              "86": [0, 0.69444, 0.1615, 0, 0.66667],
              "87": [0, 0.69444, 0.1615, 0, 0.94445],
              "88": [0, 0.69444, 0.13372, 0, 0.66667],
              "89": [0, 0.69444, 0.17261, 0, 0.66667],
              "90": [0, 0.69444, 0.11983, 0, 0.61111],
              "91": [0.25, 0.75, 0.15942, 0, 0.28889],
              "93": [0.25, 0.75, 0.08719, 0, 0.28889],
              "94": [0, 0.69444, 0.0799, 0, 0.5],
              "95": [0.35, 0.09444, 0.08616, 0, 0.5],
              "97": [0, 0.44444, 981e-5, 0, 0.48056],
              "98": [0, 0.69444, 0.03057, 0, 0.51667],
              "99": [0, 0.44444, 0.08336, 0, 0.44445],
              "100": [0, 0.69444, 0.09483, 0, 0.51667],
              "101": [0, 0.44444, 0.06778, 0, 0.44445],
              "102": [0, 0.69444, 0.21705, 0, 0.30556],
              "103": [0.19444, 0.44444, 0.10836, 0, 0.5],
              "104": [0, 0.69444, 0.01778, 0, 0.51667],
              "105": [0, 0.67937, 0.09718, 0, 0.23889],
              "106": [0.19444, 0.67937, 0.09162, 0, 0.26667],
              "107": [0, 0.69444, 0.08336, 0, 0.48889],
              "108": [0, 0.69444, 0.09483, 0, 0.23889],
              "109": [0, 0.44444, 0.01778, 0, 0.79445],
              "110": [0, 0.44444, 0.01778, 0, 0.51667],
              "111": [0, 0.44444, 0.06613, 0, 0.5],
              "112": [0.19444, 0.44444, 0.0389, 0, 0.51667],
              "113": [0.19444, 0.44444, 0.04169, 0, 0.51667],
              "114": [0, 0.44444, 0.10836, 0, 0.34167],
              "115": [0, 0.44444, 0.0778, 0, 0.38333],
              "116": [0, 0.57143, 0.07225, 0, 0.36111],
              "117": [0, 0.44444, 0.04169, 0, 0.51667],
              "118": [0, 0.44444, 0.10836, 0, 0.46111],
              "119": [0, 0.44444, 0.10836, 0, 0.68334],
              "120": [0, 0.44444, 0.09169, 0, 0.46111],
              "121": [0.19444, 0.44444, 0.10836, 0, 0.46111],
              "122": [0, 0.44444, 0.08752, 0, 0.43472],
              "126": [0.35, 0.32659, 0.08826, 0, 0.5],
              "160": [0, 0, 0, 0, 0.25],
              "168": [0, 0.67937, 0.06385, 0, 0.5],
              "176": [0, 0.69444, 0, 0, 0.73752],
              "184": [0.17014, 0, 0, 0, 0.44445],
              "305": [0, 0.44444, 0.04169, 0, 0.23889],
              "567": [0.19444, 0.44444, 0.04169, 0, 0.26667],
              "710": [0, 0.69444, 0.0799, 0, 0.5],
              "711": [0, 0.63194, 0.08432, 0, 0.5],
              "713": [0, 0.60889, 0.08776, 0, 0.5],
              "714": [0, 0.69444, 0.09205, 0, 0.5],
              "715": [0, 0.69444, 0, 0, 0.5],
              "728": [0, 0.69444, 0.09483, 0, 0.5],
              "729": [0, 0.67937, 0.07774, 0, 0.27778],
              "730": [0, 0.69444, 0, 0, 0.73752],
              "732": [0, 0.67659, 0.08826, 0, 0.5],
              "733": [0, 0.69444, 0.09205, 0, 0.5],
              "915": [0, 0.69444, 0.13372, 0, 0.54167],
              "916": [0, 0.69444, 0, 0, 0.83334],
              "920": [0, 0.69444, 0.07555, 0, 0.77778],
              "923": [0, 0.69444, 0, 0, 0.61111],
              "926": [0, 0.69444, 0.12816, 0, 0.66667],
              "928": [0, 0.69444, 0.08094, 0, 0.70834],
              "931": [0, 0.69444, 0.11983, 0, 0.72222],
              "933": [0, 0.69444, 0.09031, 0, 0.77778],
              "934": [0, 0.69444, 0.04603, 0, 0.72222],
              "936": [0, 0.69444, 0.09031, 0, 0.77778],
              "937": [0, 0.69444, 0.08293, 0, 0.72222],
              "8211": [0, 0.44444, 0.08616, 0, 0.5],
              "8212": [0, 0.44444, 0.08616, 0, 1],
              "8216": [0, 0.69444, 0.07816, 0, 0.27778],
              "8217": [0, 0.69444, 0.07816, 0, 0.27778],
              "8220": [0, 0.69444, 0.14205, 0, 0.5],
              "8221": [0, 0.69444, 316e-5, 0, 0.5]
            },
            "SansSerif-Regular": {
              "32": [0, 0, 0, 0, 0.25],
              "33": [0, 0.69444, 0, 0, 0.31945],
              "34": [0, 0.69444, 0, 0, 0.5],
              "35": [0.19444, 0.69444, 0, 0, 0.83334],
              "36": [0.05556, 0.75, 0, 0, 0.5],
              "37": [0.05556, 0.75, 0, 0, 0.83334],
              "38": [0, 0.69444, 0, 0, 0.75834],
              "39": [0, 0.69444, 0, 0, 0.27778],
              "40": [0.25, 0.75, 0, 0, 0.38889],
              "41": [0.25, 0.75, 0, 0, 0.38889],
              "42": [0, 0.75, 0, 0, 0.5],
              "43": [0.08333, 0.58333, 0, 0, 0.77778],
              "44": [0.125, 0.08333, 0, 0, 0.27778],
              "45": [0, 0.44444, 0, 0, 0.33333],
              "46": [0, 0.08333, 0, 0, 0.27778],
              "47": [0.25, 0.75, 0, 0, 0.5],
              "48": [0, 0.65556, 0, 0, 0.5],
              "49": [0, 0.65556, 0, 0, 0.5],
              "50": [0, 0.65556, 0, 0, 0.5],
              "51": [0, 0.65556, 0, 0, 0.5],
              "52": [0, 0.65556, 0, 0, 0.5],
              "53": [0, 0.65556, 0, 0, 0.5],
              "54": [0, 0.65556, 0, 0, 0.5],
              "55": [0, 0.65556, 0, 0, 0.5],
              "56": [0, 0.65556, 0, 0, 0.5],
              "57": [0, 0.65556, 0, 0, 0.5],
              "58": [0, 0.44444, 0, 0, 0.27778],
              "59": [0.125, 0.44444, 0, 0, 0.27778],
              "61": [-0.13, 0.37, 0, 0, 0.77778],
              "63": [0, 0.69444, 0, 0, 0.47222],
              "64": [0, 0.69444, 0, 0, 0.66667],
              "65": [0, 0.69444, 0, 0, 0.66667],
              "66": [0, 0.69444, 0, 0, 0.66667],
              "67": [0, 0.69444, 0, 0, 0.63889],
              "68": [0, 0.69444, 0, 0, 0.72223],
              "69": [0, 0.69444, 0, 0, 0.59722],
              "70": [0, 0.69444, 0, 0, 0.56945],
              "71": [0, 0.69444, 0, 0, 0.66667],
              "72": [0, 0.69444, 0, 0, 0.70834],
              "73": [0, 0.69444, 0, 0, 0.27778],
              "74": [0, 0.69444, 0, 0, 0.47222],
              "75": [0, 0.69444, 0, 0, 0.69445],
              "76": [0, 0.69444, 0, 0, 0.54167],
              "77": [0, 0.69444, 0, 0, 0.875],
              "78": [0, 0.69444, 0, 0, 0.70834],
              "79": [0, 0.69444, 0, 0, 0.73611],
              "80": [0, 0.69444, 0, 0, 0.63889],
              "81": [0.125, 0.69444, 0, 0, 0.73611],
              "82": [0, 0.69444, 0, 0, 0.64584],
              "83": [0, 0.69444, 0, 0, 0.55556],
              "84": [0, 0.69444, 0, 0, 0.68056],
              "85": [0, 0.69444, 0, 0, 0.6875],
              "86": [0, 0.69444, 0.01389, 0, 0.66667],
              "87": [0, 0.69444, 0.01389, 0, 0.94445],
              "88": [0, 0.69444, 0, 0, 0.66667],
              "89": [0, 0.69444, 0.025, 0, 0.66667],
              "90": [0, 0.69444, 0, 0, 0.61111],
              "91": [0.25, 0.75, 0, 0, 0.28889],
              "93": [0.25, 0.75, 0, 0, 0.28889],
              "94": [0, 0.69444, 0, 0, 0.5],
              "95": [0.35, 0.09444, 0.02778, 0, 0.5],
              "97": [0, 0.44444, 0, 0, 0.48056],
              "98": [0, 0.69444, 0, 0, 0.51667],
              "99": [0, 0.44444, 0, 0, 0.44445],
              "100": [0, 0.69444, 0, 0, 0.51667],
              "101": [0, 0.44444, 0, 0, 0.44445],
              "102": [0, 0.69444, 0.06944, 0, 0.30556],
              "103": [0.19444, 0.44444, 0.01389, 0, 0.5],
              "104": [0, 0.69444, 0, 0, 0.51667],
              "105": [0, 0.67937, 0, 0, 0.23889],
              "106": [0.19444, 0.67937, 0, 0, 0.26667],
              "107": [0, 0.69444, 0, 0, 0.48889],
              "108": [0, 0.69444, 0, 0, 0.23889],
              "109": [0, 0.44444, 0, 0, 0.79445],
              "110": [0, 0.44444, 0, 0, 0.51667],
              "111": [0, 0.44444, 0, 0, 0.5],
              "112": [0.19444, 0.44444, 0, 0, 0.51667],
              "113": [0.19444, 0.44444, 0, 0, 0.51667],
              "114": [0, 0.44444, 0.01389, 0, 0.34167],
              "115": [0, 0.44444, 0, 0, 0.38333],
              "116": [0, 0.57143, 0, 0, 0.36111],
              "117": [0, 0.44444, 0, 0, 0.51667],
              "118": [0, 0.44444, 0.01389, 0, 0.46111],
              "119": [0, 0.44444, 0.01389, 0, 0.68334],
              "120": [0, 0.44444, 0, 0, 0.46111],
              "121": [0.19444, 0.44444, 0.01389, 0, 0.46111],
              "122": [0, 0.44444, 0, 0, 0.43472],
              "126": [0.35, 0.32659, 0, 0, 0.5],
              "160": [0, 0, 0, 0, 0.25],
              "168": [0, 0.67937, 0, 0, 0.5],
              "176": [0, 0.69444, 0, 0, 0.66667],
              "184": [0.17014, 0, 0, 0, 0.44445],
              "305": [0, 0.44444, 0, 0, 0.23889],
              "567": [0.19444, 0.44444, 0, 0, 0.26667],
              "710": [0, 0.69444, 0, 0, 0.5],
              "711": [0, 0.63194, 0, 0, 0.5],
              "713": [0, 0.60889, 0, 0, 0.5],
              "714": [0, 0.69444, 0, 0, 0.5],
              "715": [0, 0.69444, 0, 0, 0.5],
              "728": [0, 0.69444, 0, 0, 0.5],
              "729": [0, 0.67937, 0, 0, 0.27778],
              "730": [0, 0.69444, 0, 0, 0.66667],
              "732": [0, 0.67659, 0, 0, 0.5],
              "733": [0, 0.69444, 0, 0, 0.5],
              "915": [0, 0.69444, 0, 0, 0.54167],
              "916": [0, 0.69444, 0, 0, 0.83334],
              "920": [0, 0.69444, 0, 0, 0.77778],
              "923": [0, 0.69444, 0, 0, 0.61111],
              "926": [0, 0.69444, 0, 0, 0.66667],
              "928": [0, 0.69444, 0, 0, 0.70834],
              "931": [0, 0.69444, 0, 0, 0.72222],
              "933": [0, 0.69444, 0, 0, 0.77778],
              "934": [0, 0.69444, 0, 0, 0.72222],
              "936": [0, 0.69444, 0, 0, 0.77778],
              "937": [0, 0.69444, 0, 0, 0.72222],
              "8211": [0, 0.44444, 0.02778, 0, 0.5],
              "8212": [0, 0.44444, 0.02778, 0, 1],
              "8216": [0, 0.69444, 0, 0, 0.27778],
              "8217": [0, 0.69444, 0, 0, 0.27778],
              "8220": [0, 0.69444, 0, 0, 0.5],
              "8221": [0, 0.69444, 0, 0, 0.5]
            },
            "Script-Regular": {
              "32": [0, 0, 0, 0, 0.25],
              "65": [0, 0.7, 0.22925, 0, 0.80253],
              "66": [0, 0.7, 0.04087, 0, 0.90757],
              "67": [0, 0.7, 0.1689, 0, 0.66619],
              "68": [0, 0.7, 0.09371, 0, 0.77443],
              "69": [0, 0.7, 0.18583, 0, 0.56162],
              "70": [0, 0.7, 0.13634, 0, 0.89544],
              "71": [0, 0.7, 0.17322, 0, 0.60961],
              "72": [0, 0.7, 0.29694, 0, 0.96919],
              "73": [0, 0.7, 0.19189, 0, 0.80907],
              "74": [0.27778, 0.7, 0.19189, 0, 1.05159],
              "75": [0, 0.7, 0.31259, 0, 0.91364],
              "76": [0, 0.7, 0.19189, 0, 0.87373],
              "77": [0, 0.7, 0.15981, 0, 1.08031],
              "78": [0, 0.7, 0.3525, 0, 0.9015],
              "79": [0, 0.7, 0.08078, 0, 0.73787],
              "80": [0, 0.7, 0.08078, 0, 1.01262],
              "81": [0, 0.7, 0.03305, 0, 0.88282],
              "82": [0, 0.7, 0.06259, 0, 0.85],
              "83": [0, 0.7, 0.19189, 0, 0.86767],
              "84": [0, 0.7, 0.29087, 0, 0.74697],
              "85": [0, 0.7, 0.25815, 0, 0.79996],
              "86": [0, 0.7, 0.27523, 0, 0.62204],
              "87": [0, 0.7, 0.27523, 0, 0.80532],
              "88": [0, 0.7, 0.26006, 0, 0.94445],
              "89": [0, 0.7, 0.2939, 0, 0.70961],
              "90": [0, 0.7, 0.24037, 0, 0.8212],
              "160": [0, 0, 0, 0, 0.25]
            },
            "Size1-Regular": {
              "32": [0, 0, 0, 0, 0.25],
              "40": [0.35001, 0.85, 0, 0, 0.45834],
              "41": [0.35001, 0.85, 0, 0, 0.45834],
              "47": [0.35001, 0.85, 0, 0, 0.57778],
              "91": [0.35001, 0.85, 0, 0, 0.41667],
              "92": [0.35001, 0.85, 0, 0, 0.57778],
              "93": [0.35001, 0.85, 0, 0, 0.41667],
              "123": [0.35001, 0.85, 0, 0, 0.58334],
              "125": [0.35001, 0.85, 0, 0, 0.58334],
              "160": [0, 0, 0, 0, 0.25],
              "710": [0, 0.72222, 0, 0, 0.55556],
              "732": [0, 0.72222, 0, 0, 0.55556],
              "770": [0, 0.72222, 0, 0, 0.55556],
              "771": [0, 0.72222, 0, 0, 0.55556],
              "8214": [-99e-5, 0.601, 0, 0, 0.77778],
              "8593": [1e-5, 0.6, 0, 0, 0.66667],
              "8595": [1e-5, 0.6, 0, 0, 0.66667],
              "8657": [1e-5, 0.6, 0, 0, 0.77778],
              "8659": [1e-5, 0.6, 0, 0, 0.77778],
              "8719": [0.25001, 0.75, 0, 0, 0.94445],
              "8720": [0.25001, 0.75, 0, 0, 0.94445],
              "8721": [0.25001, 0.75, 0, 0, 1.05556],
              "8730": [0.35001, 0.85, 0, 0, 1],
              "8739": [-599e-5, 0.606, 0, 0, 0.33333],
              "8741": [-599e-5, 0.606, 0, 0, 0.55556],
              "8747": [0.30612, 0.805, 0.19445, 0, 0.47222],
              "8748": [0.306, 0.805, 0.19445, 0, 0.47222],
              "8749": [0.306, 0.805, 0.19445, 0, 0.47222],
              "8750": [0.30612, 0.805, 0.19445, 0, 0.47222],
              "8896": [0.25001, 0.75, 0, 0, 0.83334],
              "8897": [0.25001, 0.75, 0, 0, 0.83334],
              "8898": [0.25001, 0.75, 0, 0, 0.83334],
              "8899": [0.25001, 0.75, 0, 0, 0.83334],
              "8968": [0.35001, 0.85, 0, 0, 0.47222],
              "8969": [0.35001, 0.85, 0, 0, 0.47222],
              "8970": [0.35001, 0.85, 0, 0, 0.47222],
              "8971": [0.35001, 0.85, 0, 0, 0.47222],
              "9168": [-99e-5, 0.601, 0, 0, 0.66667],
              "10216": [0.35001, 0.85, 0, 0, 0.47222],
              "10217": [0.35001, 0.85, 0, 0, 0.47222],
              "10752": [0.25001, 0.75, 0, 0, 1.11111],
              "10753": [0.25001, 0.75, 0, 0, 1.11111],
              "10754": [0.25001, 0.75, 0, 0, 1.11111],
              "10756": [0.25001, 0.75, 0, 0, 0.83334],
              "10758": [0.25001, 0.75, 0, 0, 0.83334]
            },
            "Size2-Regular": {
              "32": [0, 0, 0, 0, 0.25],
              "40": [0.65002, 1.15, 0, 0, 0.59722],
              "41": [0.65002, 1.15, 0, 0, 0.59722],
              "47": [0.65002, 1.15, 0, 0, 0.81111],
              "91": [0.65002, 1.15, 0, 0, 0.47222],
              "92": [0.65002, 1.15, 0, 0, 0.81111],
              "93": [0.65002, 1.15, 0, 0, 0.47222],
              "123": [0.65002, 1.15, 0, 0, 0.66667],
              "125": [0.65002, 1.15, 0, 0, 0.66667],
              "160": [0, 0, 0, 0, 0.25],
              "710": [0, 0.75, 0, 0, 1],
              "732": [0, 0.75, 0, 0, 1],
              "770": [0, 0.75, 0, 0, 1],
              "771": [0, 0.75, 0, 0, 1],
              "8719": [0.55001, 1.05, 0, 0, 1.27778],
              "8720": [0.55001, 1.05, 0, 0, 1.27778],
              "8721": [0.55001, 1.05, 0, 0, 1.44445],
              "8730": [0.65002, 1.15, 0, 0, 1],
              "8747": [0.86225, 1.36, 0.44445, 0, 0.55556],
              "8748": [0.862, 1.36, 0.44445, 0, 0.55556],
              "8749": [0.862, 1.36, 0.44445, 0, 0.55556],
              "8750": [0.86225, 1.36, 0.44445, 0, 0.55556],
              "8896": [0.55001, 1.05, 0, 0, 1.11111],
              "8897": [0.55001, 1.05, 0, 0, 1.11111],
              "8898": [0.55001, 1.05, 0, 0, 1.11111],
              "8899": [0.55001, 1.05, 0, 0, 1.11111],
              "8968": [0.65002, 1.15, 0, 0, 0.52778],
              "8969": [0.65002, 1.15, 0, 0, 0.52778],
              "8970": [0.65002, 1.15, 0, 0, 0.52778],
              "8971": [0.65002, 1.15, 0, 0, 0.52778],
              "10216": [0.65002, 1.15, 0, 0, 0.61111],
              "10217": [0.65002, 1.15, 0, 0, 0.61111],
              "10752": [0.55001, 1.05, 0, 0, 1.51112],
              "10753": [0.55001, 1.05, 0, 0, 1.51112],
              "10754": [0.55001, 1.05, 0, 0, 1.51112],
              "10756": [0.55001, 1.05, 0, 0, 1.11111],
              "10758": [0.55001, 1.05, 0, 0, 1.11111]
            },
            "Size3-Regular": {
              "32": [0, 0, 0, 0, 0.25],
              "40": [0.95003, 1.45, 0, 0, 0.73611],
              "41": [0.95003, 1.45, 0, 0, 0.73611],
              "47": [0.95003, 1.45, 0, 0, 1.04445],
              "91": [0.95003, 1.45, 0, 0, 0.52778],
              "92": [0.95003, 1.45, 0, 0, 1.04445],
              "93": [0.95003, 1.45, 0, 0, 0.52778],
              "123": [0.95003, 1.45, 0, 0, 0.75],
              "125": [0.95003, 1.45, 0, 0, 0.75],
              "160": [0, 0, 0, 0, 0.25],
              "710": [0, 0.75, 0, 0, 1.44445],
              "732": [0, 0.75, 0, 0, 1.44445],
              "770": [0, 0.75, 0, 0, 1.44445],
              "771": [0, 0.75, 0, 0, 1.44445],
              "8730": [0.95003, 1.45, 0, 0, 1],
              "8968": [0.95003, 1.45, 0, 0, 0.58334],
              "8969": [0.95003, 1.45, 0, 0, 0.58334],
              "8970": [0.95003, 1.45, 0, 0, 0.58334],
              "8971": [0.95003, 1.45, 0, 0, 0.58334],
              "10216": [0.95003, 1.45, 0, 0, 0.75],
              "10217": [0.95003, 1.45, 0, 0, 0.75]
            },
            "Size4-Regular": {
              "32": [0, 0, 0, 0, 0.25],
              "40": [1.25003, 1.75, 0, 0, 0.79167],
              "41": [1.25003, 1.75, 0, 0, 0.79167],
              "47": [1.25003, 1.75, 0, 0, 1.27778],
              "91": [1.25003, 1.75, 0, 0, 0.58334],
              "92": [1.25003, 1.75, 0, 0, 1.27778],
              "93": [1.25003, 1.75, 0, 0, 0.58334],
              "123": [1.25003, 1.75, 0, 0, 0.80556],
              "125": [1.25003, 1.75, 0, 0, 0.80556],
              "160": [0, 0, 0, 0, 0.25],
              "710": [0, 0.825, 0, 0, 1.8889],
              "732": [0, 0.825, 0, 0, 1.8889],
              "770": [0, 0.825, 0, 0, 1.8889],
              "771": [0, 0.825, 0, 0, 1.8889],
              "8730": [1.25003, 1.75, 0, 0, 1],
              "8968": [1.25003, 1.75, 0, 0, 0.63889],
              "8969": [1.25003, 1.75, 0, 0, 0.63889],
              "8970": [1.25003, 1.75, 0, 0, 0.63889],
              "8971": [1.25003, 1.75, 0, 0, 0.63889],
              "9115": [0.64502, 1.155, 0, 0, 0.875],
              "9116": [1e-5, 0.6, 0, 0, 0.875],
              "9117": [0.64502, 1.155, 0, 0, 0.875],
              "9118": [0.64502, 1.155, 0, 0, 0.875],
              "9119": [1e-5, 0.6, 0, 0, 0.875],
              "9120": [0.64502, 1.155, 0, 0, 0.875],
              "9121": [0.64502, 1.155, 0, 0, 0.66667],
              "9122": [-99e-5, 0.601, 0, 0, 0.66667],
              "9123": [0.64502, 1.155, 0, 0, 0.66667],
              "9124": [0.64502, 1.155, 0, 0, 0.66667],
              "9125": [-99e-5, 0.601, 0, 0, 0.66667],
              "9126": [0.64502, 1.155, 0, 0, 0.66667],
              "9127": [1e-5, 0.9, 0, 0, 0.88889],
              "9128": [0.65002, 1.15, 0, 0, 0.88889],
              "9129": [0.90001, 0, 0, 0, 0.88889],
              "9130": [0, 0.3, 0, 0, 0.88889],
              "9131": [1e-5, 0.9, 0, 0, 0.88889],
              "9132": [0.65002, 1.15, 0, 0, 0.88889],
              "9133": [0.90001, 0, 0, 0, 0.88889],
              "9143": [0.88502, 0.915, 0, 0, 1.05556],
              "10216": [1.25003, 1.75, 0, 0, 0.80556],
              "10217": [1.25003, 1.75, 0, 0, 0.80556],
              "57344": [-499e-5, 0.605, 0, 0, 1.05556],
              "57345": [-499e-5, 0.605, 0, 0, 1.05556],
              "57680": [0, 0.12, 0, 0, 0.45],
              "57681": [0, 0.12, 0, 0, 0.45],
              "57682": [0, 0.12, 0, 0, 0.45],
              "57683": [0, 0.12, 0, 0, 0.45]
            },
            "Typewriter-Regular": {
              "32": [0, 0, 0, 0, 0.525],
              "33": [0, 0.61111, 0, 0, 0.525],
              "34": [0, 0.61111, 0, 0, 0.525],
              "35": [0, 0.61111, 0, 0, 0.525],
              "36": [0.08333, 0.69444, 0, 0, 0.525],
              "37": [0.08333, 0.69444, 0, 0, 0.525],
              "38": [0, 0.61111, 0, 0, 0.525],
              "39": [0, 0.61111, 0, 0, 0.525],
              "40": [0.08333, 0.69444, 0, 0, 0.525],
              "41": [0.08333, 0.69444, 0, 0, 0.525],
              "42": [0, 0.52083, 0, 0, 0.525],
              "43": [-0.08056, 0.53055, 0, 0, 0.525],
              "44": [0.13889, 0.125, 0, 0, 0.525],
              "45": [-0.08056, 0.53055, 0, 0, 0.525],
              "46": [0, 0.125, 0, 0, 0.525],
              "47": [0.08333, 0.69444, 0, 0, 0.525],
              "48": [0, 0.61111, 0, 0, 0.525],
              "49": [0, 0.61111, 0, 0, 0.525],
              "50": [0, 0.61111, 0, 0, 0.525],
              "51": [0, 0.61111, 0, 0, 0.525],
              "52": [0, 0.61111, 0, 0, 0.525],
              "53": [0, 0.61111, 0, 0, 0.525],
              "54": [0, 0.61111, 0, 0, 0.525],
              "55": [0, 0.61111, 0, 0, 0.525],
              "56": [0, 0.61111, 0, 0, 0.525],
              "57": [0, 0.61111, 0, 0, 0.525],
              "58": [0, 0.43056, 0, 0, 0.525],
              "59": [0.13889, 0.43056, 0, 0, 0.525],
              "60": [-0.05556, 0.55556, 0, 0, 0.525],
              "61": [-0.19549, 0.41562, 0, 0, 0.525],
              "62": [-0.05556, 0.55556, 0, 0, 0.525],
              "63": [0, 0.61111, 0, 0, 0.525],
              "64": [0, 0.61111, 0, 0, 0.525],
              "65": [0, 0.61111, 0, 0, 0.525],
              "66": [0, 0.61111, 0, 0, 0.525],
              "67": [0, 0.61111, 0, 0, 0.525],
              "68": [0, 0.61111, 0, 0, 0.525],
              "69": [0, 0.61111, 0, 0, 0.525],
              "70": [0, 0.61111, 0, 0, 0.525],
              "71": [0, 0.61111, 0, 0, 0.525],
              "72": [0, 0.61111, 0, 0, 0.525],
              "73": [0, 0.61111, 0, 0, 0.525],
              "74": [0, 0.61111, 0, 0, 0.525],
              "75": [0, 0.61111, 0, 0, 0.525],
              "76": [0, 0.61111, 0, 0, 0.525],
              "77": [0, 0.61111, 0, 0, 0.525],
              "78": [0, 0.61111, 0, 0, 0.525],
              "79": [0, 0.61111, 0, 0, 0.525],
              "80": [0, 0.61111, 0, 0, 0.525],
              "81": [0.13889, 0.61111, 0, 0, 0.525],
              "82": [0, 0.61111, 0, 0, 0.525],
              "83": [0, 0.61111, 0, 0, 0.525],
              "84": [0, 0.61111, 0, 0, 0.525],
              "85": [0, 0.61111, 0, 0, 0.525],
              "86": [0, 0.61111, 0, 0, 0.525],
              "87": [0, 0.61111, 0, 0, 0.525],
              "88": [0, 0.61111, 0, 0, 0.525],
              "89": [0, 0.61111, 0, 0, 0.525],
              "90": [0, 0.61111, 0, 0, 0.525],
              "91": [0.08333, 0.69444, 0, 0, 0.525],
              "92": [0.08333, 0.69444, 0, 0, 0.525],
              "93": [0.08333, 0.69444, 0, 0, 0.525],
              "94": [0, 0.61111, 0, 0, 0.525],
              "95": [0.09514, 0, 0, 0, 0.525],
              "96": [0, 0.61111, 0, 0, 0.525],
              "97": [0, 0.43056, 0, 0, 0.525],
              "98": [0, 0.61111, 0, 0, 0.525],
              "99": [0, 0.43056, 0, 0, 0.525],
              "100": [0, 0.61111, 0, 0, 0.525],
              "101": [0, 0.43056, 0, 0, 0.525],
              "102": [0, 0.61111, 0, 0, 0.525],
              "103": [0.22222, 0.43056, 0, 0, 0.525],
              "104": [0, 0.61111, 0, 0, 0.525],
              "105": [0, 0.61111, 0, 0, 0.525],
              "106": [0.22222, 0.61111, 0, 0, 0.525],
              "107": [0, 0.61111, 0, 0, 0.525],
              "108": [0, 0.61111, 0, 0, 0.525],
              "109": [0, 0.43056, 0, 0, 0.525],
              "110": [0, 0.43056, 0, 0, 0.525],
              "111": [0, 0.43056, 0, 0, 0.525],
              "112": [0.22222, 0.43056, 0, 0, 0.525],
              "113": [0.22222, 0.43056, 0, 0, 0.525],
              "114": [0, 0.43056, 0, 0, 0.525],
              "115": [0, 0.43056, 0, 0, 0.525],
              "116": [0, 0.55358, 0, 0, 0.525],
              "117": [0, 0.43056, 0, 0, 0.525],
              "118": [0, 0.43056, 0, 0, 0.525],
              "119": [0, 0.43056, 0, 0, 0.525],
              "120": [0, 0.43056, 0, 0, 0.525],
              "121": [0.22222, 0.43056, 0, 0, 0.525],
              "122": [0, 0.43056, 0, 0, 0.525],
              "123": [0.08333, 0.69444, 0, 0, 0.525],
              "124": [0.08333, 0.69444, 0, 0, 0.525],
              "125": [0.08333, 0.69444, 0, 0, 0.525],
              "126": [0, 0.61111, 0, 0, 0.525],
              "127": [0, 0.61111, 0, 0, 0.525],
              "160": [0, 0, 0, 0, 0.525],
              "176": [0, 0.61111, 0, 0, 0.525],
              "184": [0.19445, 0, 0, 0, 0.525],
              "305": [0, 0.43056, 0, 0, 0.525],
              "567": [0.22222, 0.43056, 0, 0, 0.525],
              "711": [0, 0.56597, 0, 0, 0.525],
              "713": [0, 0.56555, 0, 0, 0.525],
              "714": [0, 0.61111, 0, 0, 0.525],
              "715": [0, 0.61111, 0, 0, 0.525],
              "728": [0, 0.61111, 0, 0, 0.525],
              "730": [0, 0.61111, 0, 0, 0.525],
              "770": [0, 0.61111, 0, 0, 0.525],
              "771": [0, 0.61111, 0, 0, 0.525],
              "776": [0, 0.61111, 0, 0, 0.525],
              "915": [0, 0.61111, 0, 0, 0.525],
              "916": [0, 0.61111, 0, 0, 0.525],
              "920": [0, 0.61111, 0, 0, 0.525],
              "923": [0, 0.61111, 0, 0, 0.525],
              "926": [0, 0.61111, 0, 0, 0.525],
              "928": [0, 0.61111, 0, 0, 0.525],
              "931": [0, 0.61111, 0, 0, 0.525],
              "933": [0, 0.61111, 0, 0, 0.525],
              "934": [0, 0.61111, 0, 0, 0.525],
              "936": [0, 0.61111, 0, 0, 0.525],
              "937": [0, 0.61111, 0, 0, 0.525],
              "8216": [0, 0.61111, 0, 0, 0.525],
              "8217": [0, 0.61111, 0, 0, 0.525],
              "8242": [0, 0.61111, 0, 0, 0.525],
              "9251": [0.11111, 0.21944, 0, 0, 0.525]
            }
          };
          const sigmasAndXis = {
            slant: [0.25, 0.25, 0.25],
            // sigma1
            space: [0, 0, 0],
            // sigma2
            stretch: [0, 0, 0],
            // sigma3
            shrink: [0, 0, 0],
            // sigma4
            xHeight: [0.431, 0.431, 0.431],
            // sigma5
            quad: [1, 1.171, 1.472],
            // sigma6
            extraSpace: [0, 0, 0],
            // sigma7
            num1: [0.677, 0.732, 0.925],
            // sigma8
            num2: [0.394, 0.384, 0.387],
            // sigma9
            num3: [0.444, 0.471, 0.504],
            // sigma10
            denom1: [0.686, 0.752, 1.025],
            // sigma11
            denom2: [0.345, 0.344, 0.532],
            // sigma12
            sup1: [0.413, 0.503, 0.504],
            // sigma13
            sup2: [0.363, 0.431, 0.404],
            // sigma14
            sup3: [0.289, 0.286, 0.294],
            // sigma15
            sub1: [0.15, 0.143, 0.2],
            // sigma16
            sub2: [0.247, 0.286, 0.4],
            // sigma17
            supDrop: [0.386, 0.353, 0.494],
            // sigma18
            subDrop: [0.05, 0.071, 0.1],
            // sigma19
            delim1: [2.39, 1.7, 1.98],
            // sigma20
            delim2: [1.01, 1.157, 1.42],
            // sigma21
            axisHeight: [0.25, 0.25, 0.25],
            // sigma22
            // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
            // they correspond to the font parameters of the extension fonts (family 3).
            // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
            // match cmex7, we'd use cmex7.tfm values for script and scriptscript
            // values.
            defaultRuleThickness: [0.04, 0.049, 0.049],
            // xi8; cmex7: 0.049
            bigOpSpacing1: [0.111, 0.111, 0.111],
            // xi9
            bigOpSpacing2: [0.166, 0.166, 0.166],
            // xi10
            bigOpSpacing3: [0.2, 0.2, 0.2],
            // xi11
            bigOpSpacing4: [0.6, 0.611, 0.611],
            // xi12; cmex7: 0.611
            bigOpSpacing5: [0.1, 0.143, 0.143],
            // xi13; cmex7: 0.143
            // The \sqrt rule width is taken from the height of the surd character.
            // Since we use the same font at all sizes, this thickness doesn't scale.
            sqrtRuleThickness: [0.04, 0.04, 0.04],
            // This value determines how large a pt is, for metrics which are defined
            // in terms of pts.
            // This value is also used in katex.scss; if you change it make sure the
            // values match.
            ptPerEm: [10, 10, 10],
            // The space between adjacent `|` columns in an array definition. From
            // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
            doubleRuleSep: [0.2, 0.2, 0.2],
            // The width of separator lines in {array} environments. From
            // `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.
            arrayRuleWidth: [0.04, 0.04, 0.04],
            // Two values from LaTeX source2e:
            fboxsep: [0.3, 0.3, 0.3],
            //        3 pt / ptPerEm
            fboxrule: [0.04, 0.04, 0.04]
            // 0.4 pt / ptPerEm
          };
          const extraCharacterMap = {
            // Latin-1
            "Å": "A",
            "Ð": "D",
            "Þ": "o",
            "å": "a",
            "ð": "d",
            "þ": "o",
            // Cyrillic
            "А": "A",
            "Б": "B",
            "В": "B",
            "Г": "F",
            "Д": "A",
            "Е": "E",
            "Ж": "K",
            "З": "3",
            "И": "N",
            "Й": "N",
            "К": "K",
            "Л": "N",
            "М": "M",
            "Н": "H",
            "О": "O",
            "П": "N",
            "Р": "P",
            "С": "C",
            "Т": "T",
            "У": "y",
            "Ф": "O",
            "Х": "X",
            "Ц": "U",
            "Ч": "h",
            "Ш": "W",
            "Щ": "W",
            "Ъ": "B",
            "Ы": "X",
            "Ь": "B",
            "Э": "3",
            "Ю": "X",
            "Я": "R",
            "а": "a",
            "б": "b",
            "в": "a",
            "г": "r",
            "д": "y",
            "е": "e",
            "ж": "m",
            "з": "e",
            "и": "n",
            "й": "n",
            "к": "n",
            "л": "n",
            "м": "m",
            "н": "n",
            "о": "o",
            "п": "n",
            "р": "p",
            "с": "c",
            "т": "o",
            "у": "y",
            "ф": "b",
            "х": "x",
            "ц": "n",
            "ч": "n",
            "ш": "w",
            "щ": "w",
            "ъ": "a",
            "ы": "m",
            "ь": "a",
            "э": "e",
            "ю": "m",
            "я": "r"
          };
          function setFontMetrics(fontName, metrics) {
            fontMetricsData[fontName] = metrics;
          }
          function getCharacterMetrics(character, font, mode) {
            if (!fontMetricsData[font]) {
              throw new Error("Font metrics not found for font: " + font + ".");
            }
            let ch = character.charCodeAt(0);
            let metrics = fontMetricsData[font][ch];
            if (!metrics && character[0] in extraCharacterMap) {
              ch = extraCharacterMap[character[0]].charCodeAt(0);
              metrics = fontMetricsData[font][ch];
            }
            if (!metrics && mode === "text") {
              if (supportedCodepoint(ch)) {
                metrics = fontMetricsData[font][77];
              }
            }
            if (metrics) {
              return {
                depth: metrics[0],
                height: metrics[1],
                italic: metrics[2],
                skew: metrics[3],
                width: metrics[4]
              };
            }
          }
          const fontMetricsBySizeIndex = {};
          function getGlobalMetrics(size) {
            let sizeIndex;
            if (size >= 5) {
              sizeIndex = 0;
            } else if (size >= 3) {
              sizeIndex = 1;
            } else {
              sizeIndex = 2;
            }
            if (!fontMetricsBySizeIndex[sizeIndex]) {
              const metrics = fontMetricsBySizeIndex[sizeIndex] = {
                cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18
              };
              for (const key in sigmasAndXis) {
                if (sigmasAndXis.hasOwnProperty(key)) {
                  metrics[key] = sigmasAndXis[key][sizeIndex];
                }
              }
            }
            return fontMetricsBySizeIndex[sizeIndex];
          }
          const sizeStyleMap = [
            // Each element contains [textsize, scriptsize, scriptscriptsize].
            // The size mappings are taken from TeX with \normalsize=10pt.
            [1, 1, 1],
            // size1: [5, 5, 5]              \tiny
            [2, 1, 1],
            // size2: [6, 5, 5]
            [3, 1, 1],
            // size3: [7, 5, 5]              \scriptsize
            [4, 2, 1],
            // size4: [8, 6, 5]              \footnotesize
            [5, 2, 1],
            // size5: [9, 6, 5]              \small
            [6, 3, 1],
            // size6: [10, 7, 5]             \normalsize
            [7, 4, 2],
            // size7: [12, 8, 6]             \large
            [8, 6, 3],
            // size8: [14.4, 10, 7]          \Large
            [9, 7, 6],
            // size9: [17.28, 12, 10]        \LARGE
            [10, 8, 7],
            // size10: [20.74, 14.4, 12]     \huge
            [11, 10, 9]
            // size11: [24.88, 20.74, 17.28] \HUGE
          ];
          const sizeMultipliers = [
            // fontMetrics.js:getGlobalMetrics also uses size indexes, so if
            // you change size indexes, change that function.
            0.5,
            0.6,
            0.7,
            0.8,
            0.9,
            1,
            1.2,
            1.44,
            1.728,
            2.074,
            2.488
          ];
          const sizeAtStyle = function(size, style) {
            return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];
          };
          class Options {
            // A font family applies to a group of fonts (i.e. SansSerif), while a font
            // represents a specific font (i.e. SansSerif Bold).
            // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm
            /**
             * The base size index.
             */
            constructor(data) {
              this.style = void 0;
              this.color = void 0;
              this.size = void 0;
              this.textSize = void 0;
              this.phantom = void 0;
              this.font = void 0;
              this.fontFamily = void 0;
              this.fontWeight = void 0;
              this.fontShape = void 0;
              this.sizeMultiplier = void 0;
              this.maxSize = void 0;
              this.minRuleThickness = void 0;
              this._fontMetrics = void 0;
              this.style = data.style;
              this.color = data.color;
              this.size = data.size || Options.BASESIZE;
              this.textSize = data.textSize || this.size;
              this.phantom = !!data.phantom;
              this.font = data.font || "";
              this.fontFamily = data.fontFamily || "";
              this.fontWeight = data.fontWeight || "";
              this.fontShape = data.fontShape || "";
              this.sizeMultiplier = sizeMultipliers[this.size - 1];
              this.maxSize = data.maxSize;
              this.minRuleThickness = data.minRuleThickness;
              this._fontMetrics = void 0;
            }
            /**
             * Returns a new options object with the same properties as "this".  Properties
             * from "extension" will be copied to the new options object.
             */
            extend(extension) {
              const data = {
                style: this.style,
                size: this.size,
                textSize: this.textSize,
                color: this.color,
                phantom: this.phantom,
                font: this.font,
                fontFamily: this.fontFamily,
                fontWeight: this.fontWeight,
                fontShape: this.fontShape,
                maxSize: this.maxSize,
                minRuleThickness: this.minRuleThickness
              };
              for (const key in extension) {
                if (extension.hasOwnProperty(key)) {
                  data[key] = extension[key];
                }
              }
              return new Options(data);
            }
            /**
             * Return an options object with the given style. If `this.style === style`,
             * returns `this`.
             */
            havingStyle(style) {
              if (this.style === style) {
                return this;
              } else {
                return this.extend({
                  style,
                  size: sizeAtStyle(this.textSize, style)
                });
              }
            }
            /**
             * Return an options object with a cramped version of the current style. If
             * the current style is cramped, returns `this`.
             */
            havingCrampedStyle() {
              return this.havingStyle(this.style.cramp());
            }
            /**
             * Return an options object with the given size and in at least `\textstyle`.
             * Returns `this` if appropriate.
             */
            havingSize(size) {
              if (this.size === size && this.textSize === size) {
                return this;
              } else {
                return this.extend({
                  style: this.style.text(),
                  size,
                  textSize: size,
                  sizeMultiplier: sizeMultipliers[size - 1]
                });
              }
            }
            /**
             * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
             * changes to at least `\textstyle`.
             */
            havingBaseStyle(style) {
              style = style || this.style.text();
              const wantSize = sizeAtStyle(Options.BASESIZE, style);
              if (this.size === wantSize && this.textSize === Options.BASESIZE && this.style === style) {
                return this;
              } else {
                return this.extend({
                  style,
                  size: wantSize
                });
              }
            }
            /**
             * Remove the effect of sizing changes such as \Huge.
             * Keep the effect of the current style, such as \scriptstyle.
             */
            havingBaseSizing() {
              let size;
              switch (this.style.id) {
                case 4:
                case 5:
                  size = 3;
                  break;
                case 6:
                case 7:
                  size = 1;
                  break;
                default:
                  size = 6;
              }
              return this.extend({
                style: this.style.text(),
                size
              });
            }
            /**
             * Create a new options object with the given color.
             */
            withColor(color2) {
              return this.extend({
                color: color2
              });
            }
            /**
             * Create a new options object with "phantom" set to true.
             */
            withPhantom() {
              return this.extend({
                phantom: true
              });
            }
            /**
             * Creates a new options object with the given math font or old text font.
             * @type {[type]}
             */
            withFont(font) {
              return this.extend({
                font
              });
            }
            /**
             * Create a new options objects with the given fontFamily.
             */
            withTextFontFamily(fontFamily) {
              return this.extend({
                fontFamily,
                font: ""
              });
            }
            /**
             * Creates a new options object with the given font weight
             */
            withTextFontWeight(fontWeight) {
              return this.extend({
                fontWeight,
                font: ""
              });
            }
            /**
             * Creates a new options object with the given font weight
             */
            withTextFontShape(fontShape) {
              return this.extend({
                fontShape,
                font: ""
              });
            }
            /**
             * Return the CSS sizing classes required to switch from enclosing options
             * `oldOptions` to `this`. Returns an array of classes.
             */
            sizingClasses(oldOptions) {
              if (oldOptions.size !== this.size) {
                return ["sizing", "reset-size" + oldOptions.size, "size" + this.size];
              } else {
                return [];
              }
            }
            /**
             * Return the CSS sizing classes required to switch to the base size. Like
             * `this.havingSize(BASESIZE).sizingClasses(this)`.
             */
            baseSizingClasses() {
              if (this.size !== Options.BASESIZE) {
                return ["sizing", "reset-size" + this.size, "size" + Options.BASESIZE];
              } else {
                return [];
              }
            }
            /**
             * Return the font metrics for this size.
             */
            fontMetrics() {
              if (!this._fontMetrics) {
                this._fontMetrics = getGlobalMetrics(this.size);
              }
              return this._fontMetrics;
            }
            /**
             * Gets the CSS color of the current options object
             */
            getColor() {
              if (this.phantom) {
                return "transparent";
              } else {
                return this.color;
              }
            }
          }
          Options.BASESIZE = 6;
          var src_Options = Options;
          const ptPerUnit = {
            // https://en.wikibooks.org/wiki/LaTeX/Lengths and
            // https://tex.stackexchange.com/a/8263
            "pt": 1,
            // TeX point
            "mm": 7227 / 2540,
            // millimeter
            "cm": 7227 / 254,
            // centimeter
            "in": 72.27,
            // inch
            "bp": 803 / 800,
            // big (PostScript) points
            "pc": 12,
            // pica
            "dd": 1238 / 1157,
            // didot
            "cc": 14856 / 1157,
            // cicero (12 didot)
            "nd": 685 / 642,
            // new didot
            "nc": 1370 / 107,
            // new cicero (12 new didot)
            "sp": 1 / 65536,
            // scaled point (TeX's internal smallest unit)
            // https://tex.stackexchange.com/a/41371
            "px": 803 / 800
            // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX
          };
          const relativeUnit = {
            "ex": true,
            "em": true,
            "mu": true
          };
          const validUnit = function(unit) {
            if (typeof unit !== "string") {
              unit = unit.unit;
            }
            return unit in ptPerUnit || unit in relativeUnit || unit === "ex";
          };
          const calculateSize = function(sizeValue, options) {
            let scale;
            if (sizeValue.unit in ptPerUnit) {
              scale = ptPerUnit[sizeValue.unit] / options.fontMetrics().ptPerEm / options.sizeMultiplier;
            } else if (sizeValue.unit === "mu") {
              scale = options.fontMetrics().cssEmPerMu;
            } else {
              let unitOptions;
              if (options.style.isTight()) {
                unitOptions = options.havingStyle(options.style.text());
              } else {
                unitOptions = options;
              }
              if (sizeValue.unit === "ex") {
                scale = unitOptions.fontMetrics().xHeight;
              } else if (sizeValue.unit === "em") {
                scale = unitOptions.fontMetrics().quad;
              } else {
                throw new src_ParseError("Invalid unit: '" + sizeValue.unit + "'");
              }
              if (unitOptions !== options) {
                scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;
              }
            }
            return Math.min(sizeValue.number * scale, options.maxSize);
          };
          const makeEm = function(n) {
            return +n.toFixed(4) + "em";
          };
          const createClass = function(classes) {
            return classes.filter((cls) => cls).join(" ");
          };
          const initNode = function(classes, options, style) {
            this.classes = classes || [];
            this.attributes = {};
            this.height = 0;
            this.depth = 0;
            this.maxFontSize = 0;
            this.style = style || {};
            if (options) {
              if (options.style.isTight()) {
                this.classes.push("mtight");
              }
              const color2 = options.getColor();
              if (color2) {
                this.style.color = color2;
              }
            }
          };
          const toNode = function(tagName) {
            const node = document.createElement(tagName);
            node.className = createClass(this.classes);
            for (const style in this.style) {
              if (this.style.hasOwnProperty(style)) {
                node.style[style] = this.style[style];
              }
            }
            for (const attr in this.attributes) {
              if (this.attributes.hasOwnProperty(attr)) {
                node.setAttribute(attr, this.attributes[attr]);
              }
            }
            for (let i = 0; i < this.children.length; i++) {
              node.appendChild(this.children[i].toNode());
            }
            return node;
          };
          const invalidAttributeNameRegex = /[\s"'>/=\x00-\x1f]/;
          const toMarkup = function(tagName) {
            let markup = "<" + tagName;
            if (this.classes.length) {
              markup += ' class="' + utils.escape(createClass(this.classes)) + '"';
            }
            let styles2 = "";
            for (const style in this.style) {
              if (this.style.hasOwnProperty(style)) {
                styles2 += utils.hyphenate(style) + ":" + this.style[style] + ";";
              }
            }
            if (styles2) {
              markup += ' style="' + utils.escape(styles2) + '"';
            }
            for (const attr in this.attributes) {
              if (this.attributes.hasOwnProperty(attr)) {
                if (invalidAttributeNameRegex.test(attr)) {
                  throw new src_ParseError("Invalid attribute name '" + attr + "'");
                }
                markup += " " + attr + '="' + utils.escape(this.attributes[attr]) + '"';
              }
            }
            markup += ">";
            for (let i = 0; i < this.children.length; i++) {
              markup += this.children[i].toMarkup();
            }
            markup += "</" + tagName + ">";
            return markup;
          };
          class Span {
            constructor(classes, children2, options, style) {
              this.children = void 0;
              this.attributes = void 0;
              this.classes = void 0;
              this.height = void 0;
              this.depth = void 0;
              this.width = void 0;
              this.maxFontSize = void 0;
              this.style = void 0;
              initNode.call(this, classes, options, style);
              this.children = children2 || [];
            }
            /**
             * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
             * all browsers support attributes the same, and having too many custom
             * attributes is probably bad.
             */
            setAttribute(attribute, value) {
              this.attributes[attribute] = value;
            }
            hasClass(className) {
              return utils.contains(this.classes, className);
            }
            toNode() {
              return toNode.call(this, "span");
            }
            toMarkup() {
              return toMarkup.call(this, "span");
            }
          }
          class Anchor {
            constructor(href, classes, children2, options) {
              this.children = void 0;
              this.attributes = void 0;
              this.classes = void 0;
              this.height = void 0;
              this.depth = void 0;
              this.maxFontSize = void 0;
              this.style = void 0;
              initNode.call(this, classes, options);
              this.children = children2 || [];
              this.setAttribute("href", href);
            }
            setAttribute(attribute, value) {
              this.attributes[attribute] = value;
            }
            hasClass(className) {
              return utils.contains(this.classes, className);
            }
            toNode() {
              return toNode.call(this, "a");
            }
            toMarkup() {
              return toMarkup.call(this, "a");
            }
          }
          class Img {
            constructor(src, alt, style) {
              this.src = void 0;
              this.alt = void 0;
              this.classes = void 0;
              this.height = void 0;
              this.depth = void 0;
              this.maxFontSize = void 0;
              this.style = void 0;
              this.alt = alt;
              this.src = src;
              this.classes = ["mord"];
              this.style = style;
            }
            hasClass(className) {
              return utils.contains(this.classes, className);
            }
            toNode() {
              const node = document.createElement("img");
              node.src = this.src;
              node.alt = this.alt;
              node.className = "mord";
              for (const style in this.style) {
                if (this.style.hasOwnProperty(style)) {
                  node.style[style] = this.style[style];
                }
              }
              return node;
            }
            toMarkup() {
              let markup = '<img src="' + utils.escape(this.src) + '"' + (' alt="' + utils.escape(this.alt) + '"');
              let styles2 = "";
              for (const style in this.style) {
                if (this.style.hasOwnProperty(style)) {
                  styles2 += utils.hyphenate(style) + ":" + this.style[style] + ";";
                }
              }
              if (styles2) {
                markup += ' style="' + utils.escape(styles2) + '"';
              }
              markup += "'/>";
              return markup;
            }
          }
          const iCombinations = {
            "î": "ı̂",
            "ï": "ı̈",
            "í": "ı́",
            // 'ī': '\u0131\u0304', // enable when we add Extended Latin
            "ì": "ı̀"
          };
          class SymbolNode {
            constructor(text, height, depth, italic, skew, width, classes, style) {
              this.text = void 0;
              this.height = void 0;
              this.depth = void 0;
              this.italic = void 0;
              this.skew = void 0;
              this.width = void 0;
              this.maxFontSize = void 0;
              this.classes = void 0;
              this.style = void 0;
              this.text = text;
              this.height = height || 0;
              this.depth = depth || 0;
              this.italic = italic || 0;
              this.skew = skew || 0;
              this.width = width || 0;
              this.classes = classes || [];
              this.style = style || {};
              this.maxFontSize = 0;
              const script = scriptFromCodepoint(this.text.charCodeAt(0));
              if (script) {
                this.classes.push(script + "_fallback");
              }
              if (/[îïíì]/.test(this.text)) {
                this.text = iCombinations[this.text];
              }
            }
            hasClass(className) {
              return utils.contains(this.classes, className);
            }
            /**
             * Creates a text node or span from a symbol node. Note that a span is only
             * created if it is needed.
             */
            toNode() {
              const node = document.createTextNode(this.text);
              let span = null;
              if (this.italic > 0) {
                span = document.createElement("span");
                span.style.marginRight = makeEm(this.italic);
              }
              if (this.classes.length > 0) {
                span = span || document.createElement("span");
                span.className = createClass(this.classes);
              }
              for (const style in this.style) {
                if (this.style.hasOwnProperty(style)) {
                  span = span || document.createElement("span");
                  span.style[style] = this.style[style];
                }
              }
              if (span) {
                span.appendChild(node);
                return span;
              } else {
                return node;
              }
            }
            /**
             * Creates markup for a symbol node.
             */
            toMarkup() {
              let needsSpan = false;
              let markup = "<span";
              if (this.classes.length) {
                needsSpan = true;
                markup += ' class="';
                markup += utils.escape(createClass(this.classes));
                markup += '"';
              }
              let styles2 = "";
              if (this.italic > 0) {
                styles2 += "margin-right:" + this.italic + "em;";
              }
              for (const style in this.style) {
                if (this.style.hasOwnProperty(style)) {
                  styles2 += utils.hyphenate(style) + ":" + this.style[style] + ";";
                }
              }
              if (styles2) {
                needsSpan = true;
                markup += ' style="' + utils.escape(styles2) + '"';
              }
              const escaped = utils.escape(this.text);
              if (needsSpan) {
                markup += ">";
                markup += escaped;
                markup += "</span>";
                return markup;
              } else {
                return escaped;
              }
            }
          }
          class SvgNode {
            constructor(children2, attributes) {
              this.children = void 0;
              this.attributes = void 0;
              this.children = children2 || [];
              this.attributes = attributes || {};
            }
            toNode() {
              const svgNS = "http://www.w3.org/2000/svg";
              const node = document.createElementNS(svgNS, "svg");
              for (const attr in this.attributes) {
                if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                  node.setAttribute(attr, this.attributes[attr]);
                }
              }
              for (let i = 0; i < this.children.length; i++) {
                node.appendChild(this.children[i].toNode());
              }
              return node;
            }
            toMarkup() {
              let markup = '<svg xmlns="http://www.w3.org/2000/svg"';
              for (const attr in this.attributes) {
                if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                  markup += " " + attr + '="' + utils.escape(this.attributes[attr]) + '"';
                }
              }
              markup += ">";
              for (let i = 0; i < this.children.length; i++) {
                markup += this.children[i].toMarkup();
              }
              markup += "</svg>";
              return markup;
            }
          }
          class PathNode {
            constructor(pathName, alternate) {
              this.pathName = void 0;
              this.alternate = void 0;
              this.pathName = pathName;
              this.alternate = alternate;
            }
            toNode() {
              const svgNS = "http://www.w3.org/2000/svg";
              const node = document.createElementNS(svgNS, "path");
              if (this.alternate) {
                node.setAttribute("d", this.alternate);
              } else {
                node.setAttribute("d", path2[this.pathName]);
              }
              return node;
            }
            toMarkup() {
              if (this.alternate) {
                return '<path d="' + utils.escape(this.alternate) + '"/>';
              } else {
                return '<path d="' + utils.escape(path2[this.pathName]) + '"/>';
              }
            }
          }
          class LineNode {
            constructor(attributes) {
              this.attributes = void 0;
              this.attributes = attributes || {};
            }
            toNode() {
              const svgNS = "http://www.w3.org/2000/svg";
              const node = document.createElementNS(svgNS, "line");
              for (const attr in this.attributes) {
                if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                  node.setAttribute(attr, this.attributes[attr]);
                }
              }
              return node;
            }
            toMarkup() {
              let markup = "<line";
              for (const attr in this.attributes) {
                if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                  markup += " " + attr + '="' + utils.escape(this.attributes[attr]) + '"';
                }
              }
              markup += "/>";
              return markup;
            }
          }
          function assertSymbolDomNode(group) {
            if (group instanceof SymbolNode) {
              return group;
            } else {
              throw new Error("Expected symbolNode but got " + String(group) + ".");
            }
          }
          function assertSpan(group) {
            if (group instanceof Span) {
              return group;
            } else {
              throw new Error("Expected span<HtmlDomNode> but got " + String(group) + ".");
            }
          }
          const ATOMS = {
            "bin": 1,
            "close": 1,
            "inner": 1,
            "open": 1,
            "punct": 1,
            "rel": 1
          };
          const NON_ATOMS = {
            "accent-token": 1,
            "mathord": 1,
            "op-token": 1,
            "spacing": 1,
            "textord": 1
          };
          const symbols = {
            "math": {},
            "text": {}
          };
          var src_symbols = symbols;
          function defineSymbol(mode, font, group, replace, name2, acceptUnicodeChar) {
            symbols[mode][name2] = {
              font,
              group,
              replace
            };
            if (acceptUnicodeChar && replace) {
              symbols[mode][replace] = symbols[mode][name2];
            }
          }
          const math = "math";
          const symbols_text = "text";
          const main2 = "main";
          const ams = "ams";
          const accent = "accent-token";
          const bin = "bin";
          const symbols_close = "close";
          const inner = "inner";
          const mathord = "mathord";
          const op = "op-token";
          const symbols_open = "open";
          const punct = "punct";
          const rel = "rel";
          const spacing = "spacing";
          const textord = "textord";
          defineSymbol(math, main2, rel, "≡", "\\equiv", true);
          defineSymbol(math, main2, rel, "≺", "\\prec", true);
          defineSymbol(math, main2, rel, "≻", "\\succ", true);
          defineSymbol(math, main2, rel, "∼", "\\sim", true);
          defineSymbol(math, main2, rel, "⊥", "\\perp");
          defineSymbol(math, main2, rel, "⪯", "\\preceq", true);
          defineSymbol(math, main2, rel, "⪰", "\\succeq", true);
          defineSymbol(math, main2, rel, "≃", "\\simeq", true);
          defineSymbol(math, main2, rel, "∣", "\\mid", true);
          defineSymbol(math, main2, rel, "≪", "\\ll", true);
          defineSymbol(math, main2, rel, "≫", "\\gg", true);
          defineSymbol(math, main2, rel, "≍", "\\asymp", true);
          defineSymbol(math, main2, rel, "∥", "\\parallel");
          defineSymbol(math, main2, rel, "⋈", "\\bowtie", true);
          defineSymbol(math, main2, rel, "⌣", "\\smile", true);
          defineSymbol(math, main2, rel, "⊑", "\\sqsubseteq", true);
          defineSymbol(math, main2, rel, "⊒", "\\sqsupseteq", true);
          defineSymbol(math, main2, rel, "≐", "\\doteq", true);
          defineSymbol(math, main2, rel, "⌢", "\\frown", true);
          defineSymbol(math, main2, rel, "∋", "\\ni", true);
          defineSymbol(math, main2, rel, "∝", "\\propto", true);
          defineSymbol(math, main2, rel, "⊢", "\\vdash", true);
          defineSymbol(math, main2, rel, "⊣", "\\dashv", true);
          defineSymbol(math, main2, rel, "∋", "\\owns");
          defineSymbol(math, main2, punct, ".", "\\ldotp");
          defineSymbol(math, main2, punct, "⋅", "\\cdotp");
          defineSymbol(math, main2, textord, "#", "\\#");
          defineSymbol(symbols_text, main2, textord, "#", "\\#");
          defineSymbol(math, main2, textord, "&", "\\&");
          defineSymbol(symbols_text, main2, textord, "&", "\\&");
          defineSymbol(math, main2, textord, "ℵ", "\\aleph", true);
          defineSymbol(math, main2, textord, "∀", "\\forall", true);
          defineSymbol(math, main2, textord, "ℏ", "\\hbar", true);
          defineSymbol(math, main2, textord, "∃", "\\exists", true);
          defineSymbol(math, main2, textord, "∇", "\\nabla", true);
          defineSymbol(math, main2, textord, "♭", "\\flat", true);
          defineSymbol(math, main2, textord, "ℓ", "\\ell", true);
          defineSymbol(math, main2, textord, "♮", "\\natural", true);
          defineSymbol(math, main2, textord, "♣", "\\clubsuit", true);
          defineSymbol(math, main2, textord, "℘", "\\wp", true);
          defineSymbol(math, main2, textord, "♯", "\\sharp", true);
          defineSymbol(math, main2, textord, "♢", "\\diamondsuit", true);
          defineSymbol(math, main2, textord, "ℜ", "\\Re", true);
          defineSymbol(math, main2, textord, "♡", "\\heartsuit", true);
          defineSymbol(math, main2, textord, "ℑ", "\\Im", true);
          defineSymbol(math, main2, textord, "♠", "\\spadesuit", true);
          defineSymbol(math, main2, textord, "§", "\\S", true);
          defineSymbol(symbols_text, main2, textord, "§", "\\S");
          defineSymbol(math, main2, textord, "¶", "\\P", true);
          defineSymbol(symbols_text, main2, textord, "¶", "\\P");
          defineSymbol(math, main2, textord, "†", "\\dag");
          defineSymbol(symbols_text, main2, textord, "†", "\\dag");
          defineSymbol(symbols_text, main2, textord, "†", "\\textdagger");
          defineSymbol(math, main2, textord, "‡", "\\ddag");
          defineSymbol(symbols_text, main2, textord, "‡", "\\ddag");
          defineSymbol(symbols_text, main2, textord, "‡", "\\textdaggerdbl");
          defineSymbol(math, main2, symbols_close, "⎱", "\\rmoustache", true);
          defineSymbol(math, main2, symbols_open, "⎰", "\\lmoustache", true);
          defineSymbol(math, main2, symbols_close, "⟯", "\\rgroup", true);
          defineSymbol(math, main2, symbols_open, "⟮", "\\lgroup", true);
          defineSymbol(math, main2, bin, "∓", "\\mp", true);
          defineSymbol(math, main2, bin, "⊖", "\\ominus", true);
          defineSymbol(math, main2, bin, "⊎", "\\uplus", true);
          defineSymbol(math, main2, bin, "⊓", "\\sqcap", true);
          defineSymbol(math, main2, bin, "∗", "\\ast");
          defineSymbol(math, main2, bin, "⊔", "\\sqcup", true);
          defineSymbol(math, main2, bin, "◯", "\\bigcirc", true);
          defineSymbol(math, main2, bin, "∙", "\\bullet", true);
          defineSymbol(math, main2, bin, "‡", "\\ddagger");
          defineSymbol(math, main2, bin, "≀", "\\wr", true);
          defineSymbol(math, main2, bin, "⨿", "\\amalg");
          defineSymbol(math, main2, bin, "&", "\\And");
          defineSymbol(math, main2, rel, "⟵", "\\longleftarrow", true);
          defineSymbol(math, main2, rel, "⇐", "\\Leftarrow", true);
          defineSymbol(math, main2, rel, "⟸", "\\Longleftarrow", true);
          defineSymbol(math, main2, rel, "⟶", "\\longrightarrow", true);
          defineSymbol(math, main2, rel, "⇒", "\\Rightarrow", true);
          defineSymbol(math, main2, rel, "⟹", "\\Longrightarrow", true);
          defineSymbol(math, main2, rel, "↔", "\\leftrightarrow", true);
          defineSymbol(math, main2, rel, "⟷", "\\longleftrightarrow", true);
          defineSymbol(math, main2, rel, "⇔", "\\Leftrightarrow", true);
          defineSymbol(math, main2, rel, "⟺", "\\Longleftrightarrow", true);
          defineSymbol(math, main2, rel, "↦", "\\mapsto", true);
          defineSymbol(math, main2, rel, "⟼", "\\longmapsto", true);
          defineSymbol(math, main2, rel, "↗", "\\nearrow", true);
          defineSymbol(math, main2, rel, "↩", "\\hookleftarrow", true);
          defineSymbol(math, main2, rel, "↪", "\\hookrightarrow", true);
          defineSymbol(math, main2, rel, "↘", "\\searrow", true);
          defineSymbol(math, main2, rel, "↼", "\\leftharpoonup", true);
          defineSymbol(math, main2, rel, "⇀", "\\rightharpoonup", true);
          defineSymbol(math, main2, rel, "↙", "\\swarrow", true);
          defineSymbol(math, main2, rel, "↽", "\\leftharpoondown", true);
          defineSymbol(math, main2, rel, "⇁", "\\rightharpoondown", true);
          defineSymbol(math, main2, rel, "↖", "\\nwarrow", true);
          defineSymbol(math, main2, rel, "⇌", "\\rightleftharpoons", true);
          defineSymbol(math, ams, rel, "≮", "\\nless", true);
          defineSymbol(math, ams, rel, "", "\\@nleqslant");
          defineSymbol(math, ams, rel, "", "\\@nleqq");
          defineSymbol(math, ams, rel, "⪇", "\\lneq", true);
          defineSymbol(math, ams, rel, "≨", "\\lneqq", true);
          defineSymbol(math, ams, rel, "", "\\@lvertneqq");
          defineSymbol(math, ams, rel, "⋦", "\\lnsim", true);
          defineSymbol(math, ams, rel, "⪉", "\\lnapprox", true);
          defineSymbol(math, ams, rel, "⊀", "\\nprec", true);
          defineSymbol(math, ams, rel, "⋠", "\\npreceq", true);
          defineSymbol(math, ams, rel, "⋨", "\\precnsim", true);
          defineSymbol(math, ams, rel, "⪹", "\\precnapprox", true);
          defineSymbol(math, ams, rel, "≁", "\\nsim", true);
          defineSymbol(math, ams, rel, "", "\\@nshortmid");
          defineSymbol(math, ams, rel, "∤", "\\nmid", true);
          defineSymbol(math, ams, rel, "⊬", "\\nvdash", true);
          defineSymbol(math, ams, rel, "⊭", "\\nvDash", true);
          defineSymbol(math, ams, rel, "⋪", "\\ntriangleleft");
          defineSymbol(math, ams, rel, "⋬", "\\ntrianglelefteq", true);
          defineSymbol(math, ams, rel, "⊊", "\\subsetneq", true);
          defineSymbol(math, ams, rel, "", "\\@varsubsetneq");
          defineSymbol(math, ams, rel, "⫋", "\\subsetneqq", true);
          defineSymbol(math, ams, rel, "", "\\@varsubsetneqq");
          defineSymbol(math, ams, rel, "≯", "\\ngtr", true);
          defineSymbol(math, ams, rel, "", "\\@ngeqslant");
          defineSymbol(math, ams, rel, "", "\\@ngeqq");
          defineSymbol(math, ams, rel, "⪈", "\\gneq", true);
          defineSymbol(math, ams, rel, "≩", "\\gneqq", true);
          defineSymbol(math, ams, rel, "", "\\@gvertneqq");
          defineSymbol(math, ams, rel, "⋧", "\\gnsim", true);
          defineSymbol(math, ams, rel, "⪊", "\\gnapprox", true);
          defineSymbol(math, ams, rel, "⊁", "\\nsucc", true);
          defineSymbol(math, ams, rel, "⋡", "\\nsucceq", true);
          defineSymbol(math, ams, rel, "⋩", "\\succnsim", true);
          defineSymbol(math, ams, rel, "⪺", "\\succnapprox", true);
          defineSymbol(math, ams, rel, "≆", "\\ncong", true);
          defineSymbol(math, ams, rel, "", "\\@nshortparallel");
          defineSymbol(math, ams, rel, "∦", "\\nparallel", true);
          defineSymbol(math, ams, rel, "⊯", "\\nVDash", true);
          defineSymbol(math, ams, rel, "⋫", "\\ntriangleright");
          defineSymbol(math, ams, rel, "⋭", "\\ntrianglerighteq", true);
          defineSymbol(math, ams, rel, "", "\\@nsupseteqq");
          defineSymbol(math, ams, rel, "⊋", "\\supsetneq", true);
          defineSymbol(math, ams, rel, "", "\\@varsupsetneq");
          defineSymbol(math, ams, rel, "⫌", "\\supsetneqq", true);
          defineSymbol(math, ams, rel, "", "\\@varsupsetneqq");
          defineSymbol(math, ams, rel, "⊮", "\\nVdash", true);
          defineSymbol(math, ams, rel, "⪵", "\\precneqq", true);
          defineSymbol(math, ams, rel, "⪶", "\\succneqq", true);
          defineSymbol(math, ams, rel, "", "\\@nsubseteqq");
          defineSymbol(math, ams, bin, "⊴", "\\unlhd");
          defineSymbol(math, ams, bin, "⊵", "\\unrhd");
          defineSymbol(math, ams, rel, "↚", "\\nleftarrow", true);
          defineSymbol(math, ams, rel, "↛", "\\nrightarrow", true);
          defineSymbol(math, ams, rel, "⇍", "\\nLeftarrow", true);
          defineSymbol(math, ams, rel, "⇏", "\\nRightarrow", true);
          defineSymbol(math, ams, rel, "↮", "\\nleftrightarrow", true);
          defineSymbol(math, ams, rel, "⇎", "\\nLeftrightarrow", true);
          defineSymbol(math, ams, rel, "△", "\\vartriangle");
          defineSymbol(math, ams, textord, "ℏ", "\\hslash");
          defineSymbol(math, ams, textord, "▽", "\\triangledown");
          defineSymbol(math, ams, textord, "◊", "\\lozenge");
          defineSymbol(math, ams, textord, "Ⓢ", "\\circledS");
          defineSymbol(math, ams, textord, "®", "\\circledR");
          defineSymbol(symbols_text, ams, textord, "®", "\\circledR");
          defineSymbol(math, ams, textord, "∡", "\\measuredangle", true);
          defineSymbol(math, ams, textord, "∄", "\\nexists");
          defineSymbol(math, ams, textord, "℧", "\\mho");
          defineSymbol(math, ams, textord, "Ⅎ", "\\Finv", true);
          defineSymbol(math, ams, textord, "⅁", "\\Game", true);
          defineSymbol(math, ams, textord, "‵", "\\backprime");
          defineSymbol(math, ams, textord, "▲", "\\blacktriangle");
          defineSymbol(math, ams, textord, "▼", "\\blacktriangledown");
          defineSymbol(math, ams, textord, "■", "\\blacksquare");
          defineSymbol(math, ams, textord, "⧫", "\\blacklozenge");
          defineSymbol(math, ams, textord, "★", "\\bigstar");
          defineSymbol(math, ams, textord, "∢", "\\sphericalangle", true);
          defineSymbol(math, ams, textord, "∁", "\\complement", true);
          defineSymbol(math, ams, textord, "ð", "\\eth", true);
          defineSymbol(symbols_text, main2, textord, "ð", "ð");
          defineSymbol(math, ams, textord, "╱", "\\diagup");
          defineSymbol(math, ams, textord, "╲", "\\diagdown");
          defineSymbol(math, ams, textord, "□", "\\square");
          defineSymbol(math, ams, textord, "□", "\\Box");
          defineSymbol(math, ams, textord, "◊", "\\Diamond");
          defineSymbol(math, ams, textord, "¥", "\\yen", true);
          defineSymbol(symbols_text, ams, textord, "¥", "\\yen", true);
          defineSymbol(math, ams, textord, "✓", "\\checkmark", true);
          defineSymbol(symbols_text, ams, textord, "✓", "\\checkmark");
          defineSymbol(math, ams, textord, "ℶ", "\\beth", true);
          defineSymbol(math, ams, textord, "ℸ", "\\daleth", true);
          defineSymbol(math, ams, textord, "ℷ", "\\gimel", true);
          defineSymbol(math, ams, textord, "ϝ", "\\digamma", true);
          defineSymbol(math, ams, textord, "ϰ", "\\varkappa");
          defineSymbol(math, ams, symbols_open, "┌", "\\@ulcorner", true);
          defineSymbol(math, ams, symbols_close, "┐", "\\@urcorner", true);
          defineSymbol(math, ams, symbols_open, "└", "\\@llcorner", true);
          defineSymbol(math, ams, symbols_close, "┘", "\\@lrcorner", true);
          defineSymbol(math, ams, rel, "≦", "\\leqq", true);
          defineSymbol(math, ams, rel, "⩽", "\\leqslant", true);
          defineSymbol(math, ams, rel, "⪕", "\\eqslantless", true);
          defineSymbol(math, ams, rel, "≲", "\\lesssim", true);
          defineSymbol(math, ams, rel, "⪅", "\\lessapprox", true);
          defineSymbol(math, ams, rel, "≊", "\\approxeq", true);
          defineSymbol(math, ams, bin, "⋖", "\\lessdot");
          defineSymbol(math, ams, rel, "⋘", "\\lll", true);
          defineSymbol(math, ams, rel, "≶", "\\lessgtr", true);
          defineSymbol(math, ams, rel, "⋚", "\\lesseqgtr", true);
          defineSymbol(math, ams, rel, "⪋", "\\lesseqqgtr", true);
          defineSymbol(math, ams, rel, "≑", "\\doteqdot");
          defineSymbol(math, ams, rel, "≓", "\\risingdotseq", true);
          defineSymbol(math, ams, rel, "≒", "\\fallingdotseq", true);
          defineSymbol(math, ams, rel, "∽", "\\backsim", true);
          defineSymbol(math, ams, rel, "⋍", "\\backsimeq", true);
          defineSymbol(math, ams, rel, "⫅", "\\subseteqq", true);
          defineSymbol(math, ams, rel, "⋐", "\\Subset", true);
          defineSymbol(math, ams, rel, "⊏", "\\sqsubset", true);
          defineSymbol(math, ams, rel, "≼", "\\preccurlyeq", true);
          defineSymbol(math, ams, rel, "⋞", "\\curlyeqprec", true);
          defineSymbol(math, ams, rel, "≾", "\\precsim", true);
          defineSymbol(math, ams, rel, "⪷", "\\precapprox", true);
          defineSymbol(math, ams, rel, "⊲", "\\vartriangleleft");
          defineSymbol(math, ams, rel, "⊴", "\\trianglelefteq");
          defineSymbol(math, ams, rel, "⊨", "\\vDash", true);
          defineSymbol(math, ams, rel, "⊪", "\\Vvdash", true);
          defineSymbol(math, ams, rel, "⌣", "\\smallsmile");
          defineSymbol(math, ams, rel, "⌢", "\\smallfrown");
          defineSymbol(math, ams, rel, "≏", "\\bumpeq", true);
          defineSymbol(math, ams, rel, "≎", "\\Bumpeq", true);
          defineSymbol(math, ams, rel, "≧", "\\geqq", true);
          defineSymbol(math, ams, rel, "⩾", "\\geqslant", true);
          defineSymbol(math, ams, rel, "⪖", "\\eqslantgtr", true);
          defineSymbol(math, ams, rel, "≳", "\\gtrsim", true);
          defineSymbol(math, ams, rel, "⪆", "\\gtrapprox", true);
          defineSymbol(math, ams, bin, "⋗", "\\gtrdot");
          defineSymbol(math, ams, rel, "⋙", "\\ggg", true);
          defineSymbol(math, ams, rel, "≷", "\\gtrless", true);
          defineSymbol(math, ams, rel, "⋛", "\\gtreqless", true);
          defineSymbol(math, ams, rel, "⪌", "\\gtreqqless", true);
          defineSymbol(math, ams, rel, "≖", "\\eqcirc", true);
          defineSymbol(math, ams, rel, "≗", "\\circeq", true);
          defineSymbol(math, ams, rel, "≜", "\\triangleq", true);
          defineSymbol(math, ams, rel, "∼", "\\thicksim");
          defineSymbol(math, ams, rel, "≈", "\\thickapprox");
          defineSymbol(math, ams, rel, "⫆", "\\supseteqq", true);
          defineSymbol(math, ams, rel, "⋑", "\\Supset", true);
          defineSymbol(math, ams, rel, "⊐", "\\sqsupset", true);
          defineSymbol(math, ams, rel, "≽", "\\succcurlyeq", true);
          defineSymbol(math, ams, rel, "⋟", "\\curlyeqsucc", true);
          defineSymbol(math, ams, rel, "≿", "\\succsim", true);
          defineSymbol(math, ams, rel, "⪸", "\\succapprox", true);
          defineSymbol(math, ams, rel, "⊳", "\\vartriangleright");
          defineSymbol(math, ams, rel, "⊵", "\\trianglerighteq");
          defineSymbol(math, ams, rel, "⊩", "\\Vdash", true);
          defineSymbol(math, ams, rel, "∣", "\\shortmid");
          defineSymbol(math, ams, rel, "∥", "\\shortparallel");
          defineSymbol(math, ams, rel, "≬", "\\between", true);
          defineSymbol(math, ams, rel, "⋔", "\\pitchfork", true);
          defineSymbol(math, ams, rel, "∝", "\\varpropto");
          defineSymbol(math, ams, rel, "◀", "\\blacktriangleleft");
          defineSymbol(math, ams, rel, "∴", "\\therefore", true);
          defineSymbol(math, ams, rel, "∍", "\\backepsilon");
          defineSymbol(math, ams, rel, "▶", "\\blacktriangleright");
          defineSymbol(math, ams, rel, "∵", "\\because", true);
          defineSymbol(math, ams, rel, "⋘", "\\llless");
          defineSymbol(math, ams, rel, "⋙", "\\gggtr");
          defineSymbol(math, ams, bin, "⊲", "\\lhd");
          defineSymbol(math, ams, bin, "⊳", "\\rhd");
          defineSymbol(math, ams, rel, "≂", "\\eqsim", true);
          defineSymbol(math, main2, rel, "⋈", "\\Join");
          defineSymbol(math, ams, rel, "≑", "\\Doteq", true);
          defineSymbol(math, ams, bin, "∔", "\\dotplus", true);
          defineSymbol(math, ams, bin, "∖", "\\smallsetminus");
          defineSymbol(math, ams, bin, "⋒", "\\Cap", true);
          defineSymbol(math, ams, bin, "⋓", "\\Cup", true);
          defineSymbol(math, ams, bin, "⩞", "\\doublebarwedge", true);
          defineSymbol(math, ams, bin, "⊟", "\\boxminus", true);
          defineSymbol(math, ams, bin, "⊞", "\\boxplus", true);
          defineSymbol(math, ams, bin, "⋇", "\\divideontimes", true);
          defineSymbol(math, ams, bin, "⋉", "\\ltimes", true);
          defineSymbol(math, ams, bin, "⋊", "\\rtimes", true);
          defineSymbol(math, ams, bin, "⋋", "\\leftthreetimes", true);
          defineSymbol(math, ams, bin, "⋌", "\\rightthreetimes", true);
          defineSymbol(math, ams, bin, "⋏", "\\curlywedge", true);
          defineSymbol(math, ams, bin, "⋎", "\\curlyvee", true);
          defineSymbol(math, ams, bin, "⊝", "\\circleddash", true);
          defineSymbol(math, ams, bin, "⊛", "\\circledast", true);
          defineSymbol(math, ams, bin, "⋅", "\\centerdot");
          defineSymbol(math, ams, bin, "⊺", "\\intercal", true);
          defineSymbol(math, ams, bin, "⋒", "\\doublecap");
          defineSymbol(math, ams, bin, "⋓", "\\doublecup");
          defineSymbol(math, ams, bin, "⊠", "\\boxtimes", true);
          defineSymbol(math, ams, rel, "⇢", "\\dashrightarrow", true);
          defineSymbol(math, ams, rel, "⇠", "\\dashleftarrow", true);
          defineSymbol(math, ams, rel, "⇇", "\\leftleftarrows", true);
          defineSymbol(math, ams, rel, "⇆", "\\leftrightarrows", true);
          defineSymbol(math, ams, rel, "⇚", "\\Lleftarrow", true);
          defineSymbol(math, ams, rel, "↞", "\\twoheadleftarrow", true);
          defineSymbol(math, ams, rel, "↢", "\\leftarrowtail", true);
          defineSymbol(math, ams, rel, "↫", "\\looparrowleft", true);
          defineSymbol(math, ams, rel, "⇋", "\\leftrightharpoons", true);
          defineSymbol(math, ams, rel, "↶", "\\curvearrowleft", true);
          defineSymbol(math, ams, rel, "↺", "\\circlearrowleft", true);
          defineSymbol(math, ams, rel, "↰", "\\Lsh", true);
          defineSymbol(math, ams, rel, "⇈", "\\upuparrows", true);
          defineSymbol(math, ams, rel, "↿", "\\upharpoonleft", true);
          defineSymbol(math, ams, rel, "⇃", "\\downharpoonleft", true);
          defineSymbol(math, main2, rel, "⊶", "\\origof", true);
          defineSymbol(math, main2, rel, "⊷", "\\imageof", true);
          defineSymbol(math, ams, rel, "⊸", "\\multimap", true);
          defineSymbol(math, ams, rel, "↭", "\\leftrightsquigarrow", true);
          defineSymbol(math, ams, rel, "⇉", "\\rightrightarrows", true);
          defineSymbol(math, ams, rel, "⇄", "\\rightleftarrows", true);
          defineSymbol(math, ams, rel, "↠", "\\twoheadrightarrow", true);
          defineSymbol(math, ams, rel, "↣", "\\rightarrowtail", true);
          defineSymbol(math, ams, rel, "↬", "\\looparrowright", true);
          defineSymbol(math, ams, rel, "↷", "\\curvearrowright", true);
          defineSymbol(math, ams, rel, "↻", "\\circlearrowright", true);
          defineSymbol(math, ams, rel, "↱", "\\Rsh", true);
          defineSymbol(math, ams, rel, "⇊", "\\downdownarrows", true);
          defineSymbol(math, ams, rel, "↾", "\\upharpoonright", true);
          defineSymbol(math, ams, rel, "⇂", "\\downharpoonright", true);
          defineSymbol(math, ams, rel, "⇝", "\\rightsquigarrow", true);
          defineSymbol(math, ams, rel, "⇝", "\\leadsto");
          defineSymbol(math, ams, rel, "⇛", "\\Rrightarrow", true);
          defineSymbol(math, ams, rel, "↾", "\\restriction");
          defineSymbol(math, main2, textord, "‘", "`");
          defineSymbol(math, main2, textord, "$", "\\$");
          defineSymbol(symbols_text, main2, textord, "$", "\\$");
          defineSymbol(symbols_text, main2, textord, "$", "\\textdollar");
          defineSymbol(math, main2, textord, "%", "\\%");
          defineSymbol(symbols_text, main2, textord, "%", "\\%");
          defineSymbol(math, main2, textord, "_", "\\_");
          defineSymbol(symbols_text, main2, textord, "_", "\\_");
          defineSymbol(symbols_text, main2, textord, "_", "\\textunderscore");
          defineSymbol(math, main2, textord, "∠", "\\angle", true);
          defineSymbol(math, main2, textord, "∞", "\\infty", true);
          defineSymbol(math, main2, textord, "′", "\\prime");
          defineSymbol(math, main2, textord, "△", "\\triangle");
          defineSymbol(math, main2, textord, "Γ", "\\Gamma", true);
          defineSymbol(math, main2, textord, "Δ", "\\Delta", true);
          defineSymbol(math, main2, textord, "Θ", "\\Theta", true);
          defineSymbol(math, main2, textord, "Λ", "\\Lambda", true);
          defineSymbol(math, main2, textord, "Ξ", "\\Xi", true);
          defineSymbol(math, main2, textord, "Π", "\\Pi", true);
          defineSymbol(math, main2, textord, "Σ", "\\Sigma", true);
          defineSymbol(math, main2, textord, "Υ", "\\Upsilon", true);
          defineSymbol(math, main2, textord, "Φ", "\\Phi", true);
          defineSymbol(math, main2, textord, "Ψ", "\\Psi", true);
          defineSymbol(math, main2, textord, "Ω", "\\Omega", true);
          defineSymbol(math, main2, textord, "A", "Α");
          defineSymbol(math, main2, textord, "B", "Β");
          defineSymbol(math, main2, textord, "E", "Ε");
          defineSymbol(math, main2, textord, "Z", "Ζ");
          defineSymbol(math, main2, textord, "H", "Η");
          defineSymbol(math, main2, textord, "I", "Ι");
          defineSymbol(math, main2, textord, "K", "Κ");
          defineSymbol(math, main2, textord, "M", "Μ");
          defineSymbol(math, main2, textord, "N", "Ν");
          defineSymbol(math, main2, textord, "O", "Ο");
          defineSymbol(math, main2, textord, "P", "Ρ");
          defineSymbol(math, main2, textord, "T", "Τ");
          defineSymbol(math, main2, textord, "X", "Χ");
          defineSymbol(math, main2, textord, "¬", "\\neg", true);
          defineSymbol(math, main2, textord, "¬", "\\lnot");
          defineSymbol(math, main2, textord, "⊤", "\\top");
          defineSymbol(math, main2, textord, "⊥", "\\bot");
          defineSymbol(math, main2, textord, "∅", "\\emptyset");
          defineSymbol(math, ams, textord, "∅", "\\varnothing");
          defineSymbol(math, main2, mathord, "α", "\\alpha", true);
          defineSymbol(math, main2, mathord, "β", "\\beta", true);
          defineSymbol(math, main2, mathord, "γ", "\\gamma", true);
          defineSymbol(math, main2, mathord, "δ", "\\delta", true);
          defineSymbol(math, main2, mathord, "ϵ", "\\epsilon", true);
          defineSymbol(math, main2, mathord, "ζ", "\\zeta", true);
          defineSymbol(math, main2, mathord, "η", "\\eta", true);
          defineSymbol(math, main2, mathord, "θ", "\\theta", true);
          defineSymbol(math, main2, mathord, "ι", "\\iota", true);
          defineSymbol(math, main2, mathord, "κ", "\\kappa", true);
          defineSymbol(math, main2, mathord, "λ", "\\lambda", true);
          defineSymbol(math, main2, mathord, "μ", "\\mu", true);
          defineSymbol(math, main2, mathord, "ν", "\\nu", true);
          defineSymbol(math, main2, mathord, "ξ", "\\xi", true);
          defineSymbol(math, main2, mathord, "ο", "\\omicron", true);
          defineSymbol(math, main2, mathord, "π", "\\pi", true);
          defineSymbol(math, main2, mathord, "ρ", "\\rho", true);
          defineSymbol(math, main2, mathord, "σ", "\\sigma", true);
          defineSymbol(math, main2, mathord, "τ", "\\tau", true);
          defineSymbol(math, main2, mathord, "υ", "\\upsilon", true);
          defineSymbol(math, main2, mathord, "ϕ", "\\phi", true);
          defineSymbol(math, main2, mathord, "χ", "\\chi", true);
          defineSymbol(math, main2, mathord, "ψ", "\\psi", true);
          defineSymbol(math, main2, mathord, "ω", "\\omega", true);
          defineSymbol(math, main2, mathord, "ε", "\\varepsilon", true);
          defineSymbol(math, main2, mathord, "ϑ", "\\vartheta", true);
          defineSymbol(math, main2, mathord, "ϖ", "\\varpi", true);
          defineSymbol(math, main2, mathord, "ϱ", "\\varrho", true);
          defineSymbol(math, main2, mathord, "ς", "\\varsigma", true);
          defineSymbol(math, main2, mathord, "φ", "\\varphi", true);
          defineSymbol(math, main2, bin, "∗", "*", true);
          defineSymbol(math, main2, bin, "+", "+");
          defineSymbol(math, main2, bin, "−", "-", true);
          defineSymbol(math, main2, bin, "⋅", "\\cdot", true);
          defineSymbol(math, main2, bin, "∘", "\\circ", true);
          defineSymbol(math, main2, bin, "÷", "\\div", true);
          defineSymbol(math, main2, bin, "±", "\\pm", true);
          defineSymbol(math, main2, bin, "×", "\\times", true);
          defineSymbol(math, main2, bin, "∩", "\\cap", true);
          defineSymbol(math, main2, bin, "∪", "\\cup", true);
          defineSymbol(math, main2, bin, "∖", "\\setminus", true);
          defineSymbol(math, main2, bin, "∧", "\\land");
          defineSymbol(math, main2, bin, "∨", "\\lor");
          defineSymbol(math, main2, bin, "∧", "\\wedge", true);
          defineSymbol(math, main2, bin, "∨", "\\vee", true);
          defineSymbol(math, main2, textord, "√", "\\surd");
          defineSymbol(math, main2, symbols_open, "⟨", "\\langle", true);
          defineSymbol(math, main2, symbols_open, "∣", "\\lvert");
          defineSymbol(math, main2, symbols_open, "∥", "\\lVert");
          defineSymbol(math, main2, symbols_close, "?", "?");
          defineSymbol(math, main2, symbols_close, "!", "!");
          defineSymbol(math, main2, symbols_close, "⟩", "\\rangle", true);
          defineSymbol(math, main2, symbols_close, "∣", "\\rvert");
          defineSymbol(math, main2, symbols_close, "∥", "\\rVert");
          defineSymbol(math, main2, rel, "=", "=");
          defineSymbol(math, main2, rel, ":", ":");
          defineSymbol(math, main2, rel, "≈", "\\approx", true);
          defineSymbol(math, main2, rel, "≅", "\\cong", true);
          defineSymbol(math, main2, rel, "≥", "\\ge");
          defineSymbol(math, main2, rel, "≥", "\\geq", true);
          defineSymbol(math, main2, rel, "←", "\\gets");
          defineSymbol(math, main2, rel, ">", "\\gt", true);
          defineSymbol(math, main2, rel, "∈", "\\in", true);
          defineSymbol(math, main2, rel, "", "\\@not");
          defineSymbol(math, main2, rel, "⊂", "\\subset", true);
          defineSymbol(math, main2, rel, "⊃", "\\supset", true);
          defineSymbol(math, main2, rel, "⊆", "\\subseteq", true);
          defineSymbol(math, main2, rel, "⊇", "\\supseteq", true);
          defineSymbol(math, ams, rel, "⊈", "\\nsubseteq", true);
          defineSymbol(math, ams, rel, "⊉", "\\nsupseteq", true);
          defineSymbol(math, main2, rel, "⊨", "\\models");
          defineSymbol(math, main2, rel, "←", "\\leftarrow", true);
          defineSymbol(math, main2, rel, "≤", "\\le");
          defineSymbol(math, main2, rel, "≤", "\\leq", true);
          defineSymbol(math, main2, rel, "<", "\\lt", true);
          defineSymbol(math, main2, rel, "→", "\\rightarrow", true);
          defineSymbol(math, main2, rel, "→", "\\to");
          defineSymbol(math, ams, rel, "≱", "\\ngeq", true);
          defineSymbol(math, ams, rel, "≰", "\\nleq", true);
          defineSymbol(math, main2, spacing, " ", "\\ ");
          defineSymbol(math, main2, spacing, " ", "\\space");
          defineSymbol(math, main2, spacing, " ", "\\nobreakspace");
          defineSymbol(symbols_text, main2, spacing, " ", "\\ ");
          defineSymbol(symbols_text, main2, spacing, " ", " ");
          defineSymbol(symbols_text, main2, spacing, " ", "\\space");
          defineSymbol(symbols_text, main2, spacing, " ", "\\nobreakspace");
          defineSymbol(math, main2, spacing, null, "\\nobreak");
          defineSymbol(math, main2, spacing, null, "\\allowbreak");
          defineSymbol(math, main2, punct, ",", ",");
          defineSymbol(math, main2, punct, ";", ";");
          defineSymbol(math, ams, bin, "⊼", "\\barwedge", true);
          defineSymbol(math, ams, bin, "⊻", "\\veebar", true);
          defineSymbol(math, main2, bin, "⊙", "\\odot", true);
          defineSymbol(math, main2, bin, "⊕", "\\oplus", true);
          defineSymbol(math, main2, bin, "⊗", "\\otimes", true);
          defineSymbol(math, main2, textord, "∂", "\\partial", true);
          defineSymbol(math, main2, bin, "⊘", "\\oslash", true);
          defineSymbol(math, ams, bin, "⊚", "\\circledcirc", true);
          defineSymbol(math, ams, bin, "⊡", "\\boxdot", true);
          defineSymbol(math, main2, bin, "△", "\\bigtriangleup");
          defineSymbol(math, main2, bin, "▽", "\\bigtriangledown");
          defineSymbol(math, main2, bin, "†", "\\dagger");
          defineSymbol(math, main2, bin, "⋄", "\\diamond");
          defineSymbol(math, main2, bin, "⋆", "\\star");
          defineSymbol(math, main2, bin, "◃", "\\triangleleft");
          defineSymbol(math, main2, bin, "▹", "\\triangleright");
          defineSymbol(math, main2, symbols_open, "{", "\\{");
          defineSymbol(symbols_text, main2, textord, "{", "\\{");
          defineSymbol(symbols_text, main2, textord, "{", "\\textbraceleft");
          defineSymbol(math, main2, symbols_close, "}", "\\}");
          defineSymbol(symbols_text, main2, textord, "}", "\\}");
          defineSymbol(symbols_text, main2, textord, "}", "\\textbraceright");
          defineSymbol(math, main2, symbols_open, "{", "\\lbrace");
          defineSymbol(math, main2, symbols_close, "}", "\\rbrace");
          defineSymbol(math, main2, symbols_open, "[", "\\lbrack", true);
          defineSymbol(symbols_text, main2, textord, "[", "\\lbrack", true);
          defineSymbol(math, main2, symbols_close, "]", "\\rbrack", true);
          defineSymbol(symbols_text, main2, textord, "]", "\\rbrack", true);
          defineSymbol(math, main2, symbols_open, "(", "\\lparen", true);
          defineSymbol(math, main2, symbols_close, ")", "\\rparen", true);
          defineSymbol(symbols_text, main2, textord, "<", "\\textless", true);
          defineSymbol(symbols_text, main2, textord, ">", "\\textgreater", true);
          defineSymbol(math, main2, symbols_open, "⌊", "\\lfloor", true);
          defineSymbol(math, main2, symbols_close, "⌋", "\\rfloor", true);
          defineSymbol(math, main2, symbols_open, "⌈", "\\lceil", true);
          defineSymbol(math, main2, symbols_close, "⌉", "\\rceil", true);
          defineSymbol(math, main2, textord, "\\", "\\backslash");
          defineSymbol(math, main2, textord, "∣", "|");
          defineSymbol(math, main2, textord, "∣", "\\vert");
          defineSymbol(symbols_text, main2, textord, "|", "\\textbar", true);
          defineSymbol(math, main2, textord, "∥", "\\|");
          defineSymbol(math, main2, textord, "∥", "\\Vert");
          defineSymbol(symbols_text, main2, textord, "∥", "\\textbardbl");
          defineSymbol(symbols_text, main2, textord, "~", "\\textasciitilde");
          defineSymbol(symbols_text, main2, textord, "\\", "\\textbackslash");
          defineSymbol(symbols_text, main2, textord, "^", "\\textasciicircum");
          defineSymbol(math, main2, rel, "↑", "\\uparrow", true);
          defineSymbol(math, main2, rel, "⇑", "\\Uparrow", true);
          defineSymbol(math, main2, rel, "↓", "\\downarrow", true);
          defineSymbol(math, main2, rel, "⇓", "\\Downarrow", true);
          defineSymbol(math, main2, rel, "↕", "\\updownarrow", true);
          defineSymbol(math, main2, rel, "⇕", "\\Updownarrow", true);
          defineSymbol(math, main2, op, "∐", "\\coprod");
          defineSymbol(math, main2, op, "⋁", "\\bigvee");
          defineSymbol(math, main2, op, "⋀", "\\bigwedge");
          defineSymbol(math, main2, op, "⨄", "\\biguplus");
          defineSymbol(math, main2, op, "⋂", "\\bigcap");
          defineSymbol(math, main2, op, "⋃", "\\bigcup");
          defineSymbol(math, main2, op, "∫", "\\int");
          defineSymbol(math, main2, op, "∫", "\\intop");
          defineSymbol(math, main2, op, "∬", "\\iint");
          defineSymbol(math, main2, op, "∭", "\\iiint");
          defineSymbol(math, main2, op, "∏", "\\prod");
          defineSymbol(math, main2, op, "∑", "\\sum");
          defineSymbol(math, main2, op, "⨂", "\\bigotimes");
          defineSymbol(math, main2, op, "⨁", "\\bigoplus");
          defineSymbol(math, main2, op, "⨀", "\\bigodot");
          defineSymbol(math, main2, op, "∮", "\\oint");
          defineSymbol(math, main2, op, "∯", "\\oiint");
          defineSymbol(math, main2, op, "∰", "\\oiiint");
          defineSymbol(math, main2, op, "⨆", "\\bigsqcup");
          defineSymbol(math, main2, op, "∫", "\\smallint");
          defineSymbol(symbols_text, main2, inner, "…", "\\textellipsis");
          defineSymbol(math, main2, inner, "…", "\\mathellipsis");
          defineSymbol(symbols_text, main2, inner, "…", "\\ldots", true);
          defineSymbol(math, main2, inner, "…", "\\ldots", true);
          defineSymbol(math, main2, inner, "⋯", "\\@cdots", true);
          defineSymbol(math, main2, inner, "⋱", "\\ddots", true);
          defineSymbol(math, main2, textord, "⋮", "\\varvdots");
          defineSymbol(symbols_text, main2, textord, "⋮", "\\varvdots");
          defineSymbol(math, main2, accent, "ˊ", "\\acute");
          defineSymbol(math, main2, accent, "ˋ", "\\grave");
          defineSymbol(math, main2, accent, "¨", "\\ddot");
          defineSymbol(math, main2, accent, "~", "\\tilde");
          defineSymbol(math, main2, accent, "ˉ", "\\bar");
          defineSymbol(math, main2, accent, "˘", "\\breve");
          defineSymbol(math, main2, accent, "ˇ", "\\check");
          defineSymbol(math, main2, accent, "^", "\\hat");
          defineSymbol(math, main2, accent, "⃗", "\\vec");
          defineSymbol(math, main2, accent, "˙", "\\dot");
          defineSymbol(math, main2, accent, "˚", "\\mathring");
          defineSymbol(math, main2, mathord, "", "\\@imath");
          defineSymbol(math, main2, mathord, "", "\\@jmath");
          defineSymbol(math, main2, textord, "ı", "ı");
          defineSymbol(math, main2, textord, "ȷ", "ȷ");
          defineSymbol(symbols_text, main2, textord, "ı", "\\i", true);
          defineSymbol(symbols_text, main2, textord, "ȷ", "\\j", true);
          defineSymbol(symbols_text, main2, textord, "ß", "\\ss", true);
          defineSymbol(symbols_text, main2, textord, "æ", "\\ae", true);
          defineSymbol(symbols_text, main2, textord, "œ", "\\oe", true);
          defineSymbol(symbols_text, main2, textord, "ø", "\\o", true);
          defineSymbol(symbols_text, main2, textord, "Æ", "\\AE", true);
          defineSymbol(symbols_text, main2, textord, "Œ", "\\OE", true);
          defineSymbol(symbols_text, main2, textord, "Ø", "\\O", true);
          defineSymbol(symbols_text, main2, accent, "ˊ", "\\'");
          defineSymbol(symbols_text, main2, accent, "ˋ", "\\`");
          defineSymbol(symbols_text, main2, accent, "ˆ", "\\^");
          defineSymbol(symbols_text, main2, accent, "˜", "\\~");
          defineSymbol(symbols_text, main2, accent, "ˉ", "\\=");
          defineSymbol(symbols_text, main2, accent, "˘", "\\u");
          defineSymbol(symbols_text, main2, accent, "˙", "\\.");
          defineSymbol(symbols_text, main2, accent, "¸", "\\c");
          defineSymbol(symbols_text, main2, accent, "˚", "\\r");
          defineSymbol(symbols_text, main2, accent, "ˇ", "\\v");
          defineSymbol(symbols_text, main2, accent, "¨", '\\"');
          defineSymbol(symbols_text, main2, accent, "˝", "\\H");
          defineSymbol(symbols_text, main2, accent, "◯", "\\textcircled");
          const ligatures = {
            "--": true,
            "---": true,
            "``": true,
            "''": true
          };
          defineSymbol(symbols_text, main2, textord, "–", "--", true);
          defineSymbol(symbols_text, main2, textord, "–", "\\textendash");
          defineSymbol(symbols_text, main2, textord, "—", "---", true);
          defineSymbol(symbols_text, main2, textord, "—", "\\textemdash");
          defineSymbol(symbols_text, main2, textord, "‘", "`", true);
          defineSymbol(symbols_text, main2, textord, "‘", "\\textquoteleft");
          defineSymbol(symbols_text, main2, textord, "’", "'", true);
          defineSymbol(symbols_text, main2, textord, "’", "\\textquoteright");
          defineSymbol(symbols_text, main2, textord, "“", "``", true);
          defineSymbol(symbols_text, main2, textord, "“", "\\textquotedblleft");
          defineSymbol(symbols_text, main2, textord, "”", "''", true);
          defineSymbol(symbols_text, main2, textord, "”", "\\textquotedblright");
          defineSymbol(math, main2, textord, "°", "\\degree", true);
          defineSymbol(symbols_text, main2, textord, "°", "\\degree");
          defineSymbol(symbols_text, main2, textord, "°", "\\textdegree", true);
          defineSymbol(math, main2, textord, "£", "\\pounds");
          defineSymbol(math, main2, textord, "£", "\\mathsterling", true);
          defineSymbol(symbols_text, main2, textord, "£", "\\pounds");
          defineSymbol(symbols_text, main2, textord, "£", "\\textsterling", true);
          defineSymbol(math, ams, textord, "✠", "\\maltese");
          defineSymbol(symbols_text, ams, textord, "✠", "\\maltese");
          const mathTextSymbols = '0123456789/@."';
          for (let i = 0; i < mathTextSymbols.length; i++) {
            const ch = mathTextSymbols.charAt(i);
            defineSymbol(math, main2, textord, ch, ch);
          }
          const textSymbols = '0123456789!@*()-=+";:?/.,';
          for (let i = 0; i < textSymbols.length; i++) {
            const ch = textSymbols.charAt(i);
            defineSymbol(symbols_text, main2, textord, ch, ch);
          }
          const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
          for (let i = 0; i < letters.length; i++) {
            const ch = letters.charAt(i);
            defineSymbol(math, main2, mathord, ch, ch);
            defineSymbol(symbols_text, main2, textord, ch, ch);
          }
          defineSymbol(math, ams, textord, "C", "ℂ");
          defineSymbol(symbols_text, ams, textord, "C", "ℂ");
          defineSymbol(math, ams, textord, "H", "ℍ");
          defineSymbol(symbols_text, ams, textord, "H", "ℍ");
          defineSymbol(math, ams, textord, "N", "ℕ");
          defineSymbol(symbols_text, ams, textord, "N", "ℕ");
          defineSymbol(math, ams, textord, "P", "ℙ");
          defineSymbol(symbols_text, ams, textord, "P", "ℙ");
          defineSymbol(math, ams, textord, "Q", "ℚ");
          defineSymbol(symbols_text, ams, textord, "Q", "ℚ");
          defineSymbol(math, ams, textord, "R", "ℝ");
          defineSymbol(symbols_text, ams, textord, "R", "ℝ");
          defineSymbol(math, ams, textord, "Z", "ℤ");
          defineSymbol(symbols_text, ams, textord, "Z", "ℤ");
          defineSymbol(math, main2, mathord, "h", "ℎ");
          defineSymbol(symbols_text, main2, mathord, "h", "ℎ");
          let wideChar = "";
          for (let i = 0; i < letters.length; i++) {
            const ch = letters.charAt(i);
            wideChar = String.fromCharCode(55349, 56320 + i);
            defineSymbol(math, main2, mathord, ch, wideChar);
            defineSymbol(symbols_text, main2, textord, ch, wideChar);
            wideChar = String.fromCharCode(55349, 56372 + i);
            defineSymbol(math, main2, mathord, ch, wideChar);
            defineSymbol(symbols_text, main2, textord, ch, wideChar);
            wideChar = String.fromCharCode(55349, 56424 + i);
            defineSymbol(math, main2, mathord, ch, wideChar);
            defineSymbol(symbols_text, main2, textord, ch, wideChar);
            wideChar = String.fromCharCode(55349, 56580 + i);
            defineSymbol(math, main2, mathord, ch, wideChar);
            defineSymbol(symbols_text, main2, textord, ch, wideChar);
            wideChar = String.fromCharCode(55349, 56684 + i);
            defineSymbol(math, main2, mathord, ch, wideChar);
            defineSymbol(symbols_text, main2, textord, ch, wideChar);
            wideChar = String.fromCharCode(55349, 56736 + i);
            defineSymbol(math, main2, mathord, ch, wideChar);
            defineSymbol(symbols_text, main2, textord, ch, wideChar);
            wideChar = String.fromCharCode(55349, 56788 + i);
            defineSymbol(math, main2, mathord, ch, wideChar);
            defineSymbol(symbols_text, main2, textord, ch, wideChar);
            wideChar = String.fromCharCode(55349, 56840 + i);
            defineSymbol(math, main2, mathord, ch, wideChar);
            defineSymbol(symbols_text, main2, textord, ch, wideChar);
            wideChar = String.fromCharCode(55349, 56944 + i);
            defineSymbol(math, main2, mathord, ch, wideChar);
            defineSymbol(symbols_text, main2, textord, ch, wideChar);
            if (i < 26) {
              wideChar = String.fromCharCode(55349, 56632 + i);
              defineSymbol(math, main2, mathord, ch, wideChar);
              defineSymbol(symbols_text, main2, textord, ch, wideChar);
              wideChar = String.fromCharCode(55349, 56476 + i);
              defineSymbol(math, main2, mathord, ch, wideChar);
              defineSymbol(symbols_text, main2, textord, ch, wideChar);
            }
          }
          wideChar = String.fromCharCode(55349, 56668);
          defineSymbol(math, main2, mathord, "k", wideChar);
          defineSymbol(symbols_text, main2, textord, "k", wideChar);
          for (let i = 0; i < 10; i++) {
            const ch = i.toString();
            wideChar = String.fromCharCode(55349, 57294 + i);
            defineSymbol(math, main2, mathord, ch, wideChar);
            defineSymbol(symbols_text, main2, textord, ch, wideChar);
            wideChar = String.fromCharCode(55349, 57314 + i);
            defineSymbol(math, main2, mathord, ch, wideChar);
            defineSymbol(symbols_text, main2, textord, ch, wideChar);
            wideChar = String.fromCharCode(55349, 57324 + i);
            defineSymbol(math, main2, mathord, ch, wideChar);
            defineSymbol(symbols_text, main2, textord, ch, wideChar);
            wideChar = String.fromCharCode(55349, 57334 + i);
            defineSymbol(math, main2, mathord, ch, wideChar);
            defineSymbol(symbols_text, main2, textord, ch, wideChar);
          }
          const extraLatin = "ÐÞþ";
          for (let i = 0; i < extraLatin.length; i++) {
            const ch = extraLatin.charAt(i);
            defineSymbol(math, main2, mathord, ch, ch);
            defineSymbol(symbols_text, main2, textord, ch, ch);
          }
          const wideLatinLetterData = [
            ["mathbf", "textbf", "Main-Bold"],
            // A-Z bold upright
            ["mathbf", "textbf", "Main-Bold"],
            // a-z bold upright
            ["mathnormal", "textit", "Math-Italic"],
            // A-Z italic
            ["mathnormal", "textit", "Math-Italic"],
            // a-z italic
            ["boldsymbol", "boldsymbol", "Main-BoldItalic"],
            // A-Z bold italic
            ["boldsymbol", "boldsymbol", "Main-BoldItalic"],
            // a-z bold italic
            // Map fancy A-Z letters to script, not calligraphic.
            // This aligns with unicode-math and math fonts (except Cambria Math).
            ["mathscr", "textscr", "Script-Regular"],
            // A-Z script
            ["", "", ""],
            // a-z script.  No font
            ["", "", ""],
            // A-Z bold script. No font
            ["", "", ""],
            // a-z bold script. No font
            ["mathfrak", "textfrak", "Fraktur-Regular"],
            // A-Z Fraktur
            ["mathfrak", "textfrak", "Fraktur-Regular"],
            // a-z Fraktur
            ["mathbb", "textbb", "AMS-Regular"],
            // A-Z double-struck
            ["mathbb", "textbb", "AMS-Regular"],
            // k double-struck
            // Note that we are using a bold font, but font metrics for regular Fraktur.
            ["mathboldfrak", "textboldfrak", "Fraktur-Regular"],
            // A-Z bold Fraktur
            ["mathboldfrak", "textboldfrak", "Fraktur-Regular"],
            // a-z bold Fraktur
            ["mathsf", "textsf", "SansSerif-Regular"],
            // A-Z sans-serif
            ["mathsf", "textsf", "SansSerif-Regular"],
            // a-z sans-serif
            ["mathboldsf", "textboldsf", "SansSerif-Bold"],
            // A-Z bold sans-serif
            ["mathboldsf", "textboldsf", "SansSerif-Bold"],
            // a-z bold sans-serif
            ["mathitsf", "textitsf", "SansSerif-Italic"],
            // A-Z italic sans-serif
            ["mathitsf", "textitsf", "SansSerif-Italic"],
            // a-z italic sans-serif
            ["", "", ""],
            // A-Z bold italic sans. No font
            ["", "", ""],
            // a-z bold italic sans. No font
            ["mathtt", "texttt", "Typewriter-Regular"],
            // A-Z monospace
            ["mathtt", "texttt", "Typewriter-Regular"]
            // a-z monospace
          ];
          const wideNumeralData = [
            ["mathbf", "textbf", "Main-Bold"],
            // 0-9 bold
            ["", "", ""],
            // 0-9 double-struck. No KaTeX font.
            ["mathsf", "textsf", "SansSerif-Regular"],
            // 0-9 sans-serif
            ["mathboldsf", "textboldsf", "SansSerif-Bold"],
            // 0-9 bold sans-serif
            ["mathtt", "texttt", "Typewriter-Regular"]
            // 0-9 monospace
          ];
          const wideCharacterFont = function(wideChar2, mode) {
            const H = wideChar2.charCodeAt(0);
            const L = wideChar2.charCodeAt(1);
            const codePoint = (H - 55296) * 1024 + (L - 56320) + 65536;
            const j = mode === "math" ? 0 : 1;
            if (119808 <= codePoint && codePoint < 120484) {
              const i = Math.floor((codePoint - 119808) / 26);
              return [wideLatinLetterData[i][2], wideLatinLetterData[i][j]];
            } else if (120782 <= codePoint && codePoint <= 120831) {
              const i = Math.floor((codePoint - 120782) / 10);
              return [wideNumeralData[i][2], wideNumeralData[i][j]];
            } else if (codePoint === 120485 || codePoint === 120486) {
              return [wideLatinLetterData[0][2], wideLatinLetterData[0][j]];
            } else if (120486 < codePoint && codePoint < 120782) {
              return ["", ""];
            } else {
              throw new src_ParseError("Unsupported character: " + wideChar2);
            }
          };
          const lookupSymbol = function(value, fontName, mode) {
            if (src_symbols[mode][value] && src_symbols[mode][value].replace) {
              value = src_symbols[mode][value].replace;
            }
            return {
              value,
              metrics: getCharacterMetrics(value, fontName, mode)
            };
          };
          const makeSymbol = function(value, fontName, mode, options, classes) {
            const lookup = lookupSymbol(value, fontName, mode);
            const metrics = lookup.metrics;
            value = lookup.value;
            let symbolNode;
            if (metrics) {
              let italic = metrics.italic;
              if (mode === "text" || options && options.font === "mathit") {
                italic = 0;
              }
              symbolNode = new SymbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, metrics.width, classes);
            } else {
              typeof console !== "undefined" && console.warn("No character metrics " + ("for '" + value + "' in style '" + fontName + "' and mode '" + mode + "'"));
              symbolNode = new SymbolNode(value, 0, 0, 0, 0, 0, classes);
            }
            if (options) {
              symbolNode.maxFontSize = options.sizeMultiplier;
              if (options.style.isTight()) {
                symbolNode.classes.push("mtight");
              }
              const color2 = options.getColor();
              if (color2) {
                symbolNode.style.color = color2;
              }
            }
            return symbolNode;
          };
          const mathsym = function(value, mode, options, classes) {
            if (classes === void 0) {
              classes = [];
            }
            if (options.font === "boldsymbol" && lookupSymbol(value, "Main-Bold", mode).metrics) {
              return makeSymbol(value, "Main-Bold", mode, options, classes.concat(["mathbf"]));
            } else if (value === "\\" || src_symbols[mode][value].font === "main") {
              return makeSymbol(value, "Main-Regular", mode, options, classes);
            } else {
              return makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
            }
          };
          const boldsymbol = function(value, mode, options, classes, type) {
            if (type !== "textord" && lookupSymbol(value, "Math-BoldItalic", mode).metrics) {
              return {
                fontName: "Math-BoldItalic",
                fontClass: "boldsymbol"
              };
            } else {
              return {
                fontName: "Main-Bold",
                fontClass: "mathbf"
              };
            }
          };
          const makeOrd = function(group, options, type) {
            const mode = group.mode;
            const text = group.text;
            const classes = ["mord"];
            const isFont = mode === "math" || mode === "text" && options.font;
            const fontOrFamily = isFont ? options.font : options.fontFamily;
            let wideFontName = "";
            let wideFontClass = "";
            if (text.charCodeAt(0) === 55349) {
              [wideFontName, wideFontClass] = wideCharacterFont(text, mode);
            }
            if (wideFontName.length > 0) {
              return makeSymbol(text, wideFontName, mode, options, classes.concat(wideFontClass));
            } else if (fontOrFamily) {
              let fontName;
              let fontClasses;
              if (fontOrFamily === "boldsymbol") {
                const fontData = boldsymbol(text, mode, options, classes, type);
                fontName = fontData.fontName;
                fontClasses = [fontData.fontClass];
              } else if (isFont) {
                fontName = fontMap[fontOrFamily].fontName;
                fontClasses = [fontOrFamily];
              } else {
                fontName = retrieveTextFontName(fontOrFamily, options.fontWeight, options.fontShape);
                fontClasses = [fontOrFamily, options.fontWeight, options.fontShape];
              }
              if (lookupSymbol(text, fontName, mode).metrics) {
                return makeSymbol(text, fontName, mode, options, classes.concat(fontClasses));
              } else if (ligatures.hasOwnProperty(text) && fontName.slice(0, 10) === "Typewriter") {
                const parts = [];
                for (let i = 0; i < text.length; i++) {
                  parts.push(makeSymbol(text[i], fontName, mode, options, classes.concat(fontClasses)));
                }
                return makeFragment(parts);
              }
            }
            if (type === "mathord") {
              return makeSymbol(text, "Math-Italic", mode, options, classes.concat(["mathnormal"]));
            } else if (type === "textord") {
              const font = src_symbols[mode][text] && src_symbols[mode][text].font;
              if (font === "ams") {
                const fontName = retrieveTextFontName("amsrm", options.fontWeight, options.fontShape);
                return makeSymbol(text, fontName, mode, options, classes.concat("amsrm", options.fontWeight, options.fontShape));
              } else if (font === "main" || !font) {
                const fontName = retrieveTextFontName("textrm", options.fontWeight, options.fontShape);
                return makeSymbol(text, fontName, mode, options, classes.concat(options.fontWeight, options.fontShape));
              } else {
                const fontName = retrieveTextFontName(font, options.fontWeight, options.fontShape);
                return makeSymbol(text, fontName, mode, options, classes.concat(fontName, options.fontWeight, options.fontShape));
              }
            } else {
              throw new Error("unexpected type: " + type + " in makeOrd");
            }
          };
          const canCombine = (prev, next) => {
            if (createClass(prev.classes) !== createClass(next.classes) || prev.skew !== next.skew || prev.maxFontSize !== next.maxFontSize) {
              return false;
            }
            if (prev.classes.length === 1) {
              const cls = prev.classes[0];
              if (cls === "mbin" || cls === "mord") {
                return false;
              }
            }
            for (const style in prev.style) {
              if (prev.style.hasOwnProperty(style) && prev.style[style] !== next.style[style]) {
                return false;
              }
            }
            for (const style in next.style) {
              if (next.style.hasOwnProperty(style) && prev.style[style] !== next.style[style]) {
                return false;
              }
            }
            return true;
          };
          const tryCombineChars = (chars) => {
            for (let i = 0; i < chars.length - 1; i++) {
              const prev = chars[i];
              const next = chars[i + 1];
              if (prev instanceof SymbolNode && next instanceof SymbolNode && canCombine(prev, next)) {
                prev.text += next.text;
                prev.height = Math.max(prev.height, next.height);
                prev.depth = Math.max(prev.depth, next.depth);
                prev.italic = next.italic;
                chars.splice(i + 1, 1);
                i--;
              }
            }
            return chars;
          };
          const sizeElementFromChildren = function(elem) {
            let height = 0;
            let depth = 0;
            let maxFontSize = 0;
            for (let i = 0; i < elem.children.length; i++) {
              const child = elem.children[i];
              if (child.height > height) {
                height = child.height;
              }
              if (child.depth > depth) {
                depth = child.depth;
              }
              if (child.maxFontSize > maxFontSize) {
                maxFontSize = child.maxFontSize;
              }
            }
            elem.height = height;
            elem.depth = depth;
            elem.maxFontSize = maxFontSize;
          };
          const makeSpan = function(classes, children2, options, style) {
            const span = new Span(classes, children2, options, style);
            sizeElementFromChildren(span);
            return span;
          };
          const makeSvgSpan = (classes, children2, options, style) => new Span(classes, children2, options, style);
          const makeLineSpan = function(className, options, thickness) {
            const line = makeSpan([className], [], options);
            line.height = Math.max(thickness || options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
            line.style.borderBottomWidth = makeEm(line.height);
            line.maxFontSize = 1;
            return line;
          };
          const makeAnchor = function(href, classes, children2, options) {
            const anchor = new Anchor(href, classes, children2, options);
            sizeElementFromChildren(anchor);
            return anchor;
          };
          const makeFragment = function(children2) {
            const fragment = new DocumentFragment(children2);
            sizeElementFromChildren(fragment);
            return fragment;
          };
          const wrapFragment = function(group, options) {
            if (group instanceof DocumentFragment) {
              return makeSpan([], [group], options);
            }
            return group;
          };
          const getVListChildrenAndDepth = function(params) {
            if (params.positionType === "individualShift") {
              const oldChildren = params.children;
              const children2 = [oldChildren[0]];
              const depth2 = -oldChildren[0].shift - oldChildren[0].elem.depth;
              let currPos = depth2;
              for (let i = 1; i < oldChildren.length; i++) {
                const diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;
                const size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);
                currPos = currPos + diff;
                children2.push({
                  type: "kern",
                  size
                });
                children2.push(oldChildren[i]);
              }
              return {
                children: children2,
                depth: depth2
              };
            }
            let depth;
            if (params.positionType === "top") {
              let bottom = params.positionData;
              for (let i = 0; i < params.children.length; i++) {
                const child = params.children[i];
                bottom -= child.type === "kern" ? child.size : child.elem.height + child.elem.depth;
              }
              depth = bottom;
            } else if (params.positionType === "bottom") {
              depth = -params.positionData;
            } else {
              const firstChild = params.children[0];
              if (firstChild.type !== "elem") {
                throw new Error('First child must have type "elem".');
              }
              if (params.positionType === "shift") {
                depth = -firstChild.elem.depth - params.positionData;
              } else if (params.positionType === "firstBaseline") {
                depth = -firstChild.elem.depth;
              } else {
                throw new Error("Invalid positionType " + params.positionType + ".");
              }
            }
            return {
              children: params.children,
              depth
            };
          };
          const makeVList = function(params, options) {
            const {
              children: children2,
              depth
            } = getVListChildrenAndDepth(params);
            let pstrutSize = 0;
            for (let i = 0; i < children2.length; i++) {
              const child = children2[i];
              if (child.type === "elem") {
                const elem = child.elem;
                pstrutSize = Math.max(pstrutSize, elem.maxFontSize, elem.height);
              }
            }
            pstrutSize += 2;
            const pstrut = makeSpan(["pstrut"], []);
            pstrut.style.height = makeEm(pstrutSize);
            const realChildren = [];
            let minPos = depth;
            let maxPos = depth;
            let currPos = depth;
            for (let i = 0; i < children2.length; i++) {
              const child = children2[i];
              if (child.type === "kern") {
                currPos += child.size;
              } else {
                const elem = child.elem;
                const classes = child.wrapperClasses || [];
                const style = child.wrapperStyle || {};
                const childWrap = makeSpan(classes, [pstrut, elem], void 0, style);
                childWrap.style.top = makeEm(-pstrutSize - currPos - elem.depth);
                if (child.marginLeft) {
                  childWrap.style.marginLeft = child.marginLeft;
                }
                if (child.marginRight) {
                  childWrap.style.marginRight = child.marginRight;
                }
                realChildren.push(childWrap);
                currPos += elem.height + elem.depth;
              }
              minPos = Math.min(minPos, currPos);
              maxPos = Math.max(maxPos, currPos);
            }
            const vlist = makeSpan(["vlist"], realChildren);
            vlist.style.height = makeEm(maxPos);
            let rows;
            if (minPos < 0) {
              const emptySpan = makeSpan([], []);
              const depthStrut = makeSpan(["vlist"], [emptySpan]);
              depthStrut.style.height = makeEm(-minPos);
              const topStrut = makeSpan(["vlist-s"], [new SymbolNode("​")]);
              rows = [makeSpan(["vlist-r"], [vlist, topStrut]), makeSpan(["vlist-r"], [depthStrut])];
            } else {
              rows = [makeSpan(["vlist-r"], [vlist])];
            }
            const vtable = makeSpan(["vlist-t"], rows);
            if (rows.length === 2) {
              vtable.classes.push("vlist-t2");
            }
            vtable.height = maxPos;
            vtable.depth = -minPos;
            return vtable;
          };
          const makeGlue = (measurement, options) => {
            const rule = makeSpan(["mspace"], [], options);
            const size = calculateSize(measurement, options);
            rule.style.marginRight = makeEm(size);
            return rule;
          };
          const retrieveTextFontName = function(fontFamily, fontWeight, fontShape) {
            let baseFontName = "";
            switch (fontFamily) {
              case "amsrm":
                baseFontName = "AMS";
                break;
              case "textrm":
                baseFontName = "Main";
                break;
              case "textsf":
                baseFontName = "SansSerif";
                break;
              case "texttt":
                baseFontName = "Typewriter";
                break;
              default:
                baseFontName = fontFamily;
            }
            let fontStylesName;
            if (fontWeight === "textbf" && fontShape === "textit") {
              fontStylesName = "BoldItalic";
            } else if (fontWeight === "textbf") {
              fontStylesName = "Bold";
            } else if (fontWeight === "textit") {
              fontStylesName = "Italic";
            } else {
              fontStylesName = "Regular";
            }
            return baseFontName + "-" + fontStylesName;
          };
          const fontMap = {
            // styles
            "mathbf": {
              variant: "bold",
              fontName: "Main-Bold"
            },
            "mathrm": {
              variant: "normal",
              fontName: "Main-Regular"
            },
            "textit": {
              variant: "italic",
              fontName: "Main-Italic"
            },
            "mathit": {
              variant: "italic",
              fontName: "Main-Italic"
            },
            "mathnormal": {
              variant: "italic",
              fontName: "Math-Italic"
            },
            "mathsfit": {
              variant: "sans-serif-italic",
              fontName: "SansSerif-Italic"
            },
            // "boldsymbol" is missing because they require the use of multiple fonts:
            // Math-BoldItalic and Main-Bold.  This is handled by a special case in
            // makeOrd which ends up calling boldsymbol.
            // families
            "mathbb": {
              variant: "double-struck",
              fontName: "AMS-Regular"
            },
            "mathcal": {
              variant: "script",
              fontName: "Caligraphic-Regular"
            },
            "mathfrak": {
              variant: "fraktur",
              fontName: "Fraktur-Regular"
            },
            "mathscr": {
              variant: "script",
              fontName: "Script-Regular"
            },
            "mathsf": {
              variant: "sans-serif",
              fontName: "SansSerif-Regular"
            },
            "mathtt": {
              variant: "monospace",
              fontName: "Typewriter-Regular"
            }
          };
          const svgData = {
            //   path, width, height
            vec: ["vec", 0.471, 0.714],
            // values from the font glyph
            oiintSize1: ["oiintSize1", 0.957, 0.499],
            // oval to overlay the integrand
            oiintSize2: ["oiintSize2", 1.472, 0.659],
            oiiintSize1: ["oiiintSize1", 1.304, 0.499],
            oiiintSize2: ["oiiintSize2", 1.98, 0.659]
          };
          const staticSvg = function(value, options) {
            const [pathName, width, height] = svgData[value];
            const path3 = new PathNode(pathName);
            const svgNode2 = new SvgNode([path3], {
              "width": makeEm(width),
              "height": makeEm(height),
              // Override CSS rule `.katex svg { width: 100% }`
              "style": "width:" + makeEm(width),
              "viewBox": "0 0 " + 1e3 * width + " " + 1e3 * height,
              "preserveAspectRatio": "xMinYMin"
            });
            const span = makeSvgSpan(["overlay"], [svgNode2], options);
            span.height = height;
            span.style.height = makeEm(height);
            span.style.width = makeEm(width);
            return span;
          };
          var buildCommon = {
            fontMap,
            makeSymbol,
            mathsym,
            makeSpan,
            makeSvgSpan,
            makeLineSpan,
            makeAnchor,
            makeFragment,
            wrapFragment,
            makeVList,
            makeOrd,
            makeGlue,
            staticSvg,
            svgData,
            tryCombineChars
          };
          const thinspace = {
            number: 3,
            unit: "mu"
          };
          const mediumspace = {
            number: 4,
            unit: "mu"
          };
          const thickspace = {
            number: 5,
            unit: "mu"
          };
          const spacings = {
            mord: {
              mop: thinspace,
              mbin: mediumspace,
              mrel: thickspace,
              minner: thinspace
            },
            mop: {
              mord: thinspace,
              mop: thinspace,
              mrel: thickspace,
              minner: thinspace
            },
            mbin: {
              mord: mediumspace,
              mop: mediumspace,
              mopen: mediumspace,
              minner: mediumspace
            },
            mrel: {
              mord: thickspace,
              mop: thickspace,
              mopen: thickspace,
              minner: thickspace
            },
            mopen: {},
            mclose: {
              mop: thinspace,
              mbin: mediumspace,
              mrel: thickspace,
              minner: thinspace
            },
            mpunct: {
              mord: thinspace,
              mop: thinspace,
              mrel: thickspace,
              mopen: thinspace,
              mclose: thinspace,
              mpunct: thinspace,
              minner: thinspace
            },
            minner: {
              mord: thinspace,
              mop: thinspace,
              mbin: mediumspace,
              mrel: thickspace,
              mopen: thinspace,
              mpunct: thinspace,
              minner: thinspace
            }
          };
          const tightSpacings = {
            mord: {
              mop: thinspace
            },
            mop: {
              mord: thinspace,
              mop: thinspace
            },
            mbin: {},
            mrel: {},
            mopen: {},
            mclose: {
              mop: thinspace
            },
            mpunct: {},
            minner: {
              mop: thinspace
            }
          };
          const _functions = {};
          const _htmlGroupBuilders = {};
          const _mathmlGroupBuilders = {};
          function defineFunction(_ref) {
            let {
              type,
              names,
              props,
              handler,
              htmlBuilder: htmlBuilder2,
              mathmlBuilder: mathmlBuilder2
            } = _ref;
            const data = {
              type,
              numArgs: props.numArgs,
              argTypes: props.argTypes,
              allowedInArgument: !!props.allowedInArgument,
              allowedInText: !!props.allowedInText,
              allowedInMath: props.allowedInMath === void 0 ? true : props.allowedInMath,
              numOptionalArgs: props.numOptionalArgs || 0,
              infix: !!props.infix,
              primitive: !!props.primitive,
              handler
            };
            for (let i = 0; i < names.length; ++i) {
              _functions[names[i]] = data;
            }
            if (type) {
              if (htmlBuilder2) {
                _htmlGroupBuilders[type] = htmlBuilder2;
              }
              if (mathmlBuilder2) {
                _mathmlGroupBuilders[type] = mathmlBuilder2;
              }
            }
          }
          function defineFunctionBuilders(_ref2) {
            let {
              type,
              htmlBuilder: htmlBuilder2,
              mathmlBuilder: mathmlBuilder2
            } = _ref2;
            defineFunction({
              type,
              names: [],
              props: {
                numArgs: 0
              },
              handler() {
                throw new Error("Should never be called.");
              },
              htmlBuilder: htmlBuilder2,
              mathmlBuilder: mathmlBuilder2
            });
          }
          const normalizeArgument = function(arg) {
            return arg.type === "ordgroup" && arg.body.length === 1 ? arg.body[0] : arg;
          };
          const ordargument = function(arg) {
            return arg.type === "ordgroup" ? arg.body : [arg];
          };
          const buildHTML_makeSpan = buildCommon.makeSpan;
          const binLeftCanceller = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"];
          const binRightCanceller = ["rightmost", "mrel", "mclose", "mpunct"];
          const styleMap = {
            "display": src_Style.DISPLAY,
            "text": src_Style.TEXT,
            "script": src_Style.SCRIPT,
            "scriptscript": src_Style.SCRIPTSCRIPT
          };
          const DomEnum = {
            mord: "mord",
            mop: "mop",
            mbin: "mbin",
            mrel: "mrel",
            mopen: "mopen",
            mclose: "mclose",
            mpunct: "mpunct",
            minner: "minner"
          };
          const buildExpression = function(expression, options, isRealGroup, surrounding) {
            if (surrounding === void 0) {
              surrounding = [null, null];
            }
            const groups = [];
            for (let i = 0; i < expression.length; i++) {
              const output = buildGroup(expression[i], options);
              if (output instanceof DocumentFragment) {
                const children2 = output.children;
                groups.push(...children2);
              } else {
                groups.push(output);
              }
            }
            buildCommon.tryCombineChars(groups);
            if (!isRealGroup) {
              return groups;
            }
            let glueOptions = options;
            if (expression.length === 1) {
              const node = expression[0];
              if (node.type === "sizing") {
                glueOptions = options.havingSize(node.size);
              } else if (node.type === "styling") {
                glueOptions = options.havingStyle(styleMap[node.style]);
              }
            }
            const dummyPrev = buildHTML_makeSpan([surrounding[0] || "leftmost"], [], options);
            const dummyNext = buildHTML_makeSpan([surrounding[1] || "rightmost"], [], options);
            const isRoot = isRealGroup === "root";
            traverseNonSpaceNodes(groups, (node, prev) => {
              const prevType = prev.classes[0];
              const type = node.classes[0];
              if (prevType === "mbin" && utils.contains(binRightCanceller, type)) {
                prev.classes[0] = "mord";
              } else if (type === "mbin" && utils.contains(binLeftCanceller, prevType)) {
                node.classes[0] = "mord";
              }
            }, {
              node: dummyPrev
            }, dummyNext, isRoot);
            traverseNonSpaceNodes(groups, (node, prev) => {
              const prevType = getTypeOfDomTree(prev);
              const type = getTypeOfDomTree(node);
              const space = prevType && type ? node.hasClass("mtight") ? tightSpacings[prevType][type] : spacings[prevType][type] : null;
              if (space) {
                return buildCommon.makeGlue(space, glueOptions);
              }
            }, {
              node: dummyPrev
            }, dummyNext, isRoot);
            return groups;
          };
          const traverseNonSpaceNodes = function(nodes, callback, prev, next, isRoot) {
            if (next) {
              nodes.push(next);
            }
            let i = 0;
            for (; i < nodes.length; i++) {
              const node = nodes[i];
              const partialGroup = checkPartialGroup(node);
              if (partialGroup) {
                traverseNonSpaceNodes(partialGroup.children, callback, prev, null, isRoot);
                continue;
              }
              const nonspace = !node.hasClass("mspace");
              if (nonspace) {
                const result = callback(node, prev.node);
                if (result) {
                  if (prev.insertAfter) {
                    prev.insertAfter(result);
                  } else {
                    nodes.unshift(result);
                    i++;
                  }
                }
              }
              if (nonspace) {
                prev.node = node;
              } else if (isRoot && node.hasClass("newline")) {
                prev.node = buildHTML_makeSpan(["leftmost"]);
              }
              prev.insertAfter = ((index) => (n) => {
                nodes.splice(index + 1, 0, n);
                i++;
              })(i);
            }
            if (next) {
              nodes.pop();
            }
          };
          const checkPartialGroup = function(node) {
            if (node instanceof DocumentFragment || node instanceof Anchor || node instanceof Span && node.hasClass("enclosing")) {
              return node;
            }
            return null;
          };
          const getOutermostNode = function(node, side) {
            const partialGroup = checkPartialGroup(node);
            if (partialGroup) {
              const children2 = partialGroup.children;
              if (children2.length) {
                if (side === "right") {
                  return getOutermostNode(children2[children2.length - 1], "right");
                } else if (side === "left") {
                  return getOutermostNode(children2[0], "left");
                }
              }
            }
            return node;
          };
          const getTypeOfDomTree = function(node, side) {
            if (!node) {
              return null;
            }
            if (side) {
              node = getOutermostNode(node, side);
            }
            return DomEnum[node.classes[0]] || null;
          };
          const makeNullDelimiter = function(options, classes) {
            const moreClasses = ["nulldelimiter"].concat(options.baseSizingClasses());
            return buildHTML_makeSpan(classes.concat(moreClasses));
          };
          const buildGroup = function(group, options, baseOptions) {
            if (!group) {
              return buildHTML_makeSpan();
            }
            if (_htmlGroupBuilders[group.type]) {
              let groupNode = _htmlGroupBuilders[group.type](group, options);
              if (baseOptions && options.size !== baseOptions.size) {
                groupNode = buildHTML_makeSpan(options.sizingClasses(baseOptions), [groupNode], options);
                const multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
                groupNode.height *= multiplier;
                groupNode.depth *= multiplier;
              }
              return groupNode;
            } else {
              throw new src_ParseError("Got group of unknown type: '" + group.type + "'");
            }
          };
          function buildHTMLUnbreakable(children2, options) {
            const body = buildHTML_makeSpan(["base"], children2, options);
            const strut = buildHTML_makeSpan(["strut"]);
            strut.style.height = makeEm(body.height + body.depth);
            if (body.depth) {
              strut.style.verticalAlign = makeEm(-body.depth);
            }
            body.children.unshift(strut);
            return body;
          }
          function buildHTML(tree, options) {
            let tag = null;
            if (tree.length === 1 && tree[0].type === "tag") {
              tag = tree[0].tag;
              tree = tree[0].body;
            }
            const expression = buildExpression(tree, options, "root");
            let eqnNum;
            if (expression.length === 2 && expression[1].hasClass("tag")) {
              eqnNum = expression.pop();
            }
            const children2 = [];
            let parts = [];
            for (let i = 0; i < expression.length; i++) {
              parts.push(expression[i]);
              if (expression[i].hasClass("mbin") || expression[i].hasClass("mrel") || expression[i].hasClass("allowbreak")) {
                let nobreak = false;
                while (i < expression.length - 1 && expression[i + 1].hasClass("mspace") && !expression[i + 1].hasClass("newline")) {
                  i++;
                  parts.push(expression[i]);
                  if (expression[i].hasClass("nobreak")) {
                    nobreak = true;
                  }
                }
                if (!nobreak) {
                  children2.push(buildHTMLUnbreakable(parts, options));
                  parts = [];
                }
              } else if (expression[i].hasClass("newline")) {
                parts.pop();
                if (parts.length > 0) {
                  children2.push(buildHTMLUnbreakable(parts, options));
                  parts = [];
                }
                children2.push(expression[i]);
              }
            }
            if (parts.length > 0) {
              children2.push(buildHTMLUnbreakable(parts, options));
            }
            let tagChild;
            if (tag) {
              tagChild = buildHTMLUnbreakable(buildExpression(tag, options, true));
              tagChild.classes = ["tag"];
              children2.push(tagChild);
            } else if (eqnNum) {
              children2.push(eqnNum);
            }
            const htmlNode = buildHTML_makeSpan(["katex-html"], children2);
            htmlNode.setAttribute("aria-hidden", "true");
            if (tagChild) {
              const strut = tagChild.children[0];
              strut.style.height = makeEm(htmlNode.height + htmlNode.depth);
              if (htmlNode.depth) {
                strut.style.verticalAlign = makeEm(-htmlNode.depth);
              }
            }
            return htmlNode;
          }
          function newDocumentFragment(children2) {
            return new DocumentFragment(children2);
          }
          class MathNode {
            constructor(type, children2, classes) {
              this.type = void 0;
              this.attributes = void 0;
              this.children = void 0;
              this.classes = void 0;
              this.type = type;
              this.attributes = {};
              this.children = children2 || [];
              this.classes = classes || [];
            }
            /**
             * Sets an attribute on a MathML node. MathML depends on attributes to convey a
             * semantic content, so this is used heavily.
             */
            setAttribute(name2, value) {
              this.attributes[name2] = value;
            }
            /**
             * Gets an attribute on a MathML node.
             */
            getAttribute(name2) {
              return this.attributes[name2];
            }
            /**
             * Converts the math node into a MathML-namespaced DOM element.
             */
            toNode() {
              const node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);
              for (const attr in this.attributes) {
                if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                  node.setAttribute(attr, this.attributes[attr]);
                }
              }
              if (this.classes.length > 0) {
                node.className = createClass(this.classes);
              }
              for (let i = 0; i < this.children.length; i++) {
                if (this.children[i] instanceof TextNode && this.children[i + 1] instanceof TextNode) {
                  let text = this.children[i].toText() + this.children[++i].toText();
                  while (this.children[i + 1] instanceof TextNode) {
                    text += this.children[++i].toText();
                  }
                  node.appendChild(new TextNode(text).toNode());
                } else {
                  node.appendChild(this.children[i].toNode());
                }
              }
              return node;
            }
            /**
             * Converts the math node into an HTML markup string.
             */
            toMarkup() {
              let markup = "<" + this.type;
              for (const attr in this.attributes) {
                if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                  markup += " " + attr + '="';
                  markup += utils.escape(this.attributes[attr]);
                  markup += '"';
                }
              }
              if (this.classes.length > 0) {
                markup += ' class ="' + utils.escape(createClass(this.classes)) + '"';
              }
              markup += ">";
              for (let i = 0; i < this.children.length; i++) {
                markup += this.children[i].toMarkup();
              }
              markup += "</" + this.type + ">";
              return markup;
            }
            /**
             * Converts the math node into a string, similar to innerText, but escaped.
             */
            toText() {
              return this.children.map((child) => child.toText()).join("");
            }
          }
          class TextNode {
            constructor(text) {
              this.text = void 0;
              this.text = text;
            }
            /**
             * Converts the text node into a DOM text node.
             */
            toNode() {
              return document.createTextNode(this.text);
            }
            /**
             * Converts the text node into escaped HTML markup
             * (representing the text itself).
             */
            toMarkup() {
              return utils.escape(this.toText());
            }
            /**
             * Converts the text node into a string
             * (representing the text itself).
             */
            toText() {
              return this.text;
            }
          }
          class SpaceNode {
            /**
             * Create a Space node with width given in CSS ems.
             */
            constructor(width) {
              this.width = void 0;
              this.character = void 0;
              this.width = width;
              if (width >= 0.05555 && width <= 0.05556) {
                this.character = " ";
              } else if (width >= 0.1666 && width <= 0.1667) {
                this.character = " ";
              } else if (width >= 0.2222 && width <= 0.2223) {
                this.character = " ";
              } else if (width >= 0.2777 && width <= 0.2778) {
                this.character = "  ";
              } else if (width >= -0.05556 && width <= -0.05555) {
                this.character = " ⁣";
              } else if (width >= -0.1667 && width <= -0.1666) {
                this.character = " ⁣";
              } else if (width >= -0.2223 && width <= -0.2222) {
                this.character = " ⁣";
              } else if (width >= -0.2778 && width <= -0.2777) {
                this.character = " ⁣";
              } else {
                this.character = null;
              }
            }
            /**
             * Converts the math node into a MathML-namespaced DOM element.
             */
            toNode() {
              if (this.character) {
                return document.createTextNode(this.character);
              } else {
                const node = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
                node.setAttribute("width", makeEm(this.width));
                return node;
              }
            }
            /**
             * Converts the math node into an HTML markup string.
             */
            toMarkup() {
              if (this.character) {
                return "<mtext>" + this.character + "</mtext>";
              } else {
                return '<mspace width="' + makeEm(this.width) + '"/>';
              }
            }
            /**
             * Converts the math node into a string, similar to innerText.
             */
            toText() {
              if (this.character) {
                return this.character;
              } else {
                return " ";
              }
            }
          }
          var mathMLTree = {
            MathNode,
            TextNode,
            SpaceNode,
            newDocumentFragment
          };
          const makeText = function(text, mode, options) {
            if (src_symbols[mode][text] && src_symbols[mode][text].replace && text.charCodeAt(0) !== 55349 && !(ligatures.hasOwnProperty(text) && options && (options.fontFamily && options.fontFamily.slice(4, 6) === "tt" || options.font && options.font.slice(4, 6) === "tt"))) {
              text = src_symbols[mode][text].replace;
            }
            return new mathMLTree.TextNode(text);
          };
          const makeRow = function(body) {
            if (body.length === 1) {
              return body[0];
            } else {
              return new mathMLTree.MathNode("mrow", body);
            }
          };
          const getVariant = function(group, options) {
            if (options.fontFamily === "texttt") {
              return "monospace";
            } else if (options.fontFamily === "textsf") {
              if (options.fontShape === "textit" && options.fontWeight === "textbf") {
                return "sans-serif-bold-italic";
              } else if (options.fontShape === "textit") {
                return "sans-serif-italic";
              } else if (options.fontWeight === "textbf") {
                return "bold-sans-serif";
              } else {
                return "sans-serif";
              }
            } else if (options.fontShape === "textit" && options.fontWeight === "textbf") {
              return "bold-italic";
            } else if (options.fontShape === "textit") {
              return "italic";
            } else if (options.fontWeight === "textbf") {
              return "bold";
            }
            const font = options.font;
            if (!font || font === "mathnormal") {
              return null;
            }
            const mode = group.mode;
            if (font === "mathit") {
              return "italic";
            } else if (font === "boldsymbol") {
              return group.type === "textord" ? "bold" : "bold-italic";
            } else if (font === "mathbf") {
              return "bold";
            } else if (font === "mathbb") {
              return "double-struck";
            } else if (font === "mathsfit") {
              return "sans-serif-italic";
            } else if (font === "mathfrak") {
              return "fraktur";
            } else if (font === "mathscr" || font === "mathcal") {
              return "script";
            } else if (font === "mathsf") {
              return "sans-serif";
            } else if (font === "mathtt") {
              return "monospace";
            }
            let text = group.text;
            if (utils.contains(["\\imath", "\\jmath"], text)) {
              return null;
            }
            if (src_symbols[mode][text] && src_symbols[mode][text].replace) {
              text = src_symbols[mode][text].replace;
            }
            const fontName = buildCommon.fontMap[font].fontName;
            if (getCharacterMetrics(text, fontName, mode)) {
              return buildCommon.fontMap[font].variant;
            }
            return null;
          };
          function isNumberPunctuation(group) {
            if (!group) {
              return false;
            }
            if (group.type === "mi" && group.children.length === 1) {
              const child = group.children[0];
              return child instanceof TextNode && child.text === ".";
            } else if (group.type === "mo" && group.children.length === 1 && group.getAttribute("separator") === "true" && group.getAttribute("lspace") === "0em" && group.getAttribute("rspace") === "0em") {
              const child = group.children[0];
              return child instanceof TextNode && child.text === ",";
            } else {
              return false;
            }
          }
          const buildMathML_buildExpression = function(expression, options, isOrdgroup) {
            if (expression.length === 1) {
              const group = buildMathML_buildGroup(expression[0], options);
              if (isOrdgroup && group instanceof MathNode && group.type === "mo") {
                group.setAttribute("lspace", "0em");
                group.setAttribute("rspace", "0em");
              }
              return [group];
            }
            const groups = [];
            let lastGroup;
            for (let i = 0; i < expression.length; i++) {
              const group = buildMathML_buildGroup(expression[i], options);
              if (group instanceof MathNode && lastGroup instanceof MathNode) {
                if (group.type === "mtext" && lastGroup.type === "mtext" && group.getAttribute("mathvariant") === lastGroup.getAttribute("mathvariant")) {
                  lastGroup.children.push(...group.children);
                  continue;
                } else if (group.type === "mn" && lastGroup.type === "mn") {
                  lastGroup.children.push(...group.children);
                  continue;
                } else if (isNumberPunctuation(group) && lastGroup.type === "mn") {
                  lastGroup.children.push(...group.children);
                  continue;
                } else if (group.type === "mn" && isNumberPunctuation(lastGroup)) {
                  group.children = [...lastGroup.children, ...group.children];
                  groups.pop();
                } else if ((group.type === "msup" || group.type === "msub") && group.children.length >= 1 && (lastGroup.type === "mn" || isNumberPunctuation(lastGroup))) {
                  const base = group.children[0];
                  if (base instanceof MathNode && base.type === "mn") {
                    base.children = [...lastGroup.children, ...base.children];
                    groups.pop();
                  }
                } else if (lastGroup.type === "mi" && lastGroup.children.length === 1) {
                  const lastChild = lastGroup.children[0];
                  if (lastChild instanceof TextNode && lastChild.text === "̸" && (group.type === "mo" || group.type === "mi" || group.type === "mn")) {
                    const child = group.children[0];
                    if (child instanceof TextNode && child.text.length > 0) {
                      child.text = child.text.slice(0, 1) + "̸" + child.text.slice(1);
                      groups.pop();
                    }
                  }
                }
              }
              groups.push(group);
              lastGroup = group;
            }
            return groups;
          };
          const buildExpressionRow = function(expression, options, isOrdgroup) {
            return makeRow(buildMathML_buildExpression(expression, options, isOrdgroup));
          };
          const buildMathML_buildGroup = function(group, options) {
            if (!group) {
              return new mathMLTree.MathNode("mrow");
            }
            if (_mathmlGroupBuilders[group.type]) {
              const result = _mathmlGroupBuilders[group.type](group, options);
              return result;
            } else {
              throw new src_ParseError("Got group of unknown type: '" + group.type + "'");
            }
          };
          function buildMathML(tree, texExpression, options, isDisplayMode, forMathmlOnly) {
            const expression = buildMathML_buildExpression(tree, options);
            let wrapper;
            if (expression.length === 1 && expression[0] instanceof MathNode && utils.contains(["mrow", "mtable"], expression[0].type)) {
              wrapper = expression[0];
            } else {
              wrapper = new mathMLTree.MathNode("mrow", expression);
            }
            const annotation = new mathMLTree.MathNode("annotation", [new mathMLTree.TextNode(texExpression)]);
            annotation.setAttribute("encoding", "application/x-tex");
            const semantics = new mathMLTree.MathNode("semantics", [wrapper, annotation]);
            const math2 = new mathMLTree.MathNode("math", [semantics]);
            math2.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML");
            if (isDisplayMode) {
              math2.setAttribute("display", "block");
            }
            const wrapperClass = forMathmlOnly ? "katex" : "katex-mathml";
            return buildCommon.makeSpan([wrapperClass], [math2]);
          }
          const optionsFromSettings = function(settings) {
            return new src_Options({
              style: settings.displayMode ? src_Style.DISPLAY : src_Style.TEXT,
              maxSize: settings.maxSize,
              minRuleThickness: settings.minRuleThickness
            });
          };
          const displayWrap = function(node, settings) {
            if (settings.displayMode) {
              const classes = ["katex-display"];
              if (settings.leqno) {
                classes.push("leqno");
              }
              if (settings.fleqn) {
                classes.push("fleqn");
              }
              node = buildCommon.makeSpan(classes, [node]);
            }
            return node;
          };
          const buildTree = function(tree, expression, settings) {
            const options = optionsFromSettings(settings);
            let katexNode;
            if (settings.output === "mathml") {
              return buildMathML(tree, expression, options, settings.displayMode, true);
            } else if (settings.output === "html") {
              const htmlNode = buildHTML(tree, options);
              katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
            } else {
              const mathMLNode = buildMathML(tree, expression, options, settings.displayMode, false);
              const htmlNode = buildHTML(tree, options);
              katexNode = buildCommon.makeSpan(["katex"], [mathMLNode, htmlNode]);
            }
            return displayWrap(katexNode, settings);
          };
          const buildHTMLTree = function(tree, expression, settings) {
            const options = optionsFromSettings(settings);
            const htmlNode = buildHTML(tree, options);
            const katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
            return displayWrap(katexNode, settings);
          };
          const stretchyCodePoint = {
            widehat: "^",
            widecheck: "ˇ",
            widetilde: "~",
            utilde: "~",
            overleftarrow: "←",
            underleftarrow: "←",
            xleftarrow: "←",
            overrightarrow: "→",
            underrightarrow: "→",
            xrightarrow: "→",
            underbrace: "⏟",
            overbrace: "⏞",
            overgroup: "⏠",
            undergroup: "⏡",
            overleftrightarrow: "↔",
            underleftrightarrow: "↔",
            xleftrightarrow: "↔",
            Overrightarrow: "⇒",
            xRightarrow: "⇒",
            overleftharpoon: "↼",
            xleftharpoonup: "↼",
            overrightharpoon: "⇀",
            xrightharpoonup: "⇀",
            xLeftarrow: "⇐",
            xLeftrightarrow: "⇔",
            xhookleftarrow: "↩",
            xhookrightarrow: "↪",
            xmapsto: "↦",
            xrightharpoondown: "⇁",
            xleftharpoondown: "↽",
            xrightleftharpoons: "⇌",
            xleftrightharpoons: "⇋",
            xtwoheadleftarrow: "↞",
            xtwoheadrightarrow: "↠",
            xlongequal: "=",
            xtofrom: "⇄",
            xrightleftarrows: "⇄",
            xrightequilibrium: "⇌",
            // Not a perfect match.
            xleftequilibrium: "⇋",
            // None better available.
            "\\cdrightarrow": "→",
            "\\cdleftarrow": "←",
            "\\cdlongequal": "="
          };
          const mathMLnode = function(label) {
            const node = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(stretchyCodePoint[label.replace(/^\\/, "")])]);
            node.setAttribute("stretchy", "true");
            return node;
          };
          const katexImagesData = {
            //   path(s), minWidth, height, align
            overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
            overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
            underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
            underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
            xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
            "\\cdrightarrow": [["rightarrow"], 3, 522, "xMaxYMin"],
            // CD minwwidth2.5pc
            xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
            "\\cdleftarrow": [["leftarrow"], 3, 522, "xMinYMin"],
            Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
            xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
            xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
            overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
            xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
            xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
            overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
            xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
            xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
            xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
            "\\cdlongequal": [["longequal"], 3, 334, "xMinYMin"],
            xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
            xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
            overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
            overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
            underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
            underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
            xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
            xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
            xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
            xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
            xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
            xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
            overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
            underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
            overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
            undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
            xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
            xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
            // The next three arrows are from the mhchem package.
            // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
            // document as \xrightarrow or \xrightleftharpoons. Those have
            // min-length = 1.75em, so we set min-length on these next three to match.
            xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
            xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
            xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
          };
          const groupLength = function(arg) {
            if (arg.type === "ordgroup") {
              return arg.body.length;
            } else {
              return 1;
            }
          };
          const svgSpan = function(group, options) {
            function buildSvgSpan_() {
              let viewBoxWidth = 4e5;
              const label = group.label.slice(1);
              if (utils.contains(["widehat", "widecheck", "widetilde", "utilde"], label)) {
                const grp = group;
                const numChars = groupLength(grp.base);
                let viewBoxHeight;
                let pathName;
                let height2;
                if (numChars > 5) {
                  if (label === "widehat" || label === "widecheck") {
                    viewBoxHeight = 420;
                    viewBoxWidth = 2364;
                    height2 = 0.42;
                    pathName = label + "4";
                  } else {
                    viewBoxHeight = 312;
                    viewBoxWidth = 2340;
                    height2 = 0.34;
                    pathName = "tilde4";
                  }
                } else {
                  const imgIndex = [1, 1, 2, 2, 3, 3][numChars];
                  if (label === "widehat" || label === "widecheck") {
                    viewBoxWidth = [0, 1062, 2364, 2364, 2364][imgIndex];
                    viewBoxHeight = [0, 239, 300, 360, 420][imgIndex];
                    height2 = [0, 0.24, 0.3, 0.3, 0.36, 0.42][imgIndex];
                    pathName = label + imgIndex;
                  } else {
                    viewBoxWidth = [0, 600, 1033, 2339, 2340][imgIndex];
                    viewBoxHeight = [0, 260, 286, 306, 312][imgIndex];
                    height2 = [0, 0.26, 0.286, 0.3, 0.306, 0.34][imgIndex];
                    pathName = "tilde" + imgIndex;
                  }
                }
                const path3 = new PathNode(pathName);
                const svgNode2 = new SvgNode([path3], {
                  "width": "100%",
                  "height": makeEm(height2),
                  "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight,
                  "preserveAspectRatio": "none"
                });
                return {
                  span: buildCommon.makeSvgSpan([], [svgNode2], options),
                  minWidth: 0,
                  height: height2
                };
              } else {
                const spans = [];
                const data = katexImagesData[label];
                const [paths, minWidth2, viewBoxHeight] = data;
                const height2 = viewBoxHeight / 1e3;
                const numSvgChildren = paths.length;
                let widthClasses;
                let aligns;
                if (numSvgChildren === 1) {
                  const align1 = data[3];
                  widthClasses = ["hide-tail"];
                  aligns = [align1];
                } else if (numSvgChildren === 2) {
                  widthClasses = ["halfarrow-left", "halfarrow-right"];
                  aligns = ["xMinYMin", "xMaxYMin"];
                } else if (numSvgChildren === 3) {
                  widthClasses = ["brace-left", "brace-center", "brace-right"];
                  aligns = ["xMinYMin", "xMidYMin", "xMaxYMin"];
                } else {
                  throw new Error("Correct katexImagesData or update code here to support\n                    " + numSvgChildren + " children.");
                }
                for (let i = 0; i < numSvgChildren; i++) {
                  const path3 = new PathNode(paths[i]);
                  const svgNode2 = new SvgNode([path3], {
                    "width": "400em",
                    "height": makeEm(height2),
                    "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight,
                    "preserveAspectRatio": aligns[i] + " slice"
                  });
                  const span2 = buildCommon.makeSvgSpan([widthClasses[i]], [svgNode2], options);
                  if (numSvgChildren === 1) {
                    return {
                      span: span2,
                      minWidth: minWidth2,
                      height: height2
                    };
                  } else {
                    span2.style.height = makeEm(height2);
                    spans.push(span2);
                  }
                }
                return {
                  span: buildCommon.makeSpan(["stretchy"], spans, options),
                  minWidth: minWidth2,
                  height: height2
                };
              }
            }
            const {
              span,
              minWidth,
              height
            } = buildSvgSpan_();
            span.height = height;
            span.style.height = makeEm(height);
            if (minWidth > 0) {
              span.style.minWidth = makeEm(minWidth);
            }
            return span;
          };
          const encloseSpan = function(inner2, label, topPad, bottomPad, options) {
            let img;
            const totalHeight = inner2.height + inner2.depth + topPad + bottomPad;
            if (/fbox|color|angl/.test(label)) {
              img = buildCommon.makeSpan(["stretchy", label], [], options);
              if (label === "fbox") {
                const color2 = options.color && options.getColor();
                if (color2) {
                  img.style.borderColor = color2;
                }
              }
            } else {
              const lines = [];
              if (/^[bx]cancel$/.test(label)) {
                lines.push(new LineNode({
                  "x1": "0",
                  "y1": "0",
                  "x2": "100%",
                  "y2": "100%",
                  "stroke-width": "0.046em"
                }));
              }
              if (/^x?cancel$/.test(label)) {
                lines.push(new LineNode({
                  "x1": "0",
                  "y1": "100%",
                  "x2": "100%",
                  "y2": "0",
                  "stroke-width": "0.046em"
                }));
              }
              const svgNode2 = new SvgNode(lines, {
                "width": "100%",
                "height": makeEm(totalHeight)
              });
              img = buildCommon.makeSvgSpan([], [svgNode2], options);
            }
            img.height = totalHeight;
            img.style.height = makeEm(totalHeight);
            return img;
          };
          var stretchy = {
            encloseSpan,
            mathMLnode,
            svgSpan
          };
          function assertNodeType(node, type) {
            if (!node || node.type !== type) {
              throw new Error("Expected node of type " + type + ", but got " + (node ? "node of type " + node.type : String(node)));
            }
            return node;
          }
          function assertSymbolNodeType(node) {
            const typedNode = checkSymbolNodeType(node);
            if (!typedNode) {
              throw new Error("Expected node of symbol group type, but got " + (node ? "node of type " + node.type : String(node)));
            }
            return typedNode;
          }
          function checkSymbolNodeType(node) {
            if (node && (node.type === "atom" || NON_ATOMS.hasOwnProperty(node.type))) {
              return node;
            }
            return null;
          }
          const htmlBuilder = (grp, options) => {
            let base;
            let group;
            let supSubGroup;
            if (grp && grp.type === "supsub") {
              group = assertNodeType(grp.base, "accent");
              base = group.base;
              grp.base = base;
              supSubGroup = assertSpan(buildGroup(grp, options));
              grp.base = group;
            } else {
              group = assertNodeType(grp, "accent");
              base = group.base;
            }
            const body = buildGroup(base, options.havingCrampedStyle());
            const mustShift = group.isShifty && utils.isCharacterBox(base);
            let skew = 0;
            if (mustShift) {
              const baseChar = utils.getBaseElem(base);
              const baseGroup = buildGroup(baseChar, options.havingCrampedStyle());
              skew = assertSymbolDomNode(baseGroup).skew;
            }
            const accentBelow = group.label === "\\c";
            let clearance = accentBelow ? body.height + body.depth : Math.min(body.height, options.fontMetrics().xHeight);
            let accentBody;
            if (!group.isStretchy) {
              let accent2;
              let width;
              if (group.label === "\\vec") {
                accent2 = buildCommon.staticSvg("vec", options);
                width = buildCommon.svgData.vec[1];
              } else {
                accent2 = buildCommon.makeOrd({
                  mode: group.mode,
                  text: group.label
                }, options, "textord");
                accent2 = assertSymbolDomNode(accent2);
                accent2.italic = 0;
                width = accent2.width;
                if (accentBelow) {
                  clearance += accent2.depth;
                }
              }
              accentBody = buildCommon.makeSpan(["accent-body"], [accent2]);
              const accentFull = group.label === "\\textcircled";
              if (accentFull) {
                accentBody.classes.push("accent-full");
                clearance = body.height;
              }
              let left = skew;
              if (!accentFull) {
                left -= width / 2;
              }
              accentBody.style.left = makeEm(left);
              if (group.label === "\\textcircled") {
                accentBody.style.top = ".2em";
              }
              accentBody = buildCommon.makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: body
                }, {
                  type: "kern",
                  size: -clearance
                }, {
                  type: "elem",
                  elem: accentBody
                }]
              }, options);
            } else {
              accentBody = stretchy.svgSpan(group, options);
              accentBody = buildCommon.makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: body
                }, {
                  type: "elem",
                  elem: accentBody,
                  wrapperClasses: ["svg-align"],
                  wrapperStyle: skew > 0 ? {
                    width: "calc(100% - " + makeEm(2 * skew) + ")",
                    marginLeft: makeEm(2 * skew)
                  } : void 0
                }]
              }, options);
            }
            const accentWrap = buildCommon.makeSpan(["mord", "accent"], [accentBody], options);
            if (supSubGroup) {
              supSubGroup.children[0] = accentWrap;
              supSubGroup.height = Math.max(accentWrap.height, supSubGroup.height);
              supSubGroup.classes[0] = "mord";
              return supSubGroup;
            } else {
              return accentWrap;
            }
          };
          const mathmlBuilder = (group, options) => {
            const accentNode = group.isStretchy ? stretchy.mathMLnode(group.label) : new mathMLTree.MathNode("mo", [makeText(group.label, group.mode)]);
            const node = new mathMLTree.MathNode("mover", [buildMathML_buildGroup(group.base, options), accentNode]);
            node.setAttribute("accent", "true");
            return node;
          };
          const NON_STRETCHY_ACCENT_REGEX = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map((accent2) => "\\" + accent2).join("|"));
          defineFunction({
            type: "accent",
            names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
            props: {
              numArgs: 1
            },
            handler: (context, args) => {
              const base = normalizeArgument(args[0]);
              const isStretchy = !NON_STRETCHY_ACCENT_REGEX.test(context.funcName);
              const isShifty = !isStretchy || context.funcName === "\\widehat" || context.funcName === "\\widetilde" || context.funcName === "\\widecheck";
              return {
                type: "accent",
                mode: context.parser.mode,
                label: context.funcName,
                isStretchy,
                isShifty,
                base
              };
            },
            htmlBuilder,
            mathmlBuilder
          });
          defineFunction({
            type: "accent",
            names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\c", "\\r", "\\H", "\\v", "\\textcircled"],
            props: {
              numArgs: 1,
              allowedInText: true,
              allowedInMath: true,
              // unless in strict mode
              argTypes: ["primitive"]
            },
            handler: (context, args) => {
              const base = args[0];
              let mode = context.parser.mode;
              if (mode === "math") {
                context.parser.settings.reportNonstrict("mathVsTextAccents", "LaTeX's accent " + context.funcName + " works only in text mode");
                mode = "text";
              }
              return {
                type: "accent",
                mode,
                label: context.funcName,
                isStretchy: false,
                isShifty: true,
                base
              };
            },
            htmlBuilder,
            mathmlBuilder
          });
          defineFunction({
            type: "accentUnder",
            names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
            props: {
              numArgs: 1
            },
            handler: (_ref, args) => {
              let {
                parser,
                funcName
              } = _ref;
              const base = args[0];
              return {
                type: "accentUnder",
                mode: parser.mode,
                label: funcName,
                base
              };
            },
            htmlBuilder: (group, options) => {
              const innerGroup = buildGroup(group.base, options);
              const accentBody = stretchy.svgSpan(group, options);
              const kern = group.label === "\\utilde" ? 0.12 : 0;
              const vlist = buildCommon.makeVList({
                positionType: "top",
                positionData: innerGroup.height,
                children: [{
                  type: "elem",
                  elem: accentBody,
                  wrapperClasses: ["svg-align"]
                }, {
                  type: "kern",
                  size: kern
                }, {
                  type: "elem",
                  elem: innerGroup
                }]
              }, options);
              return buildCommon.makeSpan(["mord", "accentunder"], [vlist], options);
            },
            mathmlBuilder: (group, options) => {
              const accentNode = stretchy.mathMLnode(group.label);
              const node = new mathMLTree.MathNode("munder", [buildMathML_buildGroup(group.base, options), accentNode]);
              node.setAttribute("accentunder", "true");
              return node;
            }
          });
          const paddedNode = (group) => {
            const node = new mathMLTree.MathNode("mpadded", group ? [group] : []);
            node.setAttribute("width", "+0.6em");
            node.setAttribute("lspace", "0.3em");
            return node;
          };
          defineFunction({
            type: "xArrow",
            names: [
              "\\xleftarrow",
              "\\xrightarrow",
              "\\xLeftarrow",
              "\\xRightarrow",
              "\\xleftrightarrow",
              "\\xLeftrightarrow",
              "\\xhookleftarrow",
              "\\xhookrightarrow",
              "\\xmapsto",
              "\\xrightharpoondown",
              "\\xrightharpoonup",
              "\\xleftharpoondown",
              "\\xleftharpoonup",
              "\\xrightleftharpoons",
              "\\xleftrightharpoons",
              "\\xlongequal",
              "\\xtwoheadrightarrow",
              "\\xtwoheadleftarrow",
              "\\xtofrom",
              // The next 3 functions are here to support the mhchem extension.
              // Direct use of these functions is discouraged and may break someday.
              "\\xrightleftarrows",
              "\\xrightequilibrium",
              "\\xleftequilibrium",
              // The next 3 functions are here only to support the {CD} environment.
              "\\\\cdrightarrow",
              "\\\\cdleftarrow",
              "\\\\cdlongequal"
            ],
            props: {
              numArgs: 1,
              numOptionalArgs: 1
            },
            handler(_ref, args, optArgs) {
              let {
                parser,
                funcName
              } = _ref;
              return {
                type: "xArrow",
                mode: parser.mode,
                label: funcName,
                body: args[0],
                below: optArgs[0]
              };
            },
            // Flow is unable to correctly infer the type of `group`, even though it's
            // unambiguously determined from the passed-in `type` above.
            htmlBuilder(group, options) {
              const style = options.style;
              let newOptions = options.havingStyle(style.sup());
              const upperGroup = buildCommon.wrapFragment(buildGroup(group.body, newOptions, options), options);
              const arrowPrefix = group.label.slice(0, 2) === "\\x" ? "x" : "cd";
              upperGroup.classes.push(arrowPrefix + "-arrow-pad");
              let lowerGroup;
              if (group.below) {
                newOptions = options.havingStyle(style.sub());
                lowerGroup = buildCommon.wrapFragment(buildGroup(group.below, newOptions, options), options);
                lowerGroup.classes.push(arrowPrefix + "-arrow-pad");
              }
              const arrowBody = stretchy.svgSpan(group, options);
              const arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height;
              let upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111;
              if (upperGroup.depth > 0.25 || group.label === "\\xleftequilibrium") {
                upperShift -= upperGroup.depth;
              }
              let vlist;
              if (lowerGroup) {
                const lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;
                vlist = buildCommon.makeVList({
                  positionType: "individualShift",
                  children: [{
                    type: "elem",
                    elem: upperGroup,
                    shift: upperShift
                  }, {
                    type: "elem",
                    elem: arrowBody,
                    shift: arrowShift
                  }, {
                    type: "elem",
                    elem: lowerGroup,
                    shift: lowerShift
                  }]
                }, options);
              } else {
                vlist = buildCommon.makeVList({
                  positionType: "individualShift",
                  children: [{
                    type: "elem",
                    elem: upperGroup,
                    shift: upperShift
                  }, {
                    type: "elem",
                    elem: arrowBody,
                    shift: arrowShift
                  }]
                }, options);
              }
              vlist.children[0].children[0].children[1].classes.push("svg-align");
              return buildCommon.makeSpan(["mrel", "x-arrow"], [vlist], options);
            },
            mathmlBuilder(group, options) {
              const arrowNode = stretchy.mathMLnode(group.label);
              arrowNode.setAttribute("minsize", group.label.charAt(0) === "x" ? "1.75em" : "3.0em");
              let node;
              if (group.body) {
                const upperNode = paddedNode(buildMathML_buildGroup(group.body, options));
                if (group.below) {
                  const lowerNode = paddedNode(buildMathML_buildGroup(group.below, options));
                  node = new mathMLTree.MathNode("munderover", [arrowNode, lowerNode, upperNode]);
                } else {
                  node = new mathMLTree.MathNode("mover", [arrowNode, upperNode]);
                }
              } else if (group.below) {
                const lowerNode = paddedNode(buildMathML_buildGroup(group.below, options));
                node = new mathMLTree.MathNode("munder", [arrowNode, lowerNode]);
              } else {
                node = paddedNode();
                node = new mathMLTree.MathNode("mover", [arrowNode, node]);
              }
              return node;
            }
          });
          const mclass_makeSpan = buildCommon.makeSpan;
          function mclass_htmlBuilder(group, options) {
            const elements = buildExpression(group.body, options, true);
            return mclass_makeSpan([group.mclass], elements, options);
          }
          function mclass_mathmlBuilder(group, options) {
            let node;
            const inner2 = buildMathML_buildExpression(group.body, options);
            if (group.mclass === "minner") {
              node = new mathMLTree.MathNode("mpadded", inner2);
            } else if (group.mclass === "mord") {
              if (group.isCharacterBox) {
                node = inner2[0];
                node.type = "mi";
              } else {
                node = new mathMLTree.MathNode("mi", inner2);
              }
            } else {
              if (group.isCharacterBox) {
                node = inner2[0];
                node.type = "mo";
              } else {
                node = new mathMLTree.MathNode("mo", inner2);
              }
              if (group.mclass === "mbin") {
                node.attributes.lspace = "0.22em";
                node.attributes.rspace = "0.22em";
              } else if (group.mclass === "mpunct") {
                node.attributes.lspace = "0em";
                node.attributes.rspace = "0.17em";
              } else if (group.mclass === "mopen" || group.mclass === "mclose") {
                node.attributes.lspace = "0em";
                node.attributes.rspace = "0em";
              } else if (group.mclass === "minner") {
                node.attributes.lspace = "0.0556em";
                node.attributes.width = "+0.1111em";
              }
            }
            return node;
          }
          defineFunction({
            type: "mclass",
            names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
            props: {
              numArgs: 1,
              primitive: true
            },
            handler(_ref, args) {
              let {
                parser,
                funcName
              } = _ref;
              const body = args[0];
              return {
                type: "mclass",
                mode: parser.mode,
                mclass: "m" + funcName.slice(5),
                // TODO(kevinb): don't prefix with 'm'
                body: ordargument(body),
                isCharacterBox: utils.isCharacterBox(body)
              };
            },
            htmlBuilder: mclass_htmlBuilder,
            mathmlBuilder: mclass_mathmlBuilder
          });
          const binrelClass = (arg) => {
            const atom = arg.type === "ordgroup" && arg.body.length ? arg.body[0] : arg;
            if (atom.type === "atom" && (atom.family === "bin" || atom.family === "rel")) {
              return "m" + atom.family;
            } else {
              return "mord";
            }
          };
          defineFunction({
            type: "mclass",
            names: ["\\@binrel"],
            props: {
              numArgs: 2
            },
            handler(_ref2, args) {
              let {
                parser
              } = _ref2;
              return {
                type: "mclass",
                mode: parser.mode,
                mclass: binrelClass(args[0]),
                body: ordargument(args[1]),
                isCharacterBox: utils.isCharacterBox(args[1])
              };
            }
          });
          defineFunction({
            type: "mclass",
            names: ["\\stackrel", "\\overset", "\\underset"],
            props: {
              numArgs: 2
            },
            handler(_ref3, args) {
              let {
                parser,
                funcName
              } = _ref3;
              const baseArg = args[1];
              const shiftedArg = args[0];
              let mclass;
              if (funcName !== "\\stackrel") {
                mclass = binrelClass(baseArg);
              } else {
                mclass = "mrel";
              }
              const baseOp = {
                type: "op",
                mode: baseArg.mode,
                limits: true,
                alwaysHandleSupSub: true,
                parentIsSupSub: false,
                symbol: false,
                suppressBaseShift: funcName !== "\\stackrel",
                body: ordargument(baseArg)
              };
              const supsub = {
                type: "supsub",
                mode: shiftedArg.mode,
                base: baseOp,
                sup: funcName === "\\underset" ? null : shiftedArg,
                sub: funcName === "\\underset" ? shiftedArg : null
              };
              return {
                type: "mclass",
                mode: parser.mode,
                mclass,
                body: [supsub],
                isCharacterBox: utils.isCharacterBox(supsub)
              };
            },
            htmlBuilder: mclass_htmlBuilder,
            mathmlBuilder: mclass_mathmlBuilder
          });
          defineFunction({
            type: "pmb",
            names: ["\\pmb"],
            props: {
              numArgs: 1,
              allowedInText: true
            },
            handler(_ref, args) {
              let {
                parser
              } = _ref;
              return {
                type: "pmb",
                mode: parser.mode,
                mclass: binrelClass(args[0]),
                body: ordargument(args[0])
              };
            },
            htmlBuilder(group, options) {
              const elements = buildExpression(group.body, options, true);
              const node = buildCommon.makeSpan([group.mclass], elements, options);
              node.style.textShadow = "0.02em 0.01em 0.04px";
              return node;
            },
            mathmlBuilder(group, style) {
              const inner2 = buildMathML_buildExpression(group.body, style);
              const node = new mathMLTree.MathNode("mstyle", inner2);
              node.setAttribute("style", "text-shadow: 0.02em 0.01em 0.04px");
              return node;
            }
          });
          const cdArrowFunctionName = {
            ">": "\\\\cdrightarrow",
            "<": "\\\\cdleftarrow",
            "=": "\\\\cdlongequal",
            "A": "\\uparrow",
            "V": "\\downarrow",
            "|": "\\Vert",
            ".": "no arrow"
          };
          const newCell = () => {
            return {
              type: "styling",
              body: [],
              mode: "math",
              style: "display"
            };
          };
          const isStartOfArrow = (node) => {
            return node.type === "textord" && node.text === "@";
          };
          const isLabelEnd = (node, endChar) => {
            return (node.type === "mathord" || node.type === "atom") && node.text === endChar;
          };
          function cdArrow(arrowChar, labels, parser) {
            const funcName = cdArrowFunctionName[arrowChar];
            switch (funcName) {
              case "\\\\cdrightarrow":
              case "\\\\cdleftarrow":
                return parser.callFunction(funcName, [labels[0]], [labels[1]]);
              case "\\uparrow":
              case "\\downarrow": {
                const leftLabel = parser.callFunction("\\\\cdleft", [labels[0]], []);
                const bareArrow = {
                  type: "atom",
                  text: funcName,
                  mode: "math",
                  family: "rel"
                };
                const sizedArrow = parser.callFunction("\\Big", [bareArrow], []);
                const rightLabel = parser.callFunction("\\\\cdright", [labels[1]], []);
                const arrowGroup = {
                  type: "ordgroup",
                  mode: "math",
                  body: [leftLabel, sizedArrow, rightLabel]
                };
                return parser.callFunction("\\\\cdparent", [arrowGroup], []);
              }
              case "\\\\cdlongequal":
                return parser.callFunction("\\\\cdlongequal", [], []);
              case "\\Vert": {
                const arrow = {
                  type: "textord",
                  text: "\\Vert",
                  mode: "math"
                };
                return parser.callFunction("\\Big", [arrow], []);
              }
              default:
                return {
                  type: "textord",
                  text: " ",
                  mode: "math"
                };
            }
          }
          function parseCD(parser) {
            const parsedRows = [];
            parser.gullet.beginGroup();
            parser.gullet.macros.set("\\cr", "\\\\\\relax");
            parser.gullet.beginGroup();
            while (true) {
              parsedRows.push(parser.parseExpression(false, "\\\\"));
              parser.gullet.endGroup();
              parser.gullet.beginGroup();
              const next = parser.fetch().text;
              if (next === "&" || next === "\\\\") {
                parser.consume();
              } else if (next === "\\end") {
                if (parsedRows[parsedRows.length - 1].length === 0) {
                  parsedRows.pop();
                }
                break;
              } else {
                throw new src_ParseError("Expected \\\\ or \\cr or \\end", parser.nextToken);
              }
            }
            let row = [];
            const body = [row];
            for (let i = 0; i < parsedRows.length; i++) {
              const rowNodes = parsedRows[i];
              let cell = newCell();
              for (let j = 0; j < rowNodes.length; j++) {
                if (!isStartOfArrow(rowNodes[j])) {
                  cell.body.push(rowNodes[j]);
                } else {
                  row.push(cell);
                  j += 1;
                  const arrowChar = assertSymbolNodeType(rowNodes[j]).text;
                  const labels = new Array(2);
                  labels[0] = {
                    type: "ordgroup",
                    mode: "math",
                    body: []
                  };
                  labels[1] = {
                    type: "ordgroup",
                    mode: "math",
                    body: []
                  };
                  if ("=|.".indexOf(arrowChar) > -1)
                    ;
                  else if ("<>AV".indexOf(arrowChar) > -1) {
                    for (let labelNum = 0; labelNum < 2; labelNum++) {
                      let inLabel = true;
                      for (let k = j + 1; k < rowNodes.length; k++) {
                        if (isLabelEnd(rowNodes[k], arrowChar)) {
                          inLabel = false;
                          j = k;
                          break;
                        }
                        if (isStartOfArrow(rowNodes[k])) {
                          throw new src_ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[k]);
                        }
                        labels[labelNum].body.push(rowNodes[k]);
                      }
                      if (inLabel) {
                        throw new src_ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[j]);
                      }
                    }
                  } else {
                    throw new src_ParseError('Expected one of "<>AV=|." after @', rowNodes[j]);
                  }
                  const arrow = cdArrow(arrowChar, labels, parser);
                  const wrappedArrow = {
                    type: "styling",
                    body: [arrow],
                    mode: "math",
                    style: "display"
                    // CD is always displaystyle.
                  };
                  row.push(wrappedArrow);
                  cell = newCell();
                }
              }
              if (i % 2 === 0) {
                row.push(cell);
              } else {
                row.shift();
              }
              row = [];
              body.push(row);
            }
            parser.gullet.endGroup();
            parser.gullet.endGroup();
            const cols = new Array(body[0].length).fill({
              type: "align",
              align: "c",
              pregap: 0.25,
              // CD package sets \enskip between columns.
              postgap: 0.25
              // So pre and post each get half an \enskip, i.e. 0.25em.
            });
            return {
              type: "array",
              mode: "math",
              body,
              arraystretch: 1,
              addJot: true,
              rowGaps: [null],
              cols,
              colSeparationType: "CD",
              hLinesBeforeRow: new Array(body.length + 1).fill([])
            };
          }
          defineFunction({
            type: "cdlabel",
            names: ["\\\\cdleft", "\\\\cdright"],
            props: {
              numArgs: 1
            },
            handler(_ref, args) {
              let {
                parser,
                funcName
              } = _ref;
              return {
                type: "cdlabel",
                mode: parser.mode,
                side: funcName.slice(4),
                label: args[0]
              };
            },
            htmlBuilder(group, options) {
              const newOptions = options.havingStyle(options.style.sup());
              const label = buildCommon.wrapFragment(buildGroup(group.label, newOptions, options), options);
              label.classes.push("cd-label-" + group.side);
              label.style.bottom = makeEm(0.8 - label.depth);
              label.height = 0;
              label.depth = 0;
              return label;
            },
            mathmlBuilder(group, options) {
              let label = new mathMLTree.MathNode("mrow", [buildMathML_buildGroup(group.label, options)]);
              label = new mathMLTree.MathNode("mpadded", [label]);
              label.setAttribute("width", "0");
              if (group.side === "left") {
                label.setAttribute("lspace", "-1width");
              }
              label.setAttribute("voffset", "0.7em");
              label = new mathMLTree.MathNode("mstyle", [label]);
              label.setAttribute("displaystyle", "false");
              label.setAttribute("scriptlevel", "1");
              return label;
            }
          });
          defineFunction({
            type: "cdlabelparent",
            names: ["\\\\cdparent"],
            props: {
              numArgs: 1
            },
            handler(_ref2, args) {
              let {
                parser
              } = _ref2;
              return {
                type: "cdlabelparent",
                mode: parser.mode,
                fragment: args[0]
              };
            },
            htmlBuilder(group, options) {
              const parent = buildCommon.wrapFragment(buildGroup(group.fragment, options), options);
              parent.classes.push("cd-vert-arrow");
              return parent;
            },
            mathmlBuilder(group, options) {
              return new mathMLTree.MathNode("mrow", [buildMathML_buildGroup(group.fragment, options)]);
            }
          });
          defineFunction({
            type: "textord",
            names: ["\\@char"],
            props: {
              numArgs: 1,
              allowedInText: true
            },
            handler(_ref, args) {
              let {
                parser
              } = _ref;
              const arg = assertNodeType(args[0], "ordgroup");
              const group = arg.body;
              let number = "";
              for (let i = 0; i < group.length; i++) {
                const node = assertNodeType(group[i], "textord");
                number += node.text;
              }
              let code = parseInt(number);
              let text;
              if (isNaN(code)) {
                throw new src_ParseError("\\@char has non-numeric argument " + number);
              } else if (code < 0 || code >= 1114111) {
                throw new src_ParseError("\\@char with invalid code point " + number);
              } else if (code <= 65535) {
                text = String.fromCharCode(code);
              } else {
                code -= 65536;
                text = String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
              }
              return {
                type: "textord",
                mode: parser.mode,
                text
              };
            }
          });
          const color_htmlBuilder = (group, options) => {
            const elements = buildExpression(group.body, options.withColor(group.color), false);
            return buildCommon.makeFragment(elements);
          };
          const color_mathmlBuilder = (group, options) => {
            const inner2 = buildMathML_buildExpression(group.body, options.withColor(group.color));
            const node = new mathMLTree.MathNode("mstyle", inner2);
            node.setAttribute("mathcolor", group.color);
            return node;
          };
          defineFunction({
            type: "color",
            names: ["\\textcolor"],
            props: {
              numArgs: 2,
              allowedInText: true,
              argTypes: ["color", "original"]
            },
            handler(_ref, args) {
              let {
                parser
              } = _ref;
              const color2 = assertNodeType(args[0], "color-token").color;
              const body = args[1];
              return {
                type: "color",
                mode: parser.mode,
                color: color2,
                body: ordargument(body)
              };
            },
            htmlBuilder: color_htmlBuilder,
            mathmlBuilder: color_mathmlBuilder
          });
          defineFunction({
            type: "color",
            names: ["\\color"],
            props: {
              numArgs: 1,
              allowedInText: true,
              argTypes: ["color"]
            },
            handler(_ref2, args) {
              let {
                parser,
                breakOnTokenText
              } = _ref2;
              const color2 = assertNodeType(args[0], "color-token").color;
              parser.gullet.macros.set("\\current@color", color2);
              const body = parser.parseExpression(true, breakOnTokenText);
              return {
                type: "color",
                mode: parser.mode,
                color: color2,
                body
              };
            },
            htmlBuilder: color_htmlBuilder,
            mathmlBuilder: color_mathmlBuilder
          });
          defineFunction({
            type: "cr",
            names: ["\\\\"],
            props: {
              numArgs: 0,
              numOptionalArgs: 0,
              allowedInText: true
            },
            handler(_ref, args, optArgs) {
              let {
                parser
              } = _ref;
              const size = parser.gullet.future().text === "[" ? parser.parseSizeGroup(true) : null;
              const newLine = !parser.settings.displayMode || !parser.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline does nothing in display mode");
              return {
                type: "cr",
                mode: parser.mode,
                newLine,
                size: size && assertNodeType(size, "size").value
              };
            },
            // The following builders are called only at the top level,
            // not within tabular/array environments.
            htmlBuilder(group, options) {
              const span = buildCommon.makeSpan(["mspace"], [], options);
              if (group.newLine) {
                span.classes.push("newline");
                if (group.size) {
                  span.style.marginTop = makeEm(calculateSize(group.size, options));
                }
              }
              return span;
            },
            mathmlBuilder(group, options) {
              const node = new mathMLTree.MathNode("mspace");
              if (group.newLine) {
                node.setAttribute("linebreak", "newline");
                if (group.size) {
                  node.setAttribute("height", makeEm(calculateSize(group.size, options)));
                }
              }
              return node;
            }
          });
          const globalMap = {
            "\\global": "\\global",
            "\\long": "\\\\globallong",
            "\\\\globallong": "\\\\globallong",
            "\\def": "\\gdef",
            "\\gdef": "\\gdef",
            "\\edef": "\\xdef",
            "\\xdef": "\\xdef",
            "\\let": "\\\\globallet",
            "\\futurelet": "\\\\globalfuture"
          };
          const checkControlSequence = (tok) => {
            const name2 = tok.text;
            if (/^(?:[\\{}$&#^_]|EOF)$/.test(name2)) {
              throw new src_ParseError("Expected a control sequence", tok);
            }
            return name2;
          };
          const getRHS = (parser) => {
            let tok = parser.gullet.popToken();
            if (tok.text === "=") {
              tok = parser.gullet.popToken();
              if (tok.text === " ") {
                tok = parser.gullet.popToken();
              }
            }
            return tok;
          };
          const letCommand = (parser, name2, tok, global2) => {
            let macro = parser.gullet.macros.get(tok.text);
            if (macro == null) {
              tok.noexpand = true;
              macro = {
                tokens: [tok],
                numArgs: 0,
                // reproduce the same behavior in expansion
                unexpandable: !parser.gullet.isExpandable(tok.text)
              };
            }
            parser.gullet.macros.set(name2, macro, global2);
          };
          defineFunction({
            type: "internal",
            names: [
              "\\global",
              "\\long",
              "\\\\globallong"
              // can’t be entered directly
            ],
            props: {
              numArgs: 0,
              allowedInText: true
            },
            handler(_ref) {
              let {
                parser,
                funcName
              } = _ref;
              parser.consumeSpaces();
              const token = parser.fetch();
              if (globalMap[token.text]) {
                if (funcName === "\\global" || funcName === "\\\\globallong") {
                  token.text = globalMap[token.text];
                }
                return assertNodeType(parser.parseFunction(), "internal");
              }
              throw new src_ParseError("Invalid token after macro prefix", token);
            }
          });
          defineFunction({
            type: "internal",
            names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
            props: {
              numArgs: 0,
              allowedInText: true,
              primitive: true
            },
            handler(_ref2) {
              let {
                parser,
                funcName
              } = _ref2;
              let tok = parser.gullet.popToken();
              const name2 = tok.text;
              if (/^(?:[\\{}$&#^_]|EOF)$/.test(name2)) {
                throw new src_ParseError("Expected a control sequence", tok);
              }
              let numArgs = 0;
              let insert;
              const delimiters2 = [[]];
              while (parser.gullet.future().text !== "{") {
                tok = parser.gullet.popToken();
                if (tok.text === "#") {
                  if (parser.gullet.future().text === "{") {
                    insert = parser.gullet.future();
                    delimiters2[numArgs].push("{");
                    break;
                  }
                  tok = parser.gullet.popToken();
                  if (!/^[1-9]$/.test(tok.text)) {
                    throw new src_ParseError('Invalid argument number "' + tok.text + '"');
                  }
                  if (parseInt(tok.text) !== numArgs + 1) {
                    throw new src_ParseError('Argument number "' + tok.text + '" out of order');
                  }
                  numArgs++;
                  delimiters2.push([]);
                } else if (tok.text === "EOF") {
                  throw new src_ParseError("Expected a macro definition");
                } else {
                  delimiters2[numArgs].push(tok.text);
                }
              }
              let {
                tokens
              } = parser.gullet.consumeArg();
              if (insert) {
                tokens.unshift(insert);
              }
              if (funcName === "\\edef" || funcName === "\\xdef") {
                tokens = parser.gullet.expandTokens(tokens);
                tokens.reverse();
              }
              parser.gullet.macros.set(name2, {
                tokens,
                numArgs,
                delimiters: delimiters2
              }, funcName === globalMap[funcName]);
              return {
                type: "internal",
                mode: parser.mode
              };
            }
          });
          defineFunction({
            type: "internal",
            names: [
              "\\let",
              "\\\\globallet"
              // can’t be entered directly
            ],
            props: {
              numArgs: 0,
              allowedInText: true,
              primitive: true
            },
            handler(_ref3) {
              let {
                parser,
                funcName
              } = _ref3;
              const name2 = checkControlSequence(parser.gullet.popToken());
              parser.gullet.consumeSpaces();
              const tok = getRHS(parser);
              letCommand(parser, name2, tok, funcName === "\\\\globallet");
              return {
                type: "internal",
                mode: parser.mode
              };
            }
          });
          defineFunction({
            type: "internal",
            names: [
              "\\futurelet",
              "\\\\globalfuture"
              // can’t be entered directly
            ],
            props: {
              numArgs: 0,
              allowedInText: true,
              primitive: true
            },
            handler(_ref4) {
              let {
                parser,
                funcName
              } = _ref4;
              const name2 = checkControlSequence(parser.gullet.popToken());
              const middle = parser.gullet.popToken();
              const tok = parser.gullet.popToken();
              letCommand(parser, name2, tok, funcName === "\\\\globalfuture");
              parser.gullet.pushToken(tok);
              parser.gullet.pushToken(middle);
              return {
                type: "internal",
                mode: parser.mode
              };
            }
          });
          const getMetrics = function(symbol, font, mode) {
            const replace = src_symbols.math[symbol] && src_symbols.math[symbol].replace;
            const metrics = getCharacterMetrics(replace || symbol, font, mode);
            if (!metrics) {
              throw new Error("Unsupported symbol " + symbol + " and font size " + font + ".");
            }
            return metrics;
          };
          const styleWrap = function(delim, toStyle, options, classes) {
            const newOptions = options.havingBaseStyle(toStyle);
            const span = buildCommon.makeSpan(classes.concat(newOptions.sizingClasses(options)), [delim], options);
            const delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
            span.height *= delimSizeMultiplier;
            span.depth *= delimSizeMultiplier;
            span.maxFontSize = newOptions.sizeMultiplier;
            return span;
          };
          const centerSpan = function(span, options, style) {
            const newOptions = options.havingBaseStyle(style);
            const shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;
            span.classes.push("delimcenter");
            span.style.top = makeEm(shift);
            span.height -= shift;
            span.depth += shift;
          };
          const makeSmallDelim = function(delim, style, center, options, mode, classes) {
            const text = buildCommon.makeSymbol(delim, "Main-Regular", mode, options);
            const span = styleWrap(text, style, options, classes);
            if (center) {
              centerSpan(span, options, style);
            }
            return span;
          };
          const mathrmSize = function(value, size, mode, options) {
            return buildCommon.makeSymbol(value, "Size" + size + "-Regular", mode, options);
          };
          const makeLargeDelim = function(delim, size, center, options, mode, classes) {
            const inner2 = mathrmSize(delim, size, mode, options);
            const span = styleWrap(buildCommon.makeSpan(["delimsizing", "size" + size], [inner2], options), src_Style.TEXT, options, classes);
            if (center) {
              centerSpan(span, options, src_Style.TEXT);
            }
            return span;
          };
          const makeGlyphSpan = function(symbol, font, mode) {
            let sizeClass;
            if (font === "Size1-Regular") {
              sizeClass = "delim-size1";
            } else {
              sizeClass = "delim-size4";
            }
            const corner = buildCommon.makeSpan(["delimsizinginner", sizeClass], [buildCommon.makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]);
            return {
              type: "elem",
              elem: corner
            };
          };
          const makeInner = function(ch, height, options) {
            const width = fontMetricsData["Size4-Regular"][ch.charCodeAt(0)] ? fontMetricsData["Size4-Regular"][ch.charCodeAt(0)][4] : fontMetricsData["Size1-Regular"][ch.charCodeAt(0)][4];
            const path3 = new PathNode("inner", innerPath(ch, Math.round(1e3 * height)));
            const svgNode2 = new SvgNode([path3], {
              "width": makeEm(width),
              "height": makeEm(height),
              // Override CSS rule `.katex svg { width: 100% }`
              "style": "width:" + makeEm(width),
              "viewBox": "0 0 " + 1e3 * width + " " + Math.round(1e3 * height),
              "preserveAspectRatio": "xMinYMin"
            });
            const span = buildCommon.makeSvgSpan([], [svgNode2], options);
            span.height = height;
            span.style.height = makeEm(height);
            span.style.width = makeEm(width);
            return {
              type: "elem",
              elem: span
            };
          };
          const lapInEms = 8e-3;
          const lap = {
            type: "kern",
            size: -1 * lapInEms
          };
          const verts = ["|", "\\lvert", "\\rvert", "\\vert"];
          const doubleVerts = ["\\|", "\\lVert", "\\rVert", "\\Vert"];
          const makeStackedDelim = function(delim, heightTotal, center, options, mode, classes) {
            let top;
            let middle;
            let repeat;
            let bottom;
            let svgLabel = "";
            let viewBoxWidth = 0;
            top = repeat = bottom = delim;
            middle = null;
            let font = "Size1-Regular";
            if (delim === "\\uparrow") {
              repeat = bottom = "⏐";
            } else if (delim === "\\Uparrow") {
              repeat = bottom = "‖";
            } else if (delim === "\\downarrow") {
              top = repeat = "⏐";
            } else if (delim === "\\Downarrow") {
              top = repeat = "‖";
            } else if (delim === "\\updownarrow") {
              top = "\\uparrow";
              repeat = "⏐";
              bottom = "\\downarrow";
            } else if (delim === "\\Updownarrow") {
              top = "\\Uparrow";
              repeat = "‖";
              bottom = "\\Downarrow";
            } else if (utils.contains(verts, delim)) {
              repeat = "∣";
              svgLabel = "vert";
              viewBoxWidth = 333;
            } else if (utils.contains(doubleVerts, delim)) {
              repeat = "∥";
              svgLabel = "doublevert";
              viewBoxWidth = 556;
            } else if (delim === "[" || delim === "\\lbrack") {
              top = "⎡";
              repeat = "⎢";
              bottom = "⎣";
              font = "Size4-Regular";
              svgLabel = "lbrack";
              viewBoxWidth = 667;
            } else if (delim === "]" || delim === "\\rbrack") {
              top = "⎤";
              repeat = "⎥";
              bottom = "⎦";
              font = "Size4-Regular";
              svgLabel = "rbrack";
              viewBoxWidth = 667;
            } else if (delim === "\\lfloor" || delim === "⌊") {
              repeat = top = "⎢";
              bottom = "⎣";
              font = "Size4-Regular";
              svgLabel = "lfloor";
              viewBoxWidth = 667;
            } else if (delim === "\\lceil" || delim === "⌈") {
              top = "⎡";
              repeat = bottom = "⎢";
              font = "Size4-Regular";
              svgLabel = "lceil";
              viewBoxWidth = 667;
            } else if (delim === "\\rfloor" || delim === "⌋") {
              repeat = top = "⎥";
              bottom = "⎦";
              font = "Size4-Regular";
              svgLabel = "rfloor";
              viewBoxWidth = 667;
            } else if (delim === "\\rceil" || delim === "⌉") {
              top = "⎤";
              repeat = bottom = "⎥";
              font = "Size4-Regular";
              svgLabel = "rceil";
              viewBoxWidth = 667;
            } else if (delim === "(" || delim === "\\lparen") {
              top = "⎛";
              repeat = "⎜";
              bottom = "⎝";
              font = "Size4-Regular";
              svgLabel = "lparen";
              viewBoxWidth = 875;
            } else if (delim === ")" || delim === "\\rparen") {
              top = "⎞";
              repeat = "⎟";
              bottom = "⎠";
              font = "Size4-Regular";
              svgLabel = "rparen";
              viewBoxWidth = 875;
            } else if (delim === "\\{" || delim === "\\lbrace") {
              top = "⎧";
              middle = "⎨";
              bottom = "⎩";
              repeat = "⎪";
              font = "Size4-Regular";
            } else if (delim === "\\}" || delim === "\\rbrace") {
              top = "⎫";
              middle = "⎬";
              bottom = "⎭";
              repeat = "⎪";
              font = "Size4-Regular";
            } else if (delim === "\\lgroup" || delim === "⟮") {
              top = "⎧";
              bottom = "⎩";
              repeat = "⎪";
              font = "Size4-Regular";
            } else if (delim === "\\rgroup" || delim === "⟯") {
              top = "⎫";
              bottom = "⎭";
              repeat = "⎪";
              font = "Size4-Regular";
            } else if (delim === "\\lmoustache" || delim === "⎰") {
              top = "⎧";
              bottom = "⎭";
              repeat = "⎪";
              font = "Size4-Regular";
            } else if (delim === "\\rmoustache" || delim === "⎱") {
              top = "⎫";
              bottom = "⎩";
              repeat = "⎪";
              font = "Size4-Regular";
            }
            const topMetrics = getMetrics(top, font, mode);
            const topHeightTotal = topMetrics.height + topMetrics.depth;
            const repeatMetrics = getMetrics(repeat, font, mode);
            const repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
            const bottomMetrics = getMetrics(bottom, font, mode);
            const bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
            let middleHeightTotal = 0;
            let middleFactor = 1;
            if (middle !== null) {
              const middleMetrics = getMetrics(middle, font, mode);
              middleHeightTotal = middleMetrics.height + middleMetrics.depth;
              middleFactor = 2;
            }
            const minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal;
            const repeatCount = Math.max(0, Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal)));
            const realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal;
            let axisHeight = options.fontMetrics().axisHeight;
            if (center) {
              axisHeight *= options.sizeMultiplier;
            }
            const depth = realHeightTotal / 2 - axisHeight;
            const stack = [];
            if (svgLabel.length > 0) {
              const midHeight = realHeightTotal - topHeightTotal - bottomHeightTotal;
              const viewBoxHeight = Math.round(realHeightTotal * 1e3);
              const pathStr = tallDelim(svgLabel, Math.round(midHeight * 1e3));
              const path3 = new PathNode(svgLabel, pathStr);
              const width = (viewBoxWidth / 1e3).toFixed(3) + "em";
              const height = (viewBoxHeight / 1e3).toFixed(3) + "em";
              const svg = new SvgNode([path3], {
                "width": width,
                "height": height,
                "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight
              });
              const wrapper = buildCommon.makeSvgSpan([], [svg], options);
              wrapper.height = viewBoxHeight / 1e3;
              wrapper.style.width = width;
              wrapper.style.height = height;
              stack.push({
                type: "elem",
                elem: wrapper
              });
            } else {
              stack.push(makeGlyphSpan(bottom, font, mode));
              stack.push(lap);
              if (middle === null) {
                const innerHeight = realHeightTotal - topHeightTotal - bottomHeightTotal + 2 * lapInEms;
                stack.push(makeInner(repeat, innerHeight, options));
              } else {
                const innerHeight = (realHeightTotal - topHeightTotal - bottomHeightTotal - middleHeightTotal) / 2 + 2 * lapInEms;
                stack.push(makeInner(repeat, innerHeight, options));
                stack.push(lap);
                stack.push(makeGlyphSpan(middle, font, mode));
                stack.push(lap);
                stack.push(makeInner(repeat, innerHeight, options));
              }
              stack.push(lap);
              stack.push(makeGlyphSpan(top, font, mode));
            }
            const newOptions = options.havingBaseStyle(src_Style.TEXT);
            const inner2 = buildCommon.makeVList({
              positionType: "bottom",
              positionData: depth,
              children: stack
            }, newOptions);
            return styleWrap(buildCommon.makeSpan(["delimsizing", "mult"], [inner2], newOptions), src_Style.TEXT, options, classes);
          };
          const vbPad = 80;
          const emPad = 0.08;
          const sqrtSvg = function(sqrtName, height, viewBoxHeight, extraVinculum, options) {
            const path3 = sqrtPath(sqrtName, extraVinculum, viewBoxHeight);
            const pathNode = new PathNode(sqrtName, path3);
            const svg = new SvgNode([pathNode], {
              // Note: 1000:1 ratio of viewBox to document em width.
              "width": "400em",
              "height": makeEm(height),
              "viewBox": "0 0 400000 " + viewBoxHeight,
              "preserveAspectRatio": "xMinYMin slice"
            });
            return buildCommon.makeSvgSpan(["hide-tail"], [svg], options);
          };
          const makeSqrtImage = function(height, options) {
            const newOptions = options.havingBaseSizing();
            const delim = traverseSequence("\\surd", height * newOptions.sizeMultiplier, stackLargeDelimiterSequence, newOptions);
            let sizeMultiplier = newOptions.sizeMultiplier;
            const extraVinculum = Math.max(0, options.minRuleThickness - options.fontMetrics().sqrtRuleThickness);
            let span;
            let spanHeight = 0;
            let texHeight = 0;
            let viewBoxHeight = 0;
            let advanceWidth;
            if (delim.type === "small") {
              viewBoxHeight = 1e3 + 1e3 * extraVinculum + vbPad;
              if (height < 1) {
                sizeMultiplier = 1;
              } else if (height < 1.4) {
                sizeMultiplier = 0.7;
              }
              spanHeight = (1 + extraVinculum + emPad) / sizeMultiplier;
              texHeight = (1 + extraVinculum) / sizeMultiplier;
              span = sqrtSvg("sqrtMain", spanHeight, viewBoxHeight, extraVinculum, options);
              span.style.minWidth = "0.853em";
              advanceWidth = 0.833 / sizeMultiplier;
            } else if (delim.type === "large") {
              viewBoxHeight = (1e3 + vbPad) * sizeToMaxHeight[delim.size];
              texHeight = (sizeToMaxHeight[delim.size] + extraVinculum) / sizeMultiplier;
              spanHeight = (sizeToMaxHeight[delim.size] + extraVinculum + emPad) / sizeMultiplier;
              span = sqrtSvg("sqrtSize" + delim.size, spanHeight, viewBoxHeight, extraVinculum, options);
              span.style.minWidth = "1.02em";
              advanceWidth = 1 / sizeMultiplier;
            } else {
              spanHeight = height + extraVinculum + emPad;
              texHeight = height + extraVinculum;
              viewBoxHeight = Math.floor(1e3 * height + extraVinculum) + vbPad;
              span = sqrtSvg("sqrtTall", spanHeight, viewBoxHeight, extraVinculum, options);
              span.style.minWidth = "0.742em";
              advanceWidth = 1.056;
            }
            span.height = texHeight;
            span.style.height = makeEm(spanHeight);
            return {
              span,
              advanceWidth,
              // Calculate the actual line width.
              // This actually should depend on the chosen font -- e.g. \boldmath
              // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
              // have thicker rules.
              ruleWidth: (options.fontMetrics().sqrtRuleThickness + extraVinculum) * sizeMultiplier
            };
          };
          const stackLargeDelimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "⌊", "⌋", "\\lceil", "\\rceil", "⌈", "⌉", "\\surd"];
          const stackAlwaysDelimiters = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "⟮", "⟯", "\\lmoustache", "\\rmoustache", "⎰", "⎱"];
          const stackNeverDelimiters = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"];
          const sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3];
          const makeSizedDelim = function(delim, size, options, mode, classes) {
            if (delim === "<" || delim === "\\lt" || delim === "⟨") {
              delim = "\\langle";
            } else if (delim === ">" || delim === "\\gt" || delim === "⟩") {
              delim = "\\rangle";
            }
            if (utils.contains(stackLargeDelimiters, delim) || utils.contains(stackNeverDelimiters, delim)) {
              return makeLargeDelim(delim, size, false, options, mode, classes);
            } else if (utils.contains(stackAlwaysDelimiters, delim)) {
              return makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);
            } else {
              throw new src_ParseError("Illegal delimiter: '" + delim + "'");
            }
          };
          const stackNeverDelimiterSequence = [{
            type: "small",
            style: src_Style.SCRIPTSCRIPT
          }, {
            type: "small",
            style: src_Style.SCRIPT
          }, {
            type: "small",
            style: src_Style.TEXT
          }, {
            type: "large",
            size: 1
          }, {
            type: "large",
            size: 2
          }, {
            type: "large",
            size: 3
          }, {
            type: "large",
            size: 4
          }];
          const stackAlwaysDelimiterSequence = [{
            type: "small",
            style: src_Style.SCRIPTSCRIPT
          }, {
            type: "small",
            style: src_Style.SCRIPT
          }, {
            type: "small",
            style: src_Style.TEXT
          }, {
            type: "stack"
          }];
          const stackLargeDelimiterSequence = [{
            type: "small",
            style: src_Style.SCRIPTSCRIPT
          }, {
            type: "small",
            style: src_Style.SCRIPT
          }, {
            type: "small",
            style: src_Style.TEXT
          }, {
            type: "large",
            size: 1
          }, {
            type: "large",
            size: 2
          }, {
            type: "large",
            size: 3
          }, {
            type: "large",
            size: 4
          }, {
            type: "stack"
          }];
          const delimTypeToFont = function(type) {
            if (type.type === "small") {
              return "Main-Regular";
            } else if (type.type === "large") {
              return "Size" + type.size + "-Regular";
            } else if (type.type === "stack") {
              return "Size4-Regular";
            } else {
              throw new Error("Add support for delim type '" + type.type + "' here.");
            }
          };
          const traverseSequence = function(delim, height, sequence, options) {
            const start2 = Math.min(2, 3 - options.style.size);
            for (let i = start2; i < sequence.length; i++) {
              if (sequence[i].type === "stack") {
                break;
              }
              const metrics = getMetrics(delim, delimTypeToFont(sequence[i]), "math");
              let heightDepth = metrics.height + metrics.depth;
              if (sequence[i].type === "small") {
                const newOptions = options.havingBaseStyle(sequence[i].style);
                heightDepth *= newOptions.sizeMultiplier;
              }
              if (heightDepth > height) {
                return sequence[i];
              }
            }
            return sequence[sequence.length - 1];
          };
          const makeCustomSizedDelim = function(delim, height, center, options, mode, classes) {
            if (delim === "<" || delim === "\\lt" || delim === "⟨") {
              delim = "\\langle";
            } else if (delim === ">" || delim === "\\gt" || delim === "⟩") {
              delim = "\\rangle";
            }
            let sequence;
            if (utils.contains(stackNeverDelimiters, delim)) {
              sequence = stackNeverDelimiterSequence;
            } else if (utils.contains(stackLargeDelimiters, delim)) {
              sequence = stackLargeDelimiterSequence;
            } else {
              sequence = stackAlwaysDelimiterSequence;
            }
            const delimType = traverseSequence(delim, height, sequence, options);
            if (delimType.type === "small") {
              return makeSmallDelim(delim, delimType.style, center, options, mode, classes);
            } else if (delimType.type === "large") {
              return makeLargeDelim(delim, delimType.size, center, options, mode, classes);
            } else {
              return makeStackedDelim(delim, height, center, options, mode, classes);
            }
          };
          const makeLeftRightDelim = function(delim, height, depth, options, mode, classes) {
            const axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier;
            const delimiterFactor = 901;
            const delimiterExtend = 5 / options.fontMetrics().ptPerEm;
            const maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
            const totalHeight = Math.max(
              // In real TeX, calculations are done using integral values which are
              // 65536 per pt, or 655360 per em. So, the division here truncates in
              // TeX but doesn't here, producing different results. If we wanted to
              // exactly match TeX's calculation, we could do
              //   Math.floor(655360 * maxDistFromAxis / 500) *
              //    delimiterFactor / 655360
              // (To see the difference, compare
              //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
              // in TeX and KaTeX)
              maxDistFromAxis / 500 * delimiterFactor,
              2 * maxDistFromAxis - delimiterExtend
            );
            return makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);
          };
          var delimiter = {
            sqrtImage: makeSqrtImage,
            sizedDelim: makeSizedDelim,
            sizeToMaxHeight,
            customSizedDelim: makeCustomSizedDelim,
            leftRightDelim: makeLeftRightDelim
          };
          const delimiterSizes = {
            "\\bigl": {
              mclass: "mopen",
              size: 1
            },
            "\\Bigl": {
              mclass: "mopen",
              size: 2
            },
            "\\biggl": {
              mclass: "mopen",
              size: 3
            },
            "\\Biggl": {
              mclass: "mopen",
              size: 4
            },
            "\\bigr": {
              mclass: "mclose",
              size: 1
            },
            "\\Bigr": {
              mclass: "mclose",
              size: 2
            },
            "\\biggr": {
              mclass: "mclose",
              size: 3
            },
            "\\Biggr": {
              mclass: "mclose",
              size: 4
            },
            "\\bigm": {
              mclass: "mrel",
              size: 1
            },
            "\\Bigm": {
              mclass: "mrel",
              size: 2
            },
            "\\biggm": {
              mclass: "mrel",
              size: 3
            },
            "\\Biggm": {
              mclass: "mrel",
              size: 4
            },
            "\\big": {
              mclass: "mord",
              size: 1
            },
            "\\Big": {
              mclass: "mord",
              size: 2
            },
            "\\bigg": {
              mclass: "mord",
              size: 3
            },
            "\\Bigg": {
              mclass: "mord",
              size: 4
            }
          };
          const delimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "⌊", "⌋", "\\lceil", "\\rceil", "⌈", "⌉", "<", ">", "\\langle", "⟨", "\\rangle", "⟩", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "⟮", "⟯", "\\lmoustache", "\\rmoustache", "⎰", "⎱", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];
          function checkDelimiter(delim, context) {
            const symDelim = checkSymbolNodeType(delim);
            if (symDelim && utils.contains(delimiters, symDelim.text)) {
              return symDelim;
            } else if (symDelim) {
              throw new src_ParseError("Invalid delimiter '" + symDelim.text + "' after '" + context.funcName + "'", delim);
            } else {
              throw new src_ParseError("Invalid delimiter type '" + delim.type + "'", delim);
            }
          }
          defineFunction({
            type: "delimsizing",
            names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
            props: {
              numArgs: 1,
              argTypes: ["primitive"]
            },
            handler: (context, args) => {
              const delim = checkDelimiter(args[0], context);
              return {
                type: "delimsizing",
                mode: context.parser.mode,
                size: delimiterSizes[context.funcName].size,
                mclass: delimiterSizes[context.funcName].mclass,
                delim: delim.text
              };
            },
            htmlBuilder: (group, options) => {
              if (group.delim === ".") {
                return buildCommon.makeSpan([group.mclass]);
              }
              return delimiter.sizedDelim(group.delim, group.size, options, group.mode, [group.mclass]);
            },
            mathmlBuilder: (group) => {
              const children2 = [];
              if (group.delim !== ".") {
                children2.push(makeText(group.delim, group.mode));
              }
              const node = new mathMLTree.MathNode("mo", children2);
              if (group.mclass === "mopen" || group.mclass === "mclose") {
                node.setAttribute("fence", "true");
              } else {
                node.setAttribute("fence", "false");
              }
              node.setAttribute("stretchy", "true");
              const size = makeEm(delimiter.sizeToMaxHeight[group.size]);
              node.setAttribute("minsize", size);
              node.setAttribute("maxsize", size);
              return node;
            }
          });
          function assertParsed(group) {
            if (!group.body) {
              throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
            }
          }
          defineFunction({
            type: "leftright-right",
            names: ["\\right"],
            props: {
              numArgs: 1,
              primitive: true
            },
            handler: (context, args) => {
              const color2 = context.parser.gullet.macros.get("\\current@color");
              if (color2 && typeof color2 !== "string") {
                throw new src_ParseError("\\current@color set to non-string in \\right");
              }
              return {
                type: "leftright-right",
                mode: context.parser.mode,
                delim: checkDelimiter(args[0], context).text,
                color: color2
                // undefined if not set via \color
              };
            }
          });
          defineFunction({
            type: "leftright",
            names: ["\\left"],
            props: {
              numArgs: 1,
              primitive: true
            },
            handler: (context, args) => {
              const delim = checkDelimiter(args[0], context);
              const parser = context.parser;
              ++parser.leftrightDepth;
              const body = parser.parseExpression(false);
              --parser.leftrightDepth;
              parser.expect("\\right", false);
              const right = assertNodeType(parser.parseFunction(), "leftright-right");
              return {
                type: "leftright",
                mode: parser.mode,
                body,
                left: delim.text,
                right: right.delim,
                rightColor: right.color
              };
            },
            htmlBuilder: (group, options) => {
              assertParsed(group);
              const inner2 = buildExpression(group.body, options, true, ["mopen", "mclose"]);
              let innerHeight = 0;
              let innerDepth = 0;
              let hadMiddle = false;
              for (let i = 0; i < inner2.length; i++) {
                if (inner2[i].isMiddle) {
                  hadMiddle = true;
                } else {
                  innerHeight = Math.max(inner2[i].height, innerHeight);
                  innerDepth = Math.max(inner2[i].depth, innerDepth);
                }
              }
              innerHeight *= options.sizeMultiplier;
              innerDepth *= options.sizeMultiplier;
              let leftDelim;
              if (group.left === ".") {
                leftDelim = makeNullDelimiter(options, ["mopen"]);
              } else {
                leftDelim = delimiter.leftRightDelim(group.left, innerHeight, innerDepth, options, group.mode, ["mopen"]);
              }
              inner2.unshift(leftDelim);
              if (hadMiddle) {
                for (let i = 1; i < inner2.length; i++) {
                  const middleDelim = inner2[i];
                  const isMiddle = middleDelim.isMiddle;
                  if (isMiddle) {
                    inner2[i] = delimiter.leftRightDelim(isMiddle.delim, innerHeight, innerDepth, isMiddle.options, group.mode, []);
                  }
                }
              }
              let rightDelim;
              if (group.right === ".") {
                rightDelim = makeNullDelimiter(options, ["mclose"]);
              } else {
                const colorOptions = group.rightColor ? options.withColor(group.rightColor) : options;
                rightDelim = delimiter.leftRightDelim(group.right, innerHeight, innerDepth, colorOptions, group.mode, ["mclose"]);
              }
              inner2.push(rightDelim);
              return buildCommon.makeSpan(["minner"], inner2, options);
            },
            mathmlBuilder: (group, options) => {
              assertParsed(group);
              const inner2 = buildMathML_buildExpression(group.body, options);
              if (group.left !== ".") {
                const leftNode = new mathMLTree.MathNode("mo", [makeText(group.left, group.mode)]);
                leftNode.setAttribute("fence", "true");
                inner2.unshift(leftNode);
              }
              if (group.right !== ".") {
                const rightNode = new mathMLTree.MathNode("mo", [makeText(group.right, group.mode)]);
                rightNode.setAttribute("fence", "true");
                if (group.rightColor) {
                  rightNode.setAttribute("mathcolor", group.rightColor);
                }
                inner2.push(rightNode);
              }
              return makeRow(inner2);
            }
          });
          defineFunction({
            type: "middle",
            names: ["\\middle"],
            props: {
              numArgs: 1,
              primitive: true
            },
            handler: (context, args) => {
              const delim = checkDelimiter(args[0], context);
              if (!context.parser.leftrightDepth) {
                throw new src_ParseError("\\middle without preceding \\left", delim);
              }
              return {
                type: "middle",
                mode: context.parser.mode,
                delim: delim.text
              };
            },
            htmlBuilder: (group, options) => {
              let middleDelim;
              if (group.delim === ".") {
                middleDelim = makeNullDelimiter(options, []);
              } else {
                middleDelim = delimiter.sizedDelim(group.delim, 1, options, group.mode, []);
                const isMiddle = {
                  delim: group.delim,
                  options
                };
                middleDelim.isMiddle = isMiddle;
              }
              return middleDelim;
            },
            mathmlBuilder: (group, options) => {
              const textNode = group.delim === "\\vert" || group.delim === "|" ? makeText("|", "text") : makeText(group.delim, group.mode);
              const middleNode = new mathMLTree.MathNode("mo", [textNode]);
              middleNode.setAttribute("fence", "true");
              middleNode.setAttribute("lspace", "0.05em");
              middleNode.setAttribute("rspace", "0.05em");
              return middleNode;
            }
          });
          const enclose_htmlBuilder = (group, options) => {
            const inner2 = buildCommon.wrapFragment(buildGroup(group.body, options), options);
            const label = group.label.slice(1);
            let scale = options.sizeMultiplier;
            let img;
            let imgShift = 0;
            const isSingleChar = utils.isCharacterBox(group.body);
            if (label === "sout") {
              img = buildCommon.makeSpan(["stretchy", "sout"]);
              img.height = options.fontMetrics().defaultRuleThickness / scale;
              imgShift = -0.5 * options.fontMetrics().xHeight;
            } else if (label === "phase") {
              const lineWeight = calculateSize({
                number: 0.6,
                unit: "pt"
              }, options);
              const clearance = calculateSize({
                number: 0.35,
                unit: "ex"
              }, options);
              const newOptions = options.havingBaseSizing();
              scale = scale / newOptions.sizeMultiplier;
              const angleHeight = inner2.height + inner2.depth + lineWeight + clearance;
              inner2.style.paddingLeft = makeEm(angleHeight / 2 + lineWeight);
              const viewBoxHeight = Math.floor(1e3 * angleHeight * scale);
              const path3 = phasePath(viewBoxHeight);
              const svgNode2 = new SvgNode([new PathNode("phase", path3)], {
                "width": "400em",
                "height": makeEm(viewBoxHeight / 1e3),
                "viewBox": "0 0 400000 " + viewBoxHeight,
                "preserveAspectRatio": "xMinYMin slice"
              });
              img = buildCommon.makeSvgSpan(["hide-tail"], [svgNode2], options);
              img.style.height = makeEm(angleHeight);
              imgShift = inner2.depth + lineWeight + clearance;
            } else {
              if (/cancel/.test(label)) {
                if (!isSingleChar) {
                  inner2.classes.push("cancel-pad");
                }
              } else if (label === "angl") {
                inner2.classes.push("anglpad");
              } else {
                inner2.classes.push("boxpad");
              }
              let topPad = 0;
              let bottomPad = 0;
              let ruleThickness = 0;
              if (/box/.test(label)) {
                ruleThickness = Math.max(
                  options.fontMetrics().fboxrule,
                  // default
                  options.minRuleThickness
                  // User override.
                );
                topPad = options.fontMetrics().fboxsep + (label === "colorbox" ? 0 : ruleThickness);
                bottomPad = topPad;
              } else if (label === "angl") {
                ruleThickness = Math.max(options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
                topPad = 4 * ruleThickness;
                bottomPad = Math.max(0, 0.25 - inner2.depth);
              } else {
                topPad = isSingleChar ? 0.2 : 0;
                bottomPad = topPad;
              }
              img = stretchy.encloseSpan(inner2, label, topPad, bottomPad, options);
              if (/fbox|boxed|fcolorbox/.test(label)) {
                img.style.borderStyle = "solid";
                img.style.borderWidth = makeEm(ruleThickness);
              } else if (label === "angl" && ruleThickness !== 0.049) {
                img.style.borderTopWidth = makeEm(ruleThickness);
                img.style.borderRightWidth = makeEm(ruleThickness);
              }
              imgShift = inner2.depth + bottomPad;
              if (group.backgroundColor) {
                img.style.backgroundColor = group.backgroundColor;
                if (group.borderColor) {
                  img.style.borderColor = group.borderColor;
                }
              }
            }
            let vlist;
            if (group.backgroundColor) {
              vlist = buildCommon.makeVList({
                positionType: "individualShift",
                children: [
                  // Put the color background behind inner;
                  {
                    type: "elem",
                    elem: img,
                    shift: imgShift
                  },
                  {
                    type: "elem",
                    elem: inner2,
                    shift: 0
                  }
                ]
              }, options);
            } else {
              const classes = /cancel|phase/.test(label) ? ["svg-align"] : [];
              vlist = buildCommon.makeVList({
                positionType: "individualShift",
                children: [
                  // Write the \cancel stroke on top of inner.
                  {
                    type: "elem",
                    elem: inner2,
                    shift: 0
                  },
                  {
                    type: "elem",
                    elem: img,
                    shift: imgShift,
                    wrapperClasses: classes
                  }
                ]
              }, options);
            }
            if (/cancel/.test(label)) {
              vlist.height = inner2.height;
              vlist.depth = inner2.depth;
            }
            if (/cancel/.test(label) && !isSingleChar) {
              return buildCommon.makeSpan(["mord", "cancel-lap"], [vlist], options);
            } else {
              return buildCommon.makeSpan(["mord"], [vlist], options);
            }
          };
          const enclose_mathmlBuilder = (group, options) => {
            let fboxsep = 0;
            const node = new mathMLTree.MathNode(group.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [buildMathML_buildGroup(group.body, options)]);
            switch (group.label) {
              case "\\cancel":
                node.setAttribute("notation", "updiagonalstrike");
                break;
              case "\\bcancel":
                node.setAttribute("notation", "downdiagonalstrike");
                break;
              case "\\phase":
                node.setAttribute("notation", "phasorangle");
                break;
              case "\\sout":
                node.setAttribute("notation", "horizontalstrike");
                break;
              case "\\fbox":
                node.setAttribute("notation", "box");
                break;
              case "\\angl":
                node.setAttribute("notation", "actuarial");
                break;
              case "\\fcolorbox":
              case "\\colorbox":
                fboxsep = options.fontMetrics().fboxsep * options.fontMetrics().ptPerEm;
                node.setAttribute("width", "+" + 2 * fboxsep + "pt");
                node.setAttribute("height", "+" + 2 * fboxsep + "pt");
                node.setAttribute("lspace", fboxsep + "pt");
                node.setAttribute("voffset", fboxsep + "pt");
                if (group.label === "\\fcolorbox") {
                  const thk = Math.max(
                    options.fontMetrics().fboxrule,
                    // default
                    options.minRuleThickness
                    // user override
                  );
                  node.setAttribute("style", "border: " + thk + "em solid " + String(group.borderColor));
                }
                break;
              case "\\xcancel":
                node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
                break;
            }
            if (group.backgroundColor) {
              node.setAttribute("mathbackground", group.backgroundColor);
            }
            return node;
          };
          defineFunction({
            type: "enclose",
            names: ["\\colorbox"],
            props: {
              numArgs: 2,
              allowedInText: true,
              argTypes: ["color", "text"]
            },
            handler(_ref, args, optArgs) {
              let {
                parser,
                funcName
              } = _ref;
              const color2 = assertNodeType(args[0], "color-token").color;
              const body = args[1];
              return {
                type: "enclose",
                mode: parser.mode,
                label: funcName,
                backgroundColor: color2,
                body
              };
            },
            htmlBuilder: enclose_htmlBuilder,
            mathmlBuilder: enclose_mathmlBuilder
          });
          defineFunction({
            type: "enclose",
            names: ["\\fcolorbox"],
            props: {
              numArgs: 3,
              allowedInText: true,
              argTypes: ["color", "color", "text"]
            },
            handler(_ref2, args, optArgs) {
              let {
                parser,
                funcName
              } = _ref2;
              const borderColor = assertNodeType(args[0], "color-token").color;
              const backgroundColor = assertNodeType(args[1], "color-token").color;
              const body = args[2];
              return {
                type: "enclose",
                mode: parser.mode,
                label: funcName,
                backgroundColor,
                borderColor,
                body
              };
            },
            htmlBuilder: enclose_htmlBuilder,
            mathmlBuilder: enclose_mathmlBuilder
          });
          defineFunction({
            type: "enclose",
            names: ["\\fbox"],
            props: {
              numArgs: 1,
              argTypes: ["hbox"],
              allowedInText: true
            },
            handler(_ref3, args) {
              let {
                parser
              } = _ref3;
              return {
                type: "enclose",
                mode: parser.mode,
                label: "\\fbox",
                body: args[0]
              };
            }
          });
          defineFunction({
            type: "enclose",
            names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\phase"],
            props: {
              numArgs: 1
            },
            handler(_ref4, args) {
              let {
                parser,
                funcName
              } = _ref4;
              const body = args[0];
              return {
                type: "enclose",
                mode: parser.mode,
                label: funcName,
                body
              };
            },
            htmlBuilder: enclose_htmlBuilder,
            mathmlBuilder: enclose_mathmlBuilder
          });
          defineFunction({
            type: "enclose",
            names: ["\\angl"],
            props: {
              numArgs: 1,
              argTypes: ["hbox"],
              allowedInText: false
            },
            handler(_ref5, args) {
              let {
                parser
              } = _ref5;
              return {
                type: "enclose",
                mode: parser.mode,
                label: "\\angl",
                body: args[0]
              };
            }
          });
          const _environments = {};
          function defineEnvironment(_ref) {
            let {
              type,
              names,
              props,
              handler,
              htmlBuilder: htmlBuilder2,
              mathmlBuilder: mathmlBuilder2
            } = _ref;
            const data = {
              type,
              numArgs: props.numArgs || 0,
              allowedInText: false,
              numOptionalArgs: 0,
              handler
            };
            for (let i = 0; i < names.length; ++i) {
              _environments[names[i]] = data;
            }
            if (htmlBuilder2) {
              _htmlGroupBuilders[type] = htmlBuilder2;
            }
            if (mathmlBuilder2) {
              _mathmlGroupBuilders[type] = mathmlBuilder2;
            }
          }
          const _macros = {};
          function defineMacro(name2, body) {
            _macros[name2] = body;
          }
          class SourceLocation {
            // The + prefix indicates that these fields aren't writeable
            // Lexer holding the input string.
            // Start offset, zero-based inclusive.
            // End offset, zero-based exclusive.
            constructor(lexer, start2, end) {
              this.lexer = void 0;
              this.start = void 0;
              this.end = void 0;
              this.lexer = lexer;
              this.start = start2;
              this.end = end;
            }
            /**
             * Merges two `SourceLocation`s from location providers, given they are
             * provided in order of appearance.
             * - Returns the first one's location if only the first is provided.
             * - Returns a merged range of the first and the last if both are provided
             *   and their lexers match.
             * - Otherwise, returns null.
             */
            static range(first, second) {
              if (!second) {
                return first && first.loc;
              } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {
                return null;
              } else {
                return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);
              }
            }
          }
          class Token {
            // don't expand the token
            // used in \noexpand
            constructor(text, loc) {
              this.text = void 0;
              this.loc = void 0;
              this.noexpand = void 0;
              this.treatAsRelax = void 0;
              this.text = text;
              this.loc = loc;
            }
            /**
             * Given a pair of tokens (this and endToken), compute a `Token` encompassing
             * the whole input range enclosed by these two.
             */
            range(endToken, text) {
              return new Token(text, SourceLocation.range(this, endToken));
            }
          }
          function getHLines(parser) {
            const hlineInfo = [];
            parser.consumeSpaces();
            let nxt = parser.fetch().text;
            if (nxt === "\\relax") {
              parser.consume();
              parser.consumeSpaces();
              nxt = parser.fetch().text;
            }
            while (nxt === "\\hline" || nxt === "\\hdashline") {
              parser.consume();
              hlineInfo.push(nxt === "\\hdashline");
              parser.consumeSpaces();
              nxt = parser.fetch().text;
            }
            return hlineInfo;
          }
          const validateAmsEnvironmentContext = (context) => {
            const settings = context.parser.settings;
            if (!settings.displayMode) {
              throw new src_ParseError("{" + context.envName + "} can be used only in display mode.");
            }
          };
          function getAutoTag(name2) {
            if (name2.indexOf("ed") === -1) {
              return name2.indexOf("*") === -1;
            }
          }
          function parseArray(parser, _ref, style) {
            let {
              hskipBeforeAndAfter,
              addJot,
              cols,
              arraystretch,
              colSeparationType,
              autoTag,
              singleRow,
              emptySingleRow,
              maxNumCols,
              leqno
            } = _ref;
            parser.gullet.beginGroup();
            if (!singleRow) {
              parser.gullet.macros.set("\\cr", "\\\\\\relax");
            }
            if (!arraystretch) {
              const stretch = parser.gullet.expandMacroAsText("\\arraystretch");
              if (stretch == null) {
                arraystretch = 1;
              } else {
                arraystretch = parseFloat(stretch);
                if (!arraystretch || arraystretch < 0) {
                  throw new src_ParseError("Invalid \\arraystretch: " + stretch);
                }
              }
            }
            parser.gullet.beginGroup();
            let row = [];
            const body = [row];
            const rowGaps = [];
            const hLinesBeforeRow = [];
            const tags = autoTag != null ? [] : void 0;
            function beginRow() {
              if (autoTag) {
                parser.gullet.macros.set("\\@eqnsw", "1", true);
              }
            }
            function endRow() {
              if (tags) {
                if (parser.gullet.macros.get("\\df@tag")) {
                  tags.push(parser.subparse([new Token("\\df@tag")]));
                  parser.gullet.macros.set("\\df@tag", void 0, true);
                } else {
                  tags.push(Boolean(autoTag) && parser.gullet.macros.get("\\@eqnsw") === "1");
                }
              }
            }
            beginRow();
            hLinesBeforeRow.push(getHLines(parser));
            while (true) {
              let cell = parser.parseExpression(false, singleRow ? "\\end" : "\\\\");
              parser.gullet.endGroup();
              parser.gullet.beginGroup();
              cell = {
                type: "ordgroup",
                mode: parser.mode,
                body: cell
              };
              if (style) {
                cell = {
                  type: "styling",
                  mode: parser.mode,
                  style,
                  body: [cell]
                };
              }
              row.push(cell);
              const next = parser.fetch().text;
              if (next === "&") {
                if (maxNumCols && row.length === maxNumCols) {
                  if (singleRow || colSeparationType) {
                    throw new src_ParseError("Too many tab characters: &", parser.nextToken);
                  } else {
                    parser.settings.reportNonstrict("textEnv", "Too few columns specified in the {array} column argument.");
                  }
                }
                parser.consume();
              } else if (next === "\\end") {
                endRow();
                if (row.length === 1 && cell.type === "styling" && cell.body[0].body.length === 0 && (body.length > 1 || !emptySingleRow)) {
                  body.pop();
                }
                if (hLinesBeforeRow.length < body.length + 1) {
                  hLinesBeforeRow.push([]);
                }
                break;
              } else if (next === "\\\\") {
                parser.consume();
                let size;
                if (parser.gullet.future().text !== " ") {
                  size = parser.parseSizeGroup(true);
                }
                rowGaps.push(size ? size.value : null);
                endRow();
                hLinesBeforeRow.push(getHLines(parser));
                row = [];
                body.push(row);
                beginRow();
              } else {
                throw new src_ParseError("Expected & or \\\\ or \\cr or \\end", parser.nextToken);
              }
            }
            parser.gullet.endGroup();
            parser.gullet.endGroup();
            return {
              type: "array",
              mode: parser.mode,
              addJot,
              arraystretch,
              body,
              cols,
              rowGaps,
              hskipBeforeAndAfter,
              hLinesBeforeRow,
              colSeparationType,
              tags,
              leqno
            };
          }
          function dCellStyle(envName) {
            if (envName.slice(0, 1) === "d") {
              return "display";
            } else {
              return "text";
            }
          }
          const array_htmlBuilder = function(group, options) {
            let r;
            let c;
            const nr = group.body.length;
            const hLinesBeforeRow = group.hLinesBeforeRow;
            let nc = 0;
            let body = new Array(nr);
            const hlines = [];
            const ruleThickness = Math.max(
              // From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.
              options.fontMetrics().arrayRuleWidth,
              options.minRuleThickness
              // User override.
            );
            const pt = 1 / options.fontMetrics().ptPerEm;
            let arraycolsep = 5 * pt;
            if (group.colSeparationType && group.colSeparationType === "small") {
              const localMultiplier = options.havingStyle(src_Style.SCRIPT).sizeMultiplier;
              arraycolsep = 0.2778 * (localMultiplier / options.sizeMultiplier);
            }
            const baselineskip = group.colSeparationType === "CD" ? calculateSize({
              number: 3,
              unit: "ex"
            }, options) : 12 * pt;
            const jot = 3 * pt;
            const arrayskip = group.arraystretch * baselineskip;
            const arstrutHeight = 0.7 * arrayskip;
            const arstrutDepth = 0.3 * arrayskip;
            let totalHeight = 0;
            function setHLinePos(hlinesInGap) {
              for (let i = 0; i < hlinesInGap.length; ++i) {
                if (i > 0) {
                  totalHeight += 0.25;
                }
                hlines.push({
                  pos: totalHeight,
                  isDashed: hlinesInGap[i]
                });
              }
            }
            setHLinePos(hLinesBeforeRow[0]);
            for (r = 0; r < group.body.length; ++r) {
              const inrow = group.body[r];
              let height = arstrutHeight;
              let depth = arstrutDepth;
              if (nc < inrow.length) {
                nc = inrow.length;
              }
              const outrow = new Array(inrow.length);
              for (c = 0; c < inrow.length; ++c) {
                const elt = buildGroup(inrow[c], options);
                if (depth < elt.depth) {
                  depth = elt.depth;
                }
                if (height < elt.height) {
                  height = elt.height;
                }
                outrow[c] = elt;
              }
              const rowGap = group.rowGaps[r];
              let gap = 0;
              if (rowGap) {
                gap = calculateSize(rowGap, options);
                if (gap > 0) {
                  gap += arstrutDepth;
                  if (depth < gap) {
                    depth = gap;
                  }
                  gap = 0;
                }
              }
              if (group.addJot) {
                depth += jot;
              }
              outrow.height = height;
              outrow.depth = depth;
              totalHeight += height;
              outrow.pos = totalHeight;
              totalHeight += depth + gap;
              body[r] = outrow;
              setHLinePos(hLinesBeforeRow[r + 1]);
            }
            const offset = totalHeight / 2 + options.fontMetrics().axisHeight;
            const colDescriptions = group.cols || [];
            const cols = [];
            let colSep;
            let colDescrNum;
            const tagSpans = [];
            if (group.tags && group.tags.some((tag) => tag)) {
              for (r = 0; r < nr; ++r) {
                const rw = body[r];
                const shift = rw.pos - offset;
                const tag = group.tags[r];
                let tagSpan;
                if (tag === true) {
                  tagSpan = buildCommon.makeSpan(["eqn-num"], [], options);
                } else if (tag === false) {
                  tagSpan = buildCommon.makeSpan([], [], options);
                } else {
                  tagSpan = buildCommon.makeSpan([], buildExpression(tag, options, true), options);
                }
                tagSpan.depth = rw.depth;
                tagSpan.height = rw.height;
                tagSpans.push({
                  type: "elem",
                  elem: tagSpan,
                  shift
                });
              }
            }
            for (
              c = 0, colDescrNum = 0;
              // Continue while either there are more columns or more column
              // descriptions, so trailing separators don't get lost.
              c < nc || colDescrNum < colDescriptions.length;
              ++c, ++colDescrNum
            ) {
              let colDescr = colDescriptions[colDescrNum] || {};
              let firstSeparator = true;
              while (colDescr.type === "separator") {
                if (!firstSeparator) {
                  colSep = buildCommon.makeSpan(["arraycolsep"], []);
                  colSep.style.width = makeEm(options.fontMetrics().doubleRuleSep);
                  cols.push(colSep);
                }
                if (colDescr.separator === "|" || colDescr.separator === ":") {
                  const lineType = colDescr.separator === "|" ? "solid" : "dashed";
                  const separator = buildCommon.makeSpan(["vertical-separator"], [], options);
                  separator.style.height = makeEm(totalHeight);
                  separator.style.borderRightWidth = makeEm(ruleThickness);
                  separator.style.borderRightStyle = lineType;
                  separator.style.margin = "0 " + makeEm(-ruleThickness / 2);
                  const shift = totalHeight - offset;
                  if (shift) {
                    separator.style.verticalAlign = makeEm(-shift);
                  }
                  cols.push(separator);
                } else {
                  throw new src_ParseError("Invalid separator type: " + colDescr.separator);
                }
                colDescrNum++;
                colDescr = colDescriptions[colDescrNum] || {};
                firstSeparator = false;
              }
              if (c >= nc) {
                continue;
              }
              let sepwidth;
              if (c > 0 || group.hskipBeforeAndAfter) {
                sepwidth = utils.deflt(colDescr.pregap, arraycolsep);
                if (sepwidth !== 0) {
                  colSep = buildCommon.makeSpan(["arraycolsep"], []);
                  colSep.style.width = makeEm(sepwidth);
                  cols.push(colSep);
                }
              }
              let col = [];
              for (r = 0; r < nr; ++r) {
                const row = body[r];
                const elem = row[c];
                if (!elem) {
                  continue;
                }
                const shift = row.pos - offset;
                elem.depth = row.depth;
                elem.height = row.height;
                col.push({
                  type: "elem",
                  elem,
                  shift
                });
              }
              col = buildCommon.makeVList({
                positionType: "individualShift",
                children: col
              }, options);
              col = buildCommon.makeSpan(["col-align-" + (colDescr.align || "c")], [col]);
              cols.push(col);
              if (c < nc - 1 || group.hskipBeforeAndAfter) {
                sepwidth = utils.deflt(colDescr.postgap, arraycolsep);
                if (sepwidth !== 0) {
                  colSep = buildCommon.makeSpan(["arraycolsep"], []);
                  colSep.style.width = makeEm(sepwidth);
                  cols.push(colSep);
                }
              }
            }
            body = buildCommon.makeSpan(["mtable"], cols);
            if (hlines.length > 0) {
              const line = buildCommon.makeLineSpan("hline", options, ruleThickness);
              const dashes = buildCommon.makeLineSpan("hdashline", options, ruleThickness);
              const vListElems = [{
                type: "elem",
                elem: body,
                shift: 0
              }];
              while (hlines.length > 0) {
                const hline = hlines.pop();
                const lineShift = hline.pos - offset;
                if (hline.isDashed) {
                  vListElems.push({
                    type: "elem",
                    elem: dashes,
                    shift: lineShift
                  });
                } else {
                  vListElems.push({
                    type: "elem",
                    elem: line,
                    shift: lineShift
                  });
                }
              }
              body = buildCommon.makeVList({
                positionType: "individualShift",
                children: vListElems
              }, options);
            }
            if (tagSpans.length === 0) {
              return buildCommon.makeSpan(["mord"], [body], options);
            } else {
              let eqnNumCol = buildCommon.makeVList({
                positionType: "individualShift",
                children: tagSpans
              }, options);
              eqnNumCol = buildCommon.makeSpan(["tag"], [eqnNumCol], options);
              return buildCommon.makeFragment([body, eqnNumCol]);
            }
          };
          const alignMap = {
            c: "center ",
            l: "left ",
            r: "right "
          };
          const array_mathmlBuilder = function(group, options) {
            const tbl = [];
            const glue = new mathMLTree.MathNode("mtd", [], ["mtr-glue"]);
            const tag = new mathMLTree.MathNode("mtd", [], ["mml-eqn-num"]);
            for (let i = 0; i < group.body.length; i++) {
              const rw = group.body[i];
              const row = [];
              for (let j = 0; j < rw.length; j++) {
                row.push(new mathMLTree.MathNode("mtd", [buildMathML_buildGroup(rw[j], options)]));
              }
              if (group.tags && group.tags[i]) {
                row.unshift(glue);
                row.push(glue);
                if (group.leqno) {
                  row.unshift(tag);
                } else {
                  row.push(tag);
                }
              }
              tbl.push(new mathMLTree.MathNode("mtr", row));
            }
            let table = new mathMLTree.MathNode("mtable", tbl);
            const gap = group.arraystretch === 0.5 ? 0.1 : 0.16 + group.arraystretch - 1 + (group.addJot ? 0.09 : 0);
            table.setAttribute("rowspacing", makeEm(gap));
            let menclose = "";
            let align = "";
            if (group.cols && group.cols.length > 0) {
              const cols = group.cols;
              let columnLines = "";
              let prevTypeWasAlign = false;
              let iStart = 0;
              let iEnd = cols.length;
              if (cols[0].type === "separator") {
                menclose += "top ";
                iStart = 1;
              }
              if (cols[cols.length - 1].type === "separator") {
                menclose += "bottom ";
                iEnd -= 1;
              }
              for (let i = iStart; i < iEnd; i++) {
                if (cols[i].type === "align") {
                  align += alignMap[cols[i].align];
                  if (prevTypeWasAlign) {
                    columnLines += "none ";
                  }
                  prevTypeWasAlign = true;
                } else if (cols[i].type === "separator") {
                  if (prevTypeWasAlign) {
                    columnLines += cols[i].separator === "|" ? "solid " : "dashed ";
                    prevTypeWasAlign = false;
                  }
                }
              }
              table.setAttribute("columnalign", align.trim());
              if (/[sd]/.test(columnLines)) {
                table.setAttribute("columnlines", columnLines.trim());
              }
            }
            if (group.colSeparationType === "align") {
              const cols = group.cols || [];
              let spacing2 = "";
              for (let i = 1; i < cols.length; i++) {
                spacing2 += i % 2 ? "0em " : "1em ";
              }
              table.setAttribute("columnspacing", spacing2.trim());
            } else if (group.colSeparationType === "alignat" || group.colSeparationType === "gather") {
              table.setAttribute("columnspacing", "0em");
            } else if (group.colSeparationType === "small") {
              table.setAttribute("columnspacing", "0.2778em");
            } else if (group.colSeparationType === "CD") {
              table.setAttribute("columnspacing", "0.5em");
            } else {
              table.setAttribute("columnspacing", "1em");
            }
            let rowLines = "";
            const hlines = group.hLinesBeforeRow;
            menclose += hlines[0].length > 0 ? "left " : "";
            menclose += hlines[hlines.length - 1].length > 0 ? "right " : "";
            for (let i = 1; i < hlines.length - 1; i++) {
              rowLines += hlines[i].length === 0 ? "none " : hlines[i][0] ? "dashed " : "solid ";
            }
            if (/[sd]/.test(rowLines)) {
              table.setAttribute("rowlines", rowLines.trim());
            }
            if (menclose !== "") {
              table = new mathMLTree.MathNode("menclose", [table]);
              table.setAttribute("notation", menclose.trim());
            }
            if (group.arraystretch && group.arraystretch < 1) {
              table = new mathMLTree.MathNode("mstyle", [table]);
              table.setAttribute("scriptlevel", "1");
            }
            return table;
          };
          const alignedHandler = function(context, args) {
            if (context.envName.indexOf("ed") === -1) {
              validateAmsEnvironmentContext(context);
            }
            const cols = [];
            const separationType = context.envName.indexOf("at") > -1 ? "alignat" : "align";
            const isSplit = context.envName === "split";
            const res = parseArray(context.parser, {
              cols,
              addJot: true,
              autoTag: isSplit ? void 0 : getAutoTag(context.envName),
              emptySingleRow: true,
              colSeparationType: separationType,
              maxNumCols: isSplit ? 2 : void 0,
              leqno: context.parser.settings.leqno
            }, "display");
            let numMaths;
            let numCols = 0;
            const emptyGroup = {
              type: "ordgroup",
              mode: context.mode,
              body: []
            };
            if (args[0] && args[0].type === "ordgroup") {
              let arg0 = "";
              for (let i = 0; i < args[0].body.length; i++) {
                const textord2 = assertNodeType(args[0].body[i], "textord");
                arg0 += textord2.text;
              }
              numMaths = Number(arg0);
              numCols = numMaths * 2;
            }
            const isAligned = !numCols;
            res.body.forEach(function(row) {
              for (let i = 1; i < row.length; i += 2) {
                const styling = assertNodeType(row[i], "styling");
                const ordgroup = assertNodeType(styling.body[0], "ordgroup");
                ordgroup.body.unshift(emptyGroup);
              }
              if (!isAligned) {
                const curMaths = row.length / 2;
                if (numMaths < curMaths) {
                  throw new src_ParseError("Too many math in a row: " + ("expected " + numMaths + ", but got " + curMaths), row[0]);
                }
              } else if (numCols < row.length) {
                numCols = row.length;
              }
            });
            for (let i = 0; i < numCols; ++i) {
              let align = "r";
              let pregap = 0;
              if (i % 2 === 1) {
                align = "l";
              } else if (i > 0 && isAligned) {
                pregap = 1;
              }
              cols[i] = {
                type: "align",
                align,
                pregap,
                postgap: 0
              };
            }
            res.colSeparationType = isAligned ? "align" : "alignat";
            return res;
          };
          defineEnvironment({
            type: "array",
            names: ["array", "darray"],
            props: {
              numArgs: 1
            },
            handler(context, args) {
              const symNode = checkSymbolNodeType(args[0]);
              const colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
              const cols = colalign.map(function(nde) {
                const node = assertSymbolNodeType(nde);
                const ca = node.text;
                if ("lcr".indexOf(ca) !== -1) {
                  return {
                    type: "align",
                    align: ca
                  };
                } else if (ca === "|") {
                  return {
                    type: "separator",
                    separator: "|"
                  };
                } else if (ca === ":") {
                  return {
                    type: "separator",
                    separator: ":"
                  };
                }
                throw new src_ParseError("Unknown column alignment: " + ca, nde);
              });
              const res = {
                cols,
                hskipBeforeAndAfter: true,
                // \@preamble in lttab.dtx
                maxNumCols: cols.length
              };
              return parseArray(context.parser, res, dCellStyle(context.envName));
            },
            htmlBuilder: array_htmlBuilder,
            mathmlBuilder: array_mathmlBuilder
          });
          defineEnvironment({
            type: "array",
            names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix", "matrix*", "pmatrix*", "bmatrix*", "Bmatrix*", "vmatrix*", "Vmatrix*"],
            props: {
              numArgs: 0
            },
            handler(context) {
              const delimiters2 = {
                "matrix": null,
                "pmatrix": ["(", ")"],
                "bmatrix": ["[", "]"],
                "Bmatrix": ["\\{", "\\}"],
                "vmatrix": ["|", "|"],
                "Vmatrix": ["\\Vert", "\\Vert"]
              }[context.envName.replace("*", "")];
              let colAlign = "c";
              const payload = {
                hskipBeforeAndAfter: false,
                cols: [{
                  type: "align",
                  align: colAlign
                }]
              };
              if (context.envName.charAt(context.envName.length - 1) === "*") {
                const parser = context.parser;
                parser.consumeSpaces();
                if (parser.fetch().text === "[") {
                  parser.consume();
                  parser.consumeSpaces();
                  colAlign = parser.fetch().text;
                  if ("lcr".indexOf(colAlign) === -1) {
                    throw new src_ParseError("Expected l or c or r", parser.nextToken);
                  }
                  parser.consume();
                  parser.consumeSpaces();
                  parser.expect("]");
                  parser.consume();
                  payload.cols = [{
                    type: "align",
                    align: colAlign
                  }];
                }
              }
              const res = parseArray(context.parser, payload, dCellStyle(context.envName));
              const numCols = Math.max(0, ...res.body.map((row) => row.length));
              res.cols = new Array(numCols).fill({
                type: "align",
                align: colAlign
              });
              return delimiters2 ? {
                type: "leftright",
                mode: context.mode,
                body: [res],
                left: delimiters2[0],
                right: delimiters2[1],
                rightColor: void 0
                // \right uninfluenced by \color in array
              } : res;
            },
            htmlBuilder: array_htmlBuilder,
            mathmlBuilder: array_mathmlBuilder
          });
          defineEnvironment({
            type: "array",
            names: ["smallmatrix"],
            props: {
              numArgs: 0
            },
            handler(context) {
              const payload = {
                arraystretch: 0.5
              };
              const res = parseArray(context.parser, payload, "script");
              res.colSeparationType = "small";
              return res;
            },
            htmlBuilder: array_htmlBuilder,
            mathmlBuilder: array_mathmlBuilder
          });
          defineEnvironment({
            type: "array",
            names: ["subarray"],
            props: {
              numArgs: 1
            },
            handler(context, args) {
              const symNode = checkSymbolNodeType(args[0]);
              const colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
              const cols = colalign.map(function(nde) {
                const node = assertSymbolNodeType(nde);
                const ca = node.text;
                if ("lc".indexOf(ca) !== -1) {
                  return {
                    type: "align",
                    align: ca
                  };
                }
                throw new src_ParseError("Unknown column alignment: " + ca, nde);
              });
              if (cols.length > 1) {
                throw new src_ParseError("{subarray} can contain only one column");
              }
              let res = {
                cols,
                hskipBeforeAndAfter: false,
                arraystretch: 0.5
              };
              res = parseArray(context.parser, res, "script");
              if (res.body.length > 0 && res.body[0].length > 1) {
                throw new src_ParseError("{subarray} can contain only one column");
              }
              return res;
            },
            htmlBuilder: array_htmlBuilder,
            mathmlBuilder: array_mathmlBuilder
          });
          defineEnvironment({
            type: "array",
            names: ["cases", "dcases", "rcases", "drcases"],
            props: {
              numArgs: 0
            },
            handler(context) {
              const payload = {
                arraystretch: 1.2,
                cols: [{
                  type: "align",
                  align: "l",
                  pregap: 0,
                  // TODO(kevinb) get the current style.
                  // For now we use the metrics for TEXT style which is what we were
                  // doing before.  Before attempting to get the current style we
                  // should look at TeX's behavior especially for \over and matrices.
                  postgap: 1
                  /* 1em quad */
                }, {
                  type: "align",
                  align: "l",
                  pregap: 0,
                  postgap: 0
                }]
              };
              const res = parseArray(context.parser, payload, dCellStyle(context.envName));
              return {
                type: "leftright",
                mode: context.mode,
                body: [res],
                left: context.envName.indexOf("r") > -1 ? "." : "\\{",
                right: context.envName.indexOf("r") > -1 ? "\\}" : ".",
                rightColor: void 0
              };
            },
            htmlBuilder: array_htmlBuilder,
            mathmlBuilder: array_mathmlBuilder
          });
          defineEnvironment({
            type: "array",
            names: ["align", "align*", "aligned", "split"],
            props: {
              numArgs: 0
            },
            handler: alignedHandler,
            htmlBuilder: array_htmlBuilder,
            mathmlBuilder: array_mathmlBuilder
          });
          defineEnvironment({
            type: "array",
            names: ["gathered", "gather", "gather*"],
            props: {
              numArgs: 0
            },
            handler(context) {
              if (utils.contains(["gather", "gather*"], context.envName)) {
                validateAmsEnvironmentContext(context);
              }
              const res = {
                cols: [{
                  type: "align",
                  align: "c"
                }],
                addJot: true,
                colSeparationType: "gather",
                autoTag: getAutoTag(context.envName),
                emptySingleRow: true,
                leqno: context.parser.settings.leqno
              };
              return parseArray(context.parser, res, "display");
            },
            htmlBuilder: array_htmlBuilder,
            mathmlBuilder: array_mathmlBuilder
          });
          defineEnvironment({
            type: "array",
            names: ["alignat", "alignat*", "alignedat"],
            props: {
              numArgs: 1
            },
            handler: alignedHandler,
            htmlBuilder: array_htmlBuilder,
            mathmlBuilder: array_mathmlBuilder
          });
          defineEnvironment({
            type: "array",
            names: ["equation", "equation*"],
            props: {
              numArgs: 0
            },
            handler(context) {
              validateAmsEnvironmentContext(context);
              const res = {
                autoTag: getAutoTag(context.envName),
                emptySingleRow: true,
                singleRow: true,
                maxNumCols: 1,
                leqno: context.parser.settings.leqno
              };
              return parseArray(context.parser, res, "display");
            },
            htmlBuilder: array_htmlBuilder,
            mathmlBuilder: array_mathmlBuilder
          });
          defineEnvironment({
            type: "array",
            names: ["CD"],
            props: {
              numArgs: 0
            },
            handler(context) {
              validateAmsEnvironmentContext(context);
              return parseCD(context.parser);
            },
            htmlBuilder: array_htmlBuilder,
            mathmlBuilder: array_mathmlBuilder
          });
          defineMacro("\\nonumber", "\\gdef\\@eqnsw{0}");
          defineMacro("\\notag", "\\nonumber");
          defineFunction({
            type: "text",
            // Doesn't matter what this is.
            names: ["\\hline", "\\hdashline"],
            props: {
              numArgs: 0,
              allowedInText: true,
              allowedInMath: true
            },
            handler(context, args) {
              throw new src_ParseError(context.funcName + " valid only within array environment");
            }
          });
          const environments = _environments;
          var src_environments = environments;
          defineFunction({
            type: "environment",
            names: ["\\begin", "\\end"],
            props: {
              numArgs: 1,
              argTypes: ["text"]
            },
            handler(_ref, args) {
              let {
                parser,
                funcName
              } = _ref;
              const nameGroup = args[0];
              if (nameGroup.type !== "ordgroup") {
                throw new src_ParseError("Invalid environment name", nameGroup);
              }
              let envName = "";
              for (let i = 0; i < nameGroup.body.length; ++i) {
                envName += assertNodeType(nameGroup.body[i], "textord").text;
              }
              if (funcName === "\\begin") {
                if (!src_environments.hasOwnProperty(envName)) {
                  throw new src_ParseError("No such environment: " + envName, nameGroup);
                }
                const env = src_environments[envName];
                const {
                  args: args2,
                  optArgs
                } = parser.parseArguments("\\begin{" + envName + "}", env);
                const context = {
                  mode: parser.mode,
                  envName,
                  parser
                };
                const result = env.handler(context, args2, optArgs);
                parser.expect("\\end", false);
                const endNameToken = parser.nextToken;
                const end = assertNodeType(parser.parseFunction(), "environment");
                if (end.name !== envName) {
                  throw new src_ParseError("Mismatch: \\begin{" + envName + "} matched by \\end{" + end.name + "}", endNameToken);
                }
                return result;
              }
              return {
                type: "environment",
                mode: parser.mode,
                name: envName,
                nameGroup
              };
            }
          });
          const font_htmlBuilder = (group, options) => {
            const font = group.font;
            const newOptions = options.withFont(font);
            return buildGroup(group.body, newOptions);
          };
          const font_mathmlBuilder = (group, options) => {
            const font = group.font;
            const newOptions = options.withFont(font);
            return buildMathML_buildGroup(group.body, newOptions);
          };
          const fontAliases = {
            "\\Bbb": "\\mathbb",
            "\\bold": "\\mathbf",
            "\\frak": "\\mathfrak",
            "\\bm": "\\boldsymbol"
          };
          defineFunction({
            type: "font",
            names: [
              // styles, except \boldsymbol defined below
              "\\mathrm",
              "\\mathit",
              "\\mathbf",
              "\\mathnormal",
              "\\mathsfit",
              // families
              "\\mathbb",
              "\\mathcal",
              "\\mathfrak",
              "\\mathscr",
              "\\mathsf",
              "\\mathtt",
              // aliases, except \bm defined below
              "\\Bbb",
              "\\bold",
              "\\frak"
            ],
            props: {
              numArgs: 1,
              allowedInArgument: true
            },
            handler: (_ref, args) => {
              let {
                parser,
                funcName
              } = _ref;
              const body = normalizeArgument(args[0]);
              let func = funcName;
              if (func in fontAliases) {
                func = fontAliases[func];
              }
              return {
                type: "font",
                mode: parser.mode,
                font: func.slice(1),
                body
              };
            },
            htmlBuilder: font_htmlBuilder,
            mathmlBuilder: font_mathmlBuilder
          });
          defineFunction({
            type: "mclass",
            names: ["\\boldsymbol", "\\bm"],
            props: {
              numArgs: 1
            },
            handler: (_ref2, args) => {
              let {
                parser
              } = _ref2;
              const body = args[0];
              const isCharacterBox2 = utils.isCharacterBox(body);
              return {
                type: "mclass",
                mode: parser.mode,
                mclass: binrelClass(body),
                body: [{
                  type: "font",
                  mode: parser.mode,
                  font: "boldsymbol",
                  body
                }],
                isCharacterBox: isCharacterBox2
              };
            }
          });
          defineFunction({
            type: "font",
            names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
            props: {
              numArgs: 0,
              allowedInText: true
            },
            handler: (_ref3, args) => {
              let {
                parser,
                funcName,
                breakOnTokenText
              } = _ref3;
              const {
                mode
              } = parser;
              const body = parser.parseExpression(true, breakOnTokenText);
              const style = "math" + funcName.slice(1);
              return {
                type: "font",
                mode,
                font: style,
                body: {
                  type: "ordgroup",
                  mode: parser.mode,
                  body
                }
              };
            },
            htmlBuilder: font_htmlBuilder,
            mathmlBuilder: font_mathmlBuilder
          });
          const adjustStyle = (size, originalStyle) => {
            let style = originalStyle;
            if (size === "display") {
              style = style.id >= src_Style.SCRIPT.id ? style.text() : src_Style.DISPLAY;
            } else if (size === "text" && style.size === src_Style.DISPLAY.size) {
              style = src_Style.TEXT;
            } else if (size === "script") {
              style = src_Style.SCRIPT;
            } else if (size === "scriptscript") {
              style = src_Style.SCRIPTSCRIPT;
            }
            return style;
          };
          const genfrac_htmlBuilder = (group, options) => {
            const style = adjustStyle(group.size, options.style);
            const nstyle = style.fracNum();
            const dstyle = style.fracDen();
            let newOptions;
            newOptions = options.havingStyle(nstyle);
            const numerm = buildGroup(group.numer, newOptions, options);
            if (group.continued) {
              const hStrut = 8.5 / options.fontMetrics().ptPerEm;
              const dStrut = 3.5 / options.fontMetrics().ptPerEm;
              numerm.height = numerm.height < hStrut ? hStrut : numerm.height;
              numerm.depth = numerm.depth < dStrut ? dStrut : numerm.depth;
            }
            newOptions = options.havingStyle(dstyle);
            const denomm = buildGroup(group.denom, newOptions, options);
            let rule;
            let ruleWidth;
            let ruleSpacing;
            if (group.hasBarLine) {
              if (group.barSize) {
                ruleWidth = calculateSize(group.barSize, options);
                rule = buildCommon.makeLineSpan("frac-line", options, ruleWidth);
              } else {
                rule = buildCommon.makeLineSpan("frac-line", options);
              }
              ruleWidth = rule.height;
              ruleSpacing = rule.height;
            } else {
              rule = null;
              ruleWidth = 0;
              ruleSpacing = options.fontMetrics().defaultRuleThickness;
            }
            let numShift;
            let clearance;
            let denomShift;
            if (style.size === src_Style.DISPLAY.size || group.size === "display") {
              numShift = options.fontMetrics().num1;
              if (ruleWidth > 0) {
                clearance = 3 * ruleSpacing;
              } else {
                clearance = 7 * ruleSpacing;
              }
              denomShift = options.fontMetrics().denom1;
            } else {
              if (ruleWidth > 0) {
                numShift = options.fontMetrics().num2;
                clearance = ruleSpacing;
              } else {
                numShift = options.fontMetrics().num3;
                clearance = 3 * ruleSpacing;
              }
              denomShift = options.fontMetrics().denom2;
            }
            let frac;
            if (!rule) {
              const candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);
              if (candidateClearance < clearance) {
                numShift += 0.5 * (clearance - candidateClearance);
                denomShift += 0.5 * (clearance - candidateClearance);
              }
              frac = buildCommon.makeVList({
                positionType: "individualShift",
                children: [{
                  type: "elem",
                  elem: denomm,
                  shift: denomShift
                }, {
                  type: "elem",
                  elem: numerm,
                  shift: -numShift
                }]
              }, options);
            } else {
              const axisHeight = options.fontMetrics().axisHeight;
              if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {
                numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));
              }
              if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {
                denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));
              }
              const midShift = -(axisHeight - 0.5 * ruleWidth);
              frac = buildCommon.makeVList({
                positionType: "individualShift",
                children: [{
                  type: "elem",
                  elem: denomm,
                  shift: denomShift
                }, {
                  type: "elem",
                  elem: rule,
                  shift: midShift
                }, {
                  type: "elem",
                  elem: numerm,
                  shift: -numShift
                }]
              }, options);
            }
            newOptions = options.havingStyle(style);
            frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;
            frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier;
            let delimSize;
            if (style.size === src_Style.DISPLAY.size) {
              delimSize = options.fontMetrics().delim1;
            } else if (style.size === src_Style.SCRIPTSCRIPT.size) {
              delimSize = options.havingStyle(src_Style.SCRIPT).fontMetrics().delim2;
            } else {
              delimSize = options.fontMetrics().delim2;
            }
            let leftDelim;
            let rightDelim;
            if (group.leftDelim == null) {
              leftDelim = makeNullDelimiter(options, ["mopen"]);
            } else {
              leftDelim = delimiter.customSizedDelim(group.leftDelim, delimSize, true, options.havingStyle(style), group.mode, ["mopen"]);
            }
            if (group.continued) {
              rightDelim = buildCommon.makeSpan([]);
            } else if (group.rightDelim == null) {
              rightDelim = makeNullDelimiter(options, ["mclose"]);
            } else {
              rightDelim = delimiter.customSizedDelim(group.rightDelim, delimSize, true, options.havingStyle(style), group.mode, ["mclose"]);
            }
            return buildCommon.makeSpan(["mord"].concat(newOptions.sizingClasses(options)), [leftDelim, buildCommon.makeSpan(["mfrac"], [frac]), rightDelim], options);
          };
          const genfrac_mathmlBuilder = (group, options) => {
            let node = new mathMLTree.MathNode("mfrac", [buildMathML_buildGroup(group.numer, options), buildMathML_buildGroup(group.denom, options)]);
            if (!group.hasBarLine) {
              node.setAttribute("linethickness", "0px");
            } else if (group.barSize) {
              const ruleWidth = calculateSize(group.barSize, options);
              node.setAttribute("linethickness", makeEm(ruleWidth));
            }
            const style = adjustStyle(group.size, options.style);
            if (style.size !== options.style.size) {
              node = new mathMLTree.MathNode("mstyle", [node]);
              const isDisplay = style.size === src_Style.DISPLAY.size ? "true" : "false";
              node.setAttribute("displaystyle", isDisplay);
              node.setAttribute("scriptlevel", "0");
            }
            if (group.leftDelim != null || group.rightDelim != null) {
              const withDelims = [];
              if (group.leftDelim != null) {
                const leftOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.leftDelim.replace("\\", ""))]);
                leftOp.setAttribute("fence", "true");
                withDelims.push(leftOp);
              }
              withDelims.push(node);
              if (group.rightDelim != null) {
                const rightOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.rightDelim.replace("\\", ""))]);
                rightOp.setAttribute("fence", "true");
                withDelims.push(rightOp);
              }
              return makeRow(withDelims);
            }
            return node;
          };
          defineFunction({
            type: "genfrac",
            names: [
              "\\dfrac",
              "\\frac",
              "\\tfrac",
              "\\dbinom",
              "\\binom",
              "\\tbinom",
              "\\\\atopfrac",
              // can’t be entered directly
              "\\\\bracefrac",
              "\\\\brackfrac"
              // ditto
            ],
            props: {
              numArgs: 2,
              allowedInArgument: true
            },
            handler: (_ref, args) => {
              let {
                parser,
                funcName
              } = _ref;
              const numer = args[0];
              const denom = args[1];
              let hasBarLine;
              let leftDelim = null;
              let rightDelim = null;
              let size = "auto";
              switch (funcName) {
                case "\\dfrac":
                case "\\frac":
                case "\\tfrac":
                  hasBarLine = true;
                  break;
                case "\\\\atopfrac":
                  hasBarLine = false;
                  break;
                case "\\dbinom":
                case "\\binom":
                case "\\tbinom":
                  hasBarLine = false;
                  leftDelim = "(";
                  rightDelim = ")";
                  break;
                case "\\\\bracefrac":
                  hasBarLine = false;
                  leftDelim = "\\{";
                  rightDelim = "\\}";
                  break;
                case "\\\\brackfrac":
                  hasBarLine = false;
                  leftDelim = "[";
                  rightDelim = "]";
                  break;
                default:
                  throw new Error("Unrecognized genfrac command");
              }
              switch (funcName) {
                case "\\dfrac":
                case "\\dbinom":
                  size = "display";
                  break;
                case "\\tfrac":
                case "\\tbinom":
                  size = "text";
                  break;
              }
              return {
                type: "genfrac",
                mode: parser.mode,
                continued: false,
                numer,
                denom,
                hasBarLine,
                leftDelim,
                rightDelim,
                size,
                barSize: null
              };
            },
            htmlBuilder: genfrac_htmlBuilder,
            mathmlBuilder: genfrac_mathmlBuilder
          });
          defineFunction({
            type: "genfrac",
            names: ["\\cfrac"],
            props: {
              numArgs: 2
            },
            handler: (_ref2, args) => {
              let {
                parser,
                funcName
              } = _ref2;
              const numer = args[0];
              const denom = args[1];
              return {
                type: "genfrac",
                mode: parser.mode,
                continued: true,
                numer,
                denom,
                hasBarLine: true,
                leftDelim: null,
                rightDelim: null,
                size: "display",
                barSize: null
              };
            }
          });
          defineFunction({
            type: "infix",
            names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
            props: {
              numArgs: 0,
              infix: true
            },
            handler(_ref3) {
              let {
                parser,
                funcName,
                token
              } = _ref3;
              let replaceWith;
              switch (funcName) {
                case "\\over":
                  replaceWith = "\\frac";
                  break;
                case "\\choose":
                  replaceWith = "\\binom";
                  break;
                case "\\atop":
                  replaceWith = "\\\\atopfrac";
                  break;
                case "\\brace":
                  replaceWith = "\\\\bracefrac";
                  break;
                case "\\brack":
                  replaceWith = "\\\\brackfrac";
                  break;
                default:
                  throw new Error("Unrecognized infix genfrac command");
              }
              return {
                type: "infix",
                mode: parser.mode,
                replaceWith,
                token
              };
            }
          });
          const stylArray = ["display", "text", "script", "scriptscript"];
          const delimFromValue = function(delimString) {
            let delim = null;
            if (delimString.length > 0) {
              delim = delimString;
              delim = delim === "." ? null : delim;
            }
            return delim;
          };
          defineFunction({
            type: "genfrac",
            names: ["\\genfrac"],
            props: {
              numArgs: 6,
              allowedInArgument: true,
              argTypes: ["math", "math", "size", "text", "math", "math"]
            },
            handler(_ref4, args) {
              let {
                parser
              } = _ref4;
              const numer = args[4];
              const denom = args[5];
              const leftNode = normalizeArgument(args[0]);
              const leftDelim = leftNode.type === "atom" && leftNode.family === "open" ? delimFromValue(leftNode.text) : null;
              const rightNode = normalizeArgument(args[1]);
              const rightDelim = rightNode.type === "atom" && rightNode.family === "close" ? delimFromValue(rightNode.text) : null;
              const barNode = assertNodeType(args[2], "size");
              let hasBarLine;
              let barSize = null;
              if (barNode.isBlank) {
                hasBarLine = true;
              } else {
                barSize = barNode.value;
                hasBarLine = barSize.number > 0;
              }
              let size = "auto";
              let styl = args[3];
              if (styl.type === "ordgroup") {
                if (styl.body.length > 0) {
                  const textOrd = assertNodeType(styl.body[0], "textord");
                  size = stylArray[Number(textOrd.text)];
                }
              } else {
                styl = assertNodeType(styl, "textord");
                size = stylArray[Number(styl.text)];
              }
              return {
                type: "genfrac",
                mode: parser.mode,
                numer,
                denom,
                continued: false,
                hasBarLine,
                barSize,
                leftDelim,
                rightDelim,
                size
              };
            },
            htmlBuilder: genfrac_htmlBuilder,
            mathmlBuilder: genfrac_mathmlBuilder
          });
          defineFunction({
            type: "infix",
            names: ["\\above"],
            props: {
              numArgs: 1,
              argTypes: ["size"],
              infix: true
            },
            handler(_ref5, args) {
              let {
                parser,
                funcName,
                token
              } = _ref5;
              return {
                type: "infix",
                mode: parser.mode,
                replaceWith: "\\\\abovefrac",
                size: assertNodeType(args[0], "size").value,
                token
              };
            }
          });
          defineFunction({
            type: "genfrac",
            names: ["\\\\abovefrac"],
            props: {
              numArgs: 3,
              argTypes: ["math", "size", "math"]
            },
            handler: (_ref6, args) => {
              let {
                parser,
                funcName
              } = _ref6;
              const numer = args[0];
              const barSize = assert(assertNodeType(args[1], "infix").size);
              const denom = args[2];
              const hasBarLine = barSize.number > 0;
              return {
                type: "genfrac",
                mode: parser.mode,
                numer,
                denom,
                continued: false,
                hasBarLine,
                barSize,
                leftDelim: null,
                rightDelim: null,
                size: "auto"
              };
            },
            htmlBuilder: genfrac_htmlBuilder,
            mathmlBuilder: genfrac_mathmlBuilder
          });
          const horizBrace_htmlBuilder = (grp, options) => {
            const style = options.style;
            let supSubGroup;
            let group;
            if (grp.type === "supsub") {
              supSubGroup = grp.sup ? buildGroup(grp.sup, options.havingStyle(style.sup()), options) : buildGroup(grp.sub, options.havingStyle(style.sub()), options);
              group = assertNodeType(grp.base, "horizBrace");
            } else {
              group = assertNodeType(grp, "horizBrace");
            }
            const body = buildGroup(group.base, options.havingBaseStyle(src_Style.DISPLAY));
            const braceBody = stretchy.svgSpan(group, options);
            let vlist;
            if (group.isOver) {
              vlist = buildCommon.makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: body
                }, {
                  type: "kern",
                  size: 0.1
                }, {
                  type: "elem",
                  elem: braceBody
                }]
              }, options);
              vlist.children[0].children[0].children[1].classes.push("svg-align");
            } else {
              vlist = buildCommon.makeVList({
                positionType: "bottom",
                positionData: body.depth + 0.1 + braceBody.height,
                children: [{
                  type: "elem",
                  elem: braceBody
                }, {
                  type: "kern",
                  size: 0.1
                }, {
                  type: "elem",
                  elem: body
                }]
              }, options);
              vlist.children[0].children[0].children[0].classes.push("svg-align");
            }
            if (supSubGroup) {
              const vSpan = buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
              if (group.isOver) {
                vlist = buildCommon.makeVList({
                  positionType: "firstBaseline",
                  children: [{
                    type: "elem",
                    elem: vSpan
                  }, {
                    type: "kern",
                    size: 0.2
                  }, {
                    type: "elem",
                    elem: supSubGroup
                  }]
                }, options);
              } else {
                vlist = buildCommon.makeVList({
                  positionType: "bottom",
                  positionData: vSpan.depth + 0.2 + supSubGroup.height + supSubGroup.depth,
                  children: [{
                    type: "elem",
                    elem: supSubGroup
                  }, {
                    type: "kern",
                    size: 0.2
                  }, {
                    type: "elem",
                    elem: vSpan
                  }]
                }, options);
              }
            }
            return buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
          };
          const horizBrace_mathmlBuilder = (group, options) => {
            const accentNode = stretchy.mathMLnode(group.label);
            return new mathMLTree.MathNode(group.isOver ? "mover" : "munder", [buildMathML_buildGroup(group.base, options), accentNode]);
          };
          defineFunction({
            type: "horizBrace",
            names: ["\\overbrace", "\\underbrace"],
            props: {
              numArgs: 1
            },
            handler(_ref, args) {
              let {
                parser,
                funcName
              } = _ref;
              return {
                type: "horizBrace",
                mode: parser.mode,
                label: funcName,
                isOver: /^\\over/.test(funcName),
                base: args[0]
              };
            },
            htmlBuilder: horizBrace_htmlBuilder,
            mathmlBuilder: horizBrace_mathmlBuilder
          });
          defineFunction({
            type: "href",
            names: ["\\href"],
            props: {
              numArgs: 2,
              argTypes: ["url", "original"],
              allowedInText: true
            },
            handler: (_ref, args) => {
              let {
                parser
              } = _ref;
              const body = args[1];
              const href = assertNodeType(args[0], "url").url;
              if (!parser.settings.isTrusted({
                command: "\\href",
                url: href
              })) {
                return parser.formatUnsupportedCmd("\\href");
              }
              return {
                type: "href",
                mode: parser.mode,
                href,
                body: ordargument(body)
              };
            },
            htmlBuilder: (group, options) => {
              const elements = buildExpression(group.body, options, false);
              return buildCommon.makeAnchor(group.href, [], elements, options);
            },
            mathmlBuilder: (group, options) => {
              let math2 = buildExpressionRow(group.body, options);
              if (!(math2 instanceof MathNode)) {
                math2 = new MathNode("mrow", [math2]);
              }
              math2.setAttribute("href", group.href);
              return math2;
            }
          });
          defineFunction({
            type: "href",
            names: ["\\url"],
            props: {
              numArgs: 1,
              argTypes: ["url"],
              allowedInText: true
            },
            handler: (_ref2, args) => {
              let {
                parser
              } = _ref2;
              const href = assertNodeType(args[0], "url").url;
              if (!parser.settings.isTrusted({
                command: "\\url",
                url: href
              })) {
                return parser.formatUnsupportedCmd("\\url");
              }
              const chars = [];
              for (let i = 0; i < href.length; i++) {
                let c = href[i];
                if (c === "~") {
                  c = "\\textasciitilde";
                }
                chars.push({
                  type: "textord",
                  mode: "text",
                  text: c
                });
              }
              const body = {
                type: "text",
                mode: parser.mode,
                font: "\\texttt",
                body: chars
              };
              return {
                type: "href",
                mode: parser.mode,
                href,
                body: ordargument(body)
              };
            }
          });
          defineFunction({
            type: "hbox",
            names: ["\\hbox"],
            props: {
              numArgs: 1,
              argTypes: ["text"],
              allowedInText: true,
              primitive: true
            },
            handler(_ref, args) {
              let {
                parser
              } = _ref;
              return {
                type: "hbox",
                mode: parser.mode,
                body: ordargument(args[0])
              };
            },
            htmlBuilder(group, options) {
              const elements = buildExpression(group.body, options, false);
              return buildCommon.makeFragment(elements);
            },
            mathmlBuilder(group, options) {
              return new mathMLTree.MathNode("mrow", buildMathML_buildExpression(group.body, options));
            }
          });
          defineFunction({
            type: "html",
            names: ["\\htmlClass", "\\htmlId", "\\htmlStyle", "\\htmlData"],
            props: {
              numArgs: 2,
              argTypes: ["raw", "original"],
              allowedInText: true
            },
            handler: (_ref, args) => {
              let {
                parser,
                funcName,
                token
              } = _ref;
              const value = assertNodeType(args[0], "raw").string;
              const body = args[1];
              if (parser.settings.strict) {
                parser.settings.reportNonstrict("htmlExtension", "HTML extension is disabled on strict mode");
              }
              let trustContext;
              const attributes = {};
              switch (funcName) {
                case "\\htmlClass":
                  attributes.class = value;
                  trustContext = {
                    command: "\\htmlClass",
                    class: value
                  };
                  break;
                case "\\htmlId":
                  attributes.id = value;
                  trustContext = {
                    command: "\\htmlId",
                    id: value
                  };
                  break;
                case "\\htmlStyle":
                  attributes.style = value;
                  trustContext = {
                    command: "\\htmlStyle",
                    style: value
                  };
                  break;
                case "\\htmlData": {
                  const data = value.split(",");
                  for (let i = 0; i < data.length; i++) {
                    const keyVal = data[i].split("=");
                    if (keyVal.length !== 2) {
                      throw new src_ParseError("Error parsing key-value for \\htmlData");
                    }
                    attributes["data-" + keyVal[0].trim()] = keyVal[1].trim();
                  }
                  trustContext = {
                    command: "\\htmlData",
                    attributes
                  };
                  break;
                }
                default:
                  throw new Error("Unrecognized html command");
              }
              if (!parser.settings.isTrusted(trustContext)) {
                return parser.formatUnsupportedCmd(funcName);
              }
              return {
                type: "html",
                mode: parser.mode,
                attributes,
                body: ordargument(body)
              };
            },
            htmlBuilder: (group, options) => {
              const elements = buildExpression(group.body, options, false);
              const classes = ["enclosing"];
              if (group.attributes.class) {
                classes.push(...group.attributes.class.trim().split(/\s+/));
              }
              const span = buildCommon.makeSpan(classes, elements, options);
              for (const attr in group.attributes) {
                if (attr !== "class" && group.attributes.hasOwnProperty(attr)) {
                  span.setAttribute(attr, group.attributes[attr]);
                }
              }
              return span;
            },
            mathmlBuilder: (group, options) => {
              return buildExpressionRow(group.body, options);
            }
          });
          defineFunction({
            type: "htmlmathml",
            names: ["\\html@mathml"],
            props: {
              numArgs: 2,
              allowedInText: true
            },
            handler: (_ref, args) => {
              let {
                parser
              } = _ref;
              return {
                type: "htmlmathml",
                mode: parser.mode,
                html: ordargument(args[0]),
                mathml: ordargument(args[1])
              };
            },
            htmlBuilder: (group, options) => {
              const elements = buildExpression(group.html, options, false);
              return buildCommon.makeFragment(elements);
            },
            mathmlBuilder: (group, options) => {
              return buildExpressionRow(group.mathml, options);
            }
          });
          const sizeData = function(str) {
            if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(str)) {
              return {
                number: +str,
                unit: "bp"
              };
            } else {
              const match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(str);
              if (!match) {
                throw new src_ParseError("Invalid size: '" + str + "' in \\includegraphics");
              }
              const data = {
                number: +(match[1] + match[2]),
                // sign + magnitude, cast to number
                unit: match[3]
              };
              if (!validUnit(data)) {
                throw new src_ParseError("Invalid unit: '" + data.unit + "' in \\includegraphics.");
              }
              return data;
            }
          };
          defineFunction({
            type: "includegraphics",
            names: ["\\includegraphics"],
            props: {
              numArgs: 1,
              numOptionalArgs: 1,
              argTypes: ["raw", "url"],
              allowedInText: false
            },
            handler: (_ref, args, optArgs) => {
              let {
                parser
              } = _ref;
              let width = {
                number: 0,
                unit: "em"
              };
              let height = {
                number: 0.9,
                unit: "em"
              };
              let totalheight = {
                number: 0,
                unit: "em"
              };
              let alt = "";
              if (optArgs[0]) {
                const attributeStr = assertNodeType(optArgs[0], "raw").string;
                const attributes = attributeStr.split(",");
                for (let i = 0; i < attributes.length; i++) {
                  const keyVal = attributes[i].split("=");
                  if (keyVal.length === 2) {
                    const str = keyVal[1].trim();
                    switch (keyVal[0].trim()) {
                      case "alt":
                        alt = str;
                        break;
                      case "width":
                        width = sizeData(str);
                        break;
                      case "height":
                        height = sizeData(str);
                        break;
                      case "totalheight":
                        totalheight = sizeData(str);
                        break;
                      default:
                        throw new src_ParseError("Invalid key: '" + keyVal[0] + "' in \\includegraphics.");
                    }
                  }
                }
              }
              const src = assertNodeType(args[0], "url").url;
              if (alt === "") {
                alt = src;
                alt = alt.replace(/^.*[\\/]/, "");
                alt = alt.substring(0, alt.lastIndexOf("."));
              }
              if (!parser.settings.isTrusted({
                command: "\\includegraphics",
                url: src
              })) {
                return parser.formatUnsupportedCmd("\\includegraphics");
              }
              return {
                type: "includegraphics",
                mode: parser.mode,
                alt,
                width,
                height,
                totalheight,
                src
              };
            },
            htmlBuilder: (group, options) => {
              const height = calculateSize(group.height, options);
              let depth = 0;
              if (group.totalheight.number > 0) {
                depth = calculateSize(group.totalheight, options) - height;
              }
              let width = 0;
              if (group.width.number > 0) {
                width = calculateSize(group.width, options);
              }
              const style = {
                height: makeEm(height + depth)
              };
              if (width > 0) {
                style.width = makeEm(width);
              }
              if (depth > 0) {
                style.verticalAlign = makeEm(-depth);
              }
              const node = new Img(group.src, group.alt, style);
              node.height = height;
              node.depth = depth;
              return node;
            },
            mathmlBuilder: (group, options) => {
              const node = new mathMLTree.MathNode("mglyph", []);
              node.setAttribute("alt", group.alt);
              const height = calculateSize(group.height, options);
              let depth = 0;
              if (group.totalheight.number > 0) {
                depth = calculateSize(group.totalheight, options) - height;
                node.setAttribute("valign", makeEm(-depth));
              }
              node.setAttribute("height", makeEm(height + depth));
              if (group.width.number > 0) {
                const width = calculateSize(group.width, options);
                node.setAttribute("width", makeEm(width));
              }
              node.setAttribute("src", group.src);
              return node;
            }
          });
          defineFunction({
            type: "kern",
            names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
            props: {
              numArgs: 1,
              argTypes: ["size"],
              primitive: true,
              allowedInText: true
            },
            handler(_ref, args) {
              let {
                parser,
                funcName
              } = _ref;
              const size = assertNodeType(args[0], "size");
              if (parser.settings.strict) {
                const mathFunction = funcName[1] === "m";
                const muUnit = size.value.unit === "mu";
                if (mathFunction) {
                  if (!muUnit) {
                    parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " supports only mu units, " + ("not " + size.value.unit + " units"));
                  }
                  if (parser.mode !== "math") {
                    parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " works only in math mode");
                  }
                } else {
                  if (muUnit) {
                    parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " doesn't support mu units");
                  }
                }
              }
              return {
                type: "kern",
                mode: parser.mode,
                dimension: size.value
              };
            },
            htmlBuilder(group, options) {
              return buildCommon.makeGlue(group.dimension, options);
            },
            mathmlBuilder(group, options) {
              const dimension = calculateSize(group.dimension, options);
              return new mathMLTree.SpaceNode(dimension);
            }
          });
          defineFunction({
            type: "lap",
            names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
            props: {
              numArgs: 1,
              allowedInText: true
            },
            handler: (_ref, args) => {
              let {
                parser,
                funcName
              } = _ref;
              const body = args[0];
              return {
                type: "lap",
                mode: parser.mode,
                alignment: funcName.slice(5),
                body
              };
            },
            htmlBuilder: (group, options) => {
              let inner2;
              if (group.alignment === "clap") {
                inner2 = buildCommon.makeSpan([], [buildGroup(group.body, options)]);
                inner2 = buildCommon.makeSpan(["inner"], [inner2], options);
              } else {
                inner2 = buildCommon.makeSpan(["inner"], [buildGroup(group.body, options)]);
              }
              const fix = buildCommon.makeSpan(["fix"], []);
              let node = buildCommon.makeSpan([group.alignment], [inner2, fix], options);
              const strut = buildCommon.makeSpan(["strut"]);
              strut.style.height = makeEm(node.height + node.depth);
              if (node.depth) {
                strut.style.verticalAlign = makeEm(-node.depth);
              }
              node.children.unshift(strut);
              node = buildCommon.makeSpan(["thinbox"], [node], options);
              return buildCommon.makeSpan(["mord", "vbox"], [node], options);
            },
            mathmlBuilder: (group, options) => {
              const node = new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)]);
              if (group.alignment !== "rlap") {
                const offset = group.alignment === "llap" ? "-1" : "-0.5";
                node.setAttribute("lspace", offset + "width");
              }
              node.setAttribute("width", "0px");
              return node;
            }
          });
          defineFunction({
            type: "styling",
            names: ["\\(", "$"],
            props: {
              numArgs: 0,
              allowedInText: true,
              allowedInMath: false
            },
            handler(_ref, args) {
              let {
                funcName,
                parser
              } = _ref;
              const outerMode = parser.mode;
              parser.switchMode("math");
              const close = funcName === "\\(" ? "\\)" : "$";
              const body = parser.parseExpression(false, close);
              parser.expect(close);
              parser.switchMode(outerMode);
              return {
                type: "styling",
                mode: parser.mode,
                style: "text",
                body
              };
            }
          });
          defineFunction({
            type: "text",
            // Doesn't matter what this is.
            names: ["\\)", "\\]"],
            props: {
              numArgs: 0,
              allowedInText: true,
              allowedInMath: false
            },
            handler(context, args) {
              throw new src_ParseError("Mismatched " + context.funcName);
            }
          });
          const chooseMathStyle = (group, options) => {
            switch (options.style.size) {
              case src_Style.DISPLAY.size:
                return group.display;
              case src_Style.TEXT.size:
                return group.text;
              case src_Style.SCRIPT.size:
                return group.script;
              case src_Style.SCRIPTSCRIPT.size:
                return group.scriptscript;
              default:
                return group.text;
            }
          };
          defineFunction({
            type: "mathchoice",
            names: ["\\mathchoice"],
            props: {
              numArgs: 4,
              primitive: true
            },
            handler: (_ref, args) => {
              let {
                parser
              } = _ref;
              return {
                type: "mathchoice",
                mode: parser.mode,
                display: ordargument(args[0]),
                text: ordargument(args[1]),
                script: ordargument(args[2]),
                scriptscript: ordargument(args[3])
              };
            },
            htmlBuilder: (group, options) => {
              const body = chooseMathStyle(group, options);
              const elements = buildExpression(body, options, false);
              return buildCommon.makeFragment(elements);
            },
            mathmlBuilder: (group, options) => {
              const body = chooseMathStyle(group, options);
              return buildExpressionRow(body, options);
            }
          });
          const assembleSupSub = (base, supGroup, subGroup, options, style, slant, baseShift) => {
            base = buildCommon.makeSpan([], [base]);
            const subIsSingleCharacter = subGroup && utils.isCharacterBox(subGroup);
            let sub2;
            let sup2;
            if (supGroup) {
              const elem = buildGroup(supGroup, options.havingStyle(style.sup()), options);
              sup2 = {
                elem,
                kern: Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - elem.depth)
              };
            }
            if (subGroup) {
              const elem = buildGroup(subGroup, options.havingStyle(style.sub()), options);
              sub2 = {
                elem,
                kern: Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - elem.height)
              };
            }
            let finalGroup;
            if (sup2 && sub2) {
              const bottom = options.fontMetrics().bigOpSpacing5 + sub2.elem.height + sub2.elem.depth + sub2.kern + base.depth + baseShift;
              finalGroup = buildCommon.makeVList({
                positionType: "bottom",
                positionData: bottom,
                children: [{
                  type: "kern",
                  size: options.fontMetrics().bigOpSpacing5
                }, {
                  type: "elem",
                  elem: sub2.elem,
                  marginLeft: makeEm(-slant)
                }, {
                  type: "kern",
                  size: sub2.kern
                }, {
                  type: "elem",
                  elem: base
                }, {
                  type: "kern",
                  size: sup2.kern
                }, {
                  type: "elem",
                  elem: sup2.elem,
                  marginLeft: makeEm(slant)
                }, {
                  type: "kern",
                  size: options.fontMetrics().bigOpSpacing5
                }]
              }, options);
            } else if (sub2) {
              const top = base.height - baseShift;
              finalGroup = buildCommon.makeVList({
                positionType: "top",
                positionData: top,
                children: [{
                  type: "kern",
                  size: options.fontMetrics().bigOpSpacing5
                }, {
                  type: "elem",
                  elem: sub2.elem,
                  marginLeft: makeEm(-slant)
                }, {
                  type: "kern",
                  size: sub2.kern
                }, {
                  type: "elem",
                  elem: base
                }]
              }, options);
            } else if (sup2) {
              const bottom = base.depth + baseShift;
              finalGroup = buildCommon.makeVList({
                positionType: "bottom",
                positionData: bottom,
                children: [{
                  type: "elem",
                  elem: base
                }, {
                  type: "kern",
                  size: sup2.kern
                }, {
                  type: "elem",
                  elem: sup2.elem,
                  marginLeft: makeEm(slant)
                }, {
                  type: "kern",
                  size: options.fontMetrics().bigOpSpacing5
                }]
              }, options);
            } else {
              return base;
            }
            const parts = [finalGroup];
            if (sub2 && slant !== 0 && !subIsSingleCharacter) {
              const spacer = buildCommon.makeSpan(["mspace"], [], options);
              spacer.style.marginRight = makeEm(slant);
              parts.unshift(spacer);
            }
            return buildCommon.makeSpan(["mop", "op-limits"], parts, options);
          };
          const noSuccessor = ["\\smallint"];
          const op_htmlBuilder = (grp, options) => {
            let supGroup;
            let subGroup;
            let hasLimits = false;
            let group;
            if (grp.type === "supsub") {
              supGroup = grp.sup;
              subGroup = grp.sub;
              group = assertNodeType(grp.base, "op");
              hasLimits = true;
            } else {
              group = assertNodeType(grp, "op");
            }
            const style = options.style;
            let large = false;
            if (style.size === src_Style.DISPLAY.size && group.symbol && !utils.contains(noSuccessor, group.name)) {
              large = true;
            }
            let base;
            if (group.symbol) {
              const fontName = large ? "Size2-Regular" : "Size1-Regular";
              let stash = "";
              if (group.name === "\\oiint" || group.name === "\\oiiint") {
                stash = group.name.slice(1);
                group.name = stash === "oiint" ? "\\iint" : "\\iiint";
              }
              base = buildCommon.makeSymbol(group.name, fontName, "math", options, ["mop", "op-symbol", large ? "large-op" : "small-op"]);
              if (stash.length > 0) {
                const italic = base.italic;
                const oval = buildCommon.staticSvg(stash + "Size" + (large ? "2" : "1"), options);
                base = buildCommon.makeVList({
                  positionType: "individualShift",
                  children: [{
                    type: "elem",
                    elem: base,
                    shift: 0
                  }, {
                    type: "elem",
                    elem: oval,
                    shift: large ? 0.08 : 0
                  }]
                }, options);
                group.name = "\\" + stash;
                base.classes.unshift("mop");
                base.italic = italic;
              }
            } else if (group.body) {
              const inner2 = buildExpression(group.body, options, true);
              if (inner2.length === 1 && inner2[0] instanceof SymbolNode) {
                base = inner2[0];
                base.classes[0] = "mop";
              } else {
                base = buildCommon.makeSpan(["mop"], inner2, options);
              }
            } else {
              const output = [];
              for (let i = 1; i < group.name.length; i++) {
                output.push(buildCommon.mathsym(group.name[i], group.mode, options));
              }
              base = buildCommon.makeSpan(["mop"], output, options);
            }
            let baseShift = 0;
            let slant = 0;
            if ((base instanceof SymbolNode || group.name === "\\oiint" || group.name === "\\oiiint") && !group.suppressBaseShift) {
              baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight;
              slant = base.italic;
            }
            if (hasLimits) {
              return assembleSupSub(base, supGroup, subGroup, options, style, slant, baseShift);
            } else {
              if (baseShift) {
                base.style.position = "relative";
                base.style.top = makeEm(baseShift);
              }
              return base;
            }
          };
          const op_mathmlBuilder = (group, options) => {
            let node;
            if (group.symbol) {
              node = new MathNode("mo", [makeText(group.name, group.mode)]);
              if (utils.contains(noSuccessor, group.name)) {
                node.setAttribute("largeop", "false");
              }
            } else if (group.body) {
              node = new MathNode("mo", buildMathML_buildExpression(group.body, options));
            } else {
              node = new MathNode("mi", [new TextNode(group.name.slice(1))]);
              const operator = new MathNode("mo", [makeText("⁡", "text")]);
              if (group.parentIsSupSub) {
                node = new MathNode("mrow", [node, operator]);
              } else {
                node = newDocumentFragment([node, operator]);
              }
            }
            return node;
          };
          const singleCharBigOps = {
            "∏": "\\prod",
            "∐": "\\coprod",
            "∑": "\\sum",
            "⋀": "\\bigwedge",
            "⋁": "\\bigvee",
            "⋂": "\\bigcap",
            "⋃": "\\bigcup",
            "⨀": "\\bigodot",
            "⨁": "\\bigoplus",
            "⨂": "\\bigotimes",
            "⨄": "\\biguplus",
            "⨆": "\\bigsqcup"
          };
          defineFunction({
            type: "op",
            names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "∏", "∐", "∑", "⋀", "⋁", "⋂", "⋃", "⨀", "⨁", "⨂", "⨄", "⨆"],
            props: {
              numArgs: 0
            },
            handler: (_ref, args) => {
              let {
                parser,
                funcName
              } = _ref;
              let fName = funcName;
              if (fName.length === 1) {
                fName = singleCharBigOps[fName];
              }
              return {
                type: "op",
                mode: parser.mode,
                limits: true,
                parentIsSupSub: false,
                symbol: true,
                name: fName
              };
            },
            htmlBuilder: op_htmlBuilder,
            mathmlBuilder: op_mathmlBuilder
          });
          defineFunction({
            type: "op",
            names: ["\\mathop"],
            props: {
              numArgs: 1,
              primitive: true
            },
            handler: (_ref2, args) => {
              let {
                parser
              } = _ref2;
              const body = args[0];
              return {
                type: "op",
                mode: parser.mode,
                limits: false,
                parentIsSupSub: false,
                symbol: false,
                body: ordargument(body)
              };
            },
            htmlBuilder: op_htmlBuilder,
            mathmlBuilder: op_mathmlBuilder
          });
          const singleCharIntegrals = {
            "∫": "\\int",
            "∬": "\\iint",
            "∭": "\\iiint",
            "∮": "\\oint",
            "∯": "\\oiint",
            "∰": "\\oiiint"
          };
          defineFunction({
            type: "op",
            names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
            props: {
              numArgs: 0
            },
            handler(_ref3) {
              let {
                parser,
                funcName
              } = _ref3;
              return {
                type: "op",
                mode: parser.mode,
                limits: false,
                parentIsSupSub: false,
                symbol: false,
                name: funcName
              };
            },
            htmlBuilder: op_htmlBuilder,
            mathmlBuilder: op_mathmlBuilder
          });
          defineFunction({
            type: "op",
            names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
            props: {
              numArgs: 0
            },
            handler(_ref4) {
              let {
                parser,
                funcName
              } = _ref4;
              return {
                type: "op",
                mode: parser.mode,
                limits: true,
                parentIsSupSub: false,
                symbol: false,
                name: funcName
              };
            },
            htmlBuilder: op_htmlBuilder,
            mathmlBuilder: op_mathmlBuilder
          });
          defineFunction({
            type: "op",
            names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "∫", "∬", "∭", "∮", "∯", "∰"],
            props: {
              numArgs: 0
            },
            handler(_ref5) {
              let {
                parser,
                funcName
              } = _ref5;
              let fName = funcName;
              if (fName.length === 1) {
                fName = singleCharIntegrals[fName];
              }
              return {
                type: "op",
                mode: parser.mode,
                limits: false,
                parentIsSupSub: false,
                symbol: true,
                name: fName
              };
            },
            htmlBuilder: op_htmlBuilder,
            mathmlBuilder: op_mathmlBuilder
          });
          const operatorname_htmlBuilder = (grp, options) => {
            let supGroup;
            let subGroup;
            let hasLimits = false;
            let group;
            if (grp.type === "supsub") {
              supGroup = grp.sup;
              subGroup = grp.sub;
              group = assertNodeType(grp.base, "operatorname");
              hasLimits = true;
            } else {
              group = assertNodeType(grp, "operatorname");
            }
            let base;
            if (group.body.length > 0) {
              const body = group.body.map((child) => {
                const childText = child.text;
                if (typeof childText === "string") {
                  return {
                    type: "textord",
                    mode: child.mode,
                    text: childText
                  };
                } else {
                  return child;
                }
              });
              const expression = buildExpression(body, options.withFont("mathrm"), true);
              for (let i = 0; i < expression.length; i++) {
                const child = expression[i];
                if (child instanceof SymbolNode) {
                  child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
                }
              }
              base = buildCommon.makeSpan(["mop"], expression, options);
            } else {
              base = buildCommon.makeSpan(["mop"], [], options);
            }
            if (hasLimits) {
              return assembleSupSub(base, supGroup, subGroup, options, options.style, 0, 0);
            } else {
              return base;
            }
          };
          const operatorname_mathmlBuilder = (group, options) => {
            let expression = buildMathML_buildExpression(group.body, options.withFont("mathrm"));
            let isAllString = true;
            for (let i = 0; i < expression.length; i++) {
              const node = expression[i];
              if (node instanceof mathMLTree.SpaceNode)
                ;
              else if (node instanceof mathMLTree.MathNode) {
                switch (node.type) {
                  case "mi":
                  case "mn":
                  case "ms":
                  case "mspace":
                  case "mtext":
                    break;
                  case "mo": {
                    const child = node.children[0];
                    if (node.children.length === 1 && child instanceof mathMLTree.TextNode) {
                      child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
                    } else {
                      isAllString = false;
                    }
                    break;
                  }
                  default:
                    isAllString = false;
                }
              } else {
                isAllString = false;
              }
            }
            if (isAllString) {
              const word = expression.map((node) => node.toText()).join("");
              expression = [new mathMLTree.TextNode(word)];
            }
            const identifier = new mathMLTree.MathNode("mi", expression);
            identifier.setAttribute("mathvariant", "normal");
            const operator = new mathMLTree.MathNode("mo", [makeText("⁡", "text")]);
            if (group.parentIsSupSub) {
              return new mathMLTree.MathNode("mrow", [identifier, operator]);
            } else {
              return mathMLTree.newDocumentFragment([identifier, operator]);
            }
          };
          defineFunction({
            type: "operatorname",
            names: ["\\operatorname@", "\\operatornamewithlimits"],
            props: {
              numArgs: 1
            },
            handler: (_ref, args) => {
              let {
                parser,
                funcName
              } = _ref;
              const body = args[0];
              return {
                type: "operatorname",
                mode: parser.mode,
                body: ordargument(body),
                alwaysHandleSupSub: funcName === "\\operatornamewithlimits",
                limits: false,
                parentIsSupSub: false
              };
            },
            htmlBuilder: operatorname_htmlBuilder,
            mathmlBuilder: operatorname_mathmlBuilder
          });
          defineMacro("\\operatorname", "\\@ifstar\\operatornamewithlimits\\operatorname@");
          defineFunctionBuilders({
            type: "ordgroup",
            htmlBuilder(group, options) {
              if (group.semisimple) {
                return buildCommon.makeFragment(buildExpression(group.body, options, false));
              }
              return buildCommon.makeSpan(["mord"], buildExpression(group.body, options, true), options);
            },
            mathmlBuilder(group, options) {
              return buildExpressionRow(group.body, options, true);
            }
          });
          defineFunction({
            type: "overline",
            names: ["\\overline"],
            props: {
              numArgs: 1
            },
            handler(_ref, args) {
              let {
                parser
              } = _ref;
              const body = args[0];
              return {
                type: "overline",
                mode: parser.mode,
                body
              };
            },
            htmlBuilder(group, options) {
              const innerGroup = buildGroup(group.body, options.havingCrampedStyle());
              const line = buildCommon.makeLineSpan("overline-line", options);
              const defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
              const vlist = buildCommon.makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: innerGroup
                }, {
                  type: "kern",
                  size: 3 * defaultRuleThickness
                }, {
                  type: "elem",
                  elem: line
                }, {
                  type: "kern",
                  size: defaultRuleThickness
                }]
              }, options);
              return buildCommon.makeSpan(["mord", "overline"], [vlist], options);
            },
            mathmlBuilder(group, options) {
              const operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("‾")]);
              operator.setAttribute("stretchy", "true");
              const node = new mathMLTree.MathNode("mover", [buildMathML_buildGroup(group.body, options), operator]);
              node.setAttribute("accent", "true");
              return node;
            }
          });
          defineFunction({
            type: "phantom",
            names: ["\\phantom"],
            props: {
              numArgs: 1,
              allowedInText: true
            },
            handler: (_ref, args) => {
              let {
                parser
              } = _ref;
              const body = args[0];
              return {
                type: "phantom",
                mode: parser.mode,
                body: ordargument(body)
              };
            },
            htmlBuilder: (group, options) => {
              const elements = buildExpression(group.body, options.withPhantom(), false);
              return buildCommon.makeFragment(elements);
            },
            mathmlBuilder: (group, options) => {
              const inner2 = buildMathML_buildExpression(group.body, options);
              return new mathMLTree.MathNode("mphantom", inner2);
            }
          });
          defineFunction({
            type: "hphantom",
            names: ["\\hphantom"],
            props: {
              numArgs: 1,
              allowedInText: true
            },
            handler: (_ref2, args) => {
              let {
                parser
              } = _ref2;
              const body = args[0];
              return {
                type: "hphantom",
                mode: parser.mode,
                body
              };
            },
            htmlBuilder: (group, options) => {
              let node = buildCommon.makeSpan([], [buildGroup(group.body, options.withPhantom())]);
              node.height = 0;
              node.depth = 0;
              if (node.children) {
                for (let i = 0; i < node.children.length; i++) {
                  node.children[i].height = 0;
                  node.children[i].depth = 0;
                }
              }
              node = buildCommon.makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: node
                }]
              }, options);
              return buildCommon.makeSpan(["mord"], [node], options);
            },
            mathmlBuilder: (group, options) => {
              const inner2 = buildMathML_buildExpression(ordargument(group.body), options);
              const phantom = new mathMLTree.MathNode("mphantom", inner2);
              const node = new mathMLTree.MathNode("mpadded", [phantom]);
              node.setAttribute("height", "0px");
              node.setAttribute("depth", "0px");
              return node;
            }
          });
          defineFunction({
            type: "vphantom",
            names: ["\\vphantom"],
            props: {
              numArgs: 1,
              allowedInText: true
            },
            handler: (_ref3, args) => {
              let {
                parser
              } = _ref3;
              const body = args[0];
              return {
                type: "vphantom",
                mode: parser.mode,
                body
              };
            },
            htmlBuilder: (group, options) => {
              const inner2 = buildCommon.makeSpan(["inner"], [buildGroup(group.body, options.withPhantom())]);
              const fix = buildCommon.makeSpan(["fix"], []);
              return buildCommon.makeSpan(["mord", "rlap"], [inner2, fix], options);
            },
            mathmlBuilder: (group, options) => {
              const inner2 = buildMathML_buildExpression(ordargument(group.body), options);
              const phantom = new mathMLTree.MathNode("mphantom", inner2);
              const node = new mathMLTree.MathNode("mpadded", [phantom]);
              node.setAttribute("width", "0px");
              return node;
            }
          });
          defineFunction({
            type: "raisebox",
            names: ["\\raisebox"],
            props: {
              numArgs: 2,
              argTypes: ["size", "hbox"],
              allowedInText: true
            },
            handler(_ref, args) {
              let {
                parser
              } = _ref;
              const amount = assertNodeType(args[0], "size").value;
              const body = args[1];
              return {
                type: "raisebox",
                mode: parser.mode,
                dy: amount,
                body
              };
            },
            htmlBuilder(group, options) {
              const body = buildGroup(group.body, options);
              const dy = calculateSize(group.dy, options);
              return buildCommon.makeVList({
                positionType: "shift",
                positionData: -dy,
                children: [{
                  type: "elem",
                  elem: body
                }]
              }, options);
            },
            mathmlBuilder(group, options) {
              const node = new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)]);
              const dy = group.dy.number + group.dy.unit;
              node.setAttribute("voffset", dy);
              return node;
            }
          });
          defineFunction({
            type: "internal",
            names: ["\\relax"],
            props: {
              numArgs: 0,
              allowedInText: true,
              allowedInArgument: true
            },
            handler(_ref) {
              let {
                parser
              } = _ref;
              return {
                type: "internal",
                mode: parser.mode
              };
            }
          });
          defineFunction({
            type: "rule",
            names: ["\\rule"],
            props: {
              numArgs: 2,
              numOptionalArgs: 1,
              allowedInText: true,
              allowedInMath: true,
              argTypes: ["size", "size", "size"]
            },
            handler(_ref, args, optArgs) {
              let {
                parser
              } = _ref;
              const shift = optArgs[0];
              const width = assertNodeType(args[0], "size");
              const height = assertNodeType(args[1], "size");
              return {
                type: "rule",
                mode: parser.mode,
                shift: shift && assertNodeType(shift, "size").value,
                width: width.value,
                height: height.value
              };
            },
            htmlBuilder(group, options) {
              const rule = buildCommon.makeSpan(["mord", "rule"], [], options);
              const width = calculateSize(group.width, options);
              const height = calculateSize(group.height, options);
              const shift = group.shift ? calculateSize(group.shift, options) : 0;
              rule.style.borderRightWidth = makeEm(width);
              rule.style.borderTopWidth = makeEm(height);
              rule.style.bottom = makeEm(shift);
              rule.width = width;
              rule.height = height + shift;
              rule.depth = -shift;
              rule.maxFontSize = height * 1.125 * options.sizeMultiplier;
              return rule;
            },
            mathmlBuilder(group, options) {
              const width = calculateSize(group.width, options);
              const height = calculateSize(group.height, options);
              const shift = group.shift ? calculateSize(group.shift, options) : 0;
              const color2 = options.color && options.getColor() || "black";
              const rule = new mathMLTree.MathNode("mspace");
              rule.setAttribute("mathbackground", color2);
              rule.setAttribute("width", makeEm(width));
              rule.setAttribute("height", makeEm(height));
              const wrapper = new mathMLTree.MathNode("mpadded", [rule]);
              if (shift >= 0) {
                wrapper.setAttribute("height", makeEm(shift));
              } else {
                wrapper.setAttribute("height", makeEm(shift));
                wrapper.setAttribute("depth", makeEm(-shift));
              }
              wrapper.setAttribute("voffset", makeEm(shift));
              return wrapper;
            }
          });
          function sizingGroup(value, options, baseOptions) {
            const inner2 = buildExpression(value, options, false);
            const multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
            for (let i = 0; i < inner2.length; i++) {
              const pos = inner2[i].classes.indexOf("sizing");
              if (pos < 0) {
                Array.prototype.push.apply(inner2[i].classes, options.sizingClasses(baseOptions));
              } else if (inner2[i].classes[pos + 1] === "reset-size" + options.size) {
                inner2[i].classes[pos + 1] = "reset-size" + baseOptions.size;
              }
              inner2[i].height *= multiplier;
              inner2[i].depth *= multiplier;
            }
            return buildCommon.makeFragment(inner2);
          }
          const sizeFuncs = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"];
          const sizing_htmlBuilder = (group, options) => {
            const newOptions = options.havingSize(group.size);
            return sizingGroup(group.body, newOptions, options);
          };
          defineFunction({
            type: "sizing",
            names: sizeFuncs,
            props: {
              numArgs: 0,
              allowedInText: true
            },
            handler: (_ref, args) => {
              let {
                breakOnTokenText,
                funcName,
                parser
              } = _ref;
              const body = parser.parseExpression(false, breakOnTokenText);
              return {
                type: "sizing",
                mode: parser.mode,
                // Figure out what size to use based on the list of functions above
                size: sizeFuncs.indexOf(funcName) + 1,
                body
              };
            },
            htmlBuilder: sizing_htmlBuilder,
            mathmlBuilder: (group, options) => {
              const newOptions = options.havingSize(group.size);
              const inner2 = buildMathML_buildExpression(group.body, newOptions);
              const node = new mathMLTree.MathNode("mstyle", inner2);
              node.setAttribute("mathsize", makeEm(newOptions.sizeMultiplier));
              return node;
            }
          });
          defineFunction({
            type: "smash",
            names: ["\\smash"],
            props: {
              numArgs: 1,
              numOptionalArgs: 1,
              allowedInText: true
            },
            handler: (_ref, args, optArgs) => {
              let {
                parser
              } = _ref;
              let smashHeight = false;
              let smashDepth = false;
              const tbArg = optArgs[0] && assertNodeType(optArgs[0], "ordgroup");
              if (tbArg) {
                let letter = "";
                for (let i = 0; i < tbArg.body.length; ++i) {
                  const node = tbArg.body[i];
                  letter = node.text;
                  if (letter === "t") {
                    smashHeight = true;
                  } else if (letter === "b") {
                    smashDepth = true;
                  } else {
                    smashHeight = false;
                    smashDepth = false;
                    break;
                  }
                }
              } else {
                smashHeight = true;
                smashDepth = true;
              }
              const body = args[0];
              return {
                type: "smash",
                mode: parser.mode,
                body,
                smashHeight,
                smashDepth
              };
            },
            htmlBuilder: (group, options) => {
              const node = buildCommon.makeSpan([], [buildGroup(group.body, options)]);
              if (!group.smashHeight && !group.smashDepth) {
                return node;
              }
              if (group.smashHeight) {
                node.height = 0;
                if (node.children) {
                  for (let i = 0; i < node.children.length; i++) {
                    node.children[i].height = 0;
                  }
                }
              }
              if (group.smashDepth) {
                node.depth = 0;
                if (node.children) {
                  for (let i = 0; i < node.children.length; i++) {
                    node.children[i].depth = 0;
                  }
                }
              }
              const smashedNode = buildCommon.makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: node
                }]
              }, options);
              return buildCommon.makeSpan(["mord"], [smashedNode], options);
            },
            mathmlBuilder: (group, options) => {
              const node = new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)]);
              if (group.smashHeight) {
                node.setAttribute("height", "0px");
              }
              if (group.smashDepth) {
                node.setAttribute("depth", "0px");
              }
              return node;
            }
          });
          defineFunction({
            type: "sqrt",
            names: ["\\sqrt"],
            props: {
              numArgs: 1,
              numOptionalArgs: 1
            },
            handler(_ref, args, optArgs) {
              let {
                parser
              } = _ref;
              const index = optArgs[0];
              const body = args[0];
              return {
                type: "sqrt",
                mode: parser.mode,
                body,
                index
              };
            },
            htmlBuilder(group, options) {
              let inner2 = buildGroup(group.body, options.havingCrampedStyle());
              if (inner2.height === 0) {
                inner2.height = options.fontMetrics().xHeight;
              }
              inner2 = buildCommon.wrapFragment(inner2, options);
              const metrics = options.fontMetrics();
              const theta = metrics.defaultRuleThickness;
              let phi = theta;
              if (options.style.id < src_Style.TEXT.id) {
                phi = options.fontMetrics().xHeight;
              }
              let lineClearance = theta + phi / 4;
              const minDelimiterHeight = inner2.height + inner2.depth + lineClearance + theta;
              const {
                span: img,
                ruleWidth,
                advanceWidth
              } = delimiter.sqrtImage(minDelimiterHeight, options);
              const delimDepth = img.height - ruleWidth;
              if (delimDepth > inner2.height + inner2.depth + lineClearance) {
                lineClearance = (lineClearance + delimDepth - inner2.height - inner2.depth) / 2;
              }
              const imgShift = img.height - inner2.height - lineClearance - ruleWidth;
              inner2.style.paddingLeft = makeEm(advanceWidth);
              const body = buildCommon.makeVList({
                positionType: "firstBaseline",
                children: [{
                  type: "elem",
                  elem: inner2,
                  wrapperClasses: ["svg-align"]
                }, {
                  type: "kern",
                  size: -(inner2.height + imgShift)
                }, {
                  type: "elem",
                  elem: img
                }, {
                  type: "kern",
                  size: ruleWidth
                }]
              }, options);
              if (!group.index) {
                return buildCommon.makeSpan(["mord", "sqrt"], [body], options);
              } else {
                const newOptions = options.havingStyle(src_Style.SCRIPTSCRIPT);
                const rootm = buildGroup(group.index, newOptions, options);
                const toShift = 0.6 * (body.height - body.depth);
                const rootVList = buildCommon.makeVList({
                  positionType: "shift",
                  positionData: -toShift,
                  children: [{
                    type: "elem",
                    elem: rootm
                  }]
                }, options);
                const rootVListWrap = buildCommon.makeSpan(["root"], [rootVList]);
                return buildCommon.makeSpan(["mord", "sqrt"], [rootVListWrap, body], options);
              }
            },
            mathmlBuilder(group, options) {
              const {
                body,
                index
              } = group;
              return index ? new mathMLTree.MathNode("mroot", [buildMathML_buildGroup(body, options), buildMathML_buildGroup(index, options)]) : new mathMLTree.MathNode("msqrt", [buildMathML_buildGroup(body, options)]);
            }
          });
          const styling_styleMap = {
            "display": src_Style.DISPLAY,
            "text": src_Style.TEXT,
            "script": src_Style.SCRIPT,
            "scriptscript": src_Style.SCRIPTSCRIPT
          };
          defineFunction({
            type: "styling",
            names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
            props: {
              numArgs: 0,
              allowedInText: true,
              primitive: true
            },
            handler(_ref, args) {
              let {
                breakOnTokenText,
                funcName,
                parser
              } = _ref;
              const body = parser.parseExpression(true, breakOnTokenText);
              const style = funcName.slice(1, funcName.length - 5);
              return {
                type: "styling",
                mode: parser.mode,
                // Figure out what style to use by pulling out the style from
                // the function name
                style,
                body
              };
            },
            htmlBuilder(group, options) {
              const newStyle = styling_styleMap[group.style];
              const newOptions = options.havingStyle(newStyle).withFont("");
              return sizingGroup(group.body, newOptions, options);
            },
            mathmlBuilder(group, options) {
              const newStyle = styling_styleMap[group.style];
              const newOptions = options.havingStyle(newStyle);
              const inner2 = buildMathML_buildExpression(group.body, newOptions);
              const node = new mathMLTree.MathNode("mstyle", inner2);
              const styleAttributes = {
                "display": ["0", "true"],
                "text": ["0", "false"],
                "script": ["1", "false"],
                "scriptscript": ["2", "false"]
              };
              const attr = styleAttributes[group.style];
              node.setAttribute("scriptlevel", attr[0]);
              node.setAttribute("displaystyle", attr[1]);
              return node;
            }
          });
          const htmlBuilderDelegate = function(group, options) {
            const base = group.base;
            if (!base) {
              return null;
            } else if (base.type === "op") {
              const delegate = base.limits && (options.style.size === src_Style.DISPLAY.size || base.alwaysHandleSupSub);
              return delegate ? op_htmlBuilder : null;
            } else if (base.type === "operatorname") {
              const delegate = base.alwaysHandleSupSub && (options.style.size === src_Style.DISPLAY.size || base.limits);
              return delegate ? operatorname_htmlBuilder : null;
            } else if (base.type === "accent") {
              return utils.isCharacterBox(base.base) ? htmlBuilder : null;
            } else if (base.type === "horizBrace") {
              const isSup = !group.sub;
              return isSup === base.isOver ? horizBrace_htmlBuilder : null;
            } else {
              return null;
            }
          };
          defineFunctionBuilders({
            type: "supsub",
            htmlBuilder(group, options) {
              const builderDelegate = htmlBuilderDelegate(group, options);
              if (builderDelegate) {
                return builderDelegate(group, options);
              }
              const {
                base: valueBase,
                sup: valueSup,
                sub: valueSub
              } = group;
              const base = buildGroup(valueBase, options);
              let supm;
              let subm;
              const metrics = options.fontMetrics();
              let supShift = 0;
              let subShift = 0;
              const isCharacterBox2 = valueBase && utils.isCharacterBox(valueBase);
              if (valueSup) {
                const newOptions = options.havingStyle(options.style.sup());
                supm = buildGroup(valueSup, newOptions, options);
                if (!isCharacterBox2) {
                  supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
                }
              }
              if (valueSub) {
                const newOptions = options.havingStyle(options.style.sub());
                subm = buildGroup(valueSub, newOptions, options);
                if (!isCharacterBox2) {
                  subShift = base.depth + newOptions.fontMetrics().subDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
                }
              }
              let minSupShift;
              if (options.style === src_Style.DISPLAY) {
                minSupShift = metrics.sup1;
              } else if (options.style.cramped) {
                minSupShift = metrics.sup3;
              } else {
                minSupShift = metrics.sup2;
              }
              const multiplier = options.sizeMultiplier;
              const marginRight = makeEm(0.5 / metrics.ptPerEm / multiplier);
              let marginLeft = null;
              if (subm) {
                const isOiint = group.base && group.base.type === "op" && group.base.name && (group.base.name === "\\oiint" || group.base.name === "\\oiiint");
                if (base instanceof SymbolNode || isOiint) {
                  marginLeft = makeEm(-base.italic);
                }
              }
              let supsub;
              if (supm && subm) {
                supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
                subShift = Math.max(subShift, metrics.sub2);
                const ruleWidth = metrics.defaultRuleThickness;
                const maxWidth = 4 * ruleWidth;
                if (supShift - supm.depth - (subm.height - subShift) < maxWidth) {
                  subShift = maxWidth - (supShift - supm.depth) + subm.height;
                  const psi = 0.8 * metrics.xHeight - (supShift - supm.depth);
                  if (psi > 0) {
                    supShift += psi;
                    subShift -= psi;
                  }
                }
                const vlistElem = [{
                  type: "elem",
                  elem: subm,
                  shift: subShift,
                  marginRight,
                  marginLeft
                }, {
                  type: "elem",
                  elem: supm,
                  shift: -supShift,
                  marginRight
                }];
                supsub = buildCommon.makeVList({
                  positionType: "individualShift",
                  children: vlistElem
                }, options);
              } else if (subm) {
                subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);
                const vlistElem = [{
                  type: "elem",
                  elem: subm,
                  marginLeft,
                  marginRight
                }];
                supsub = buildCommon.makeVList({
                  positionType: "shift",
                  positionData: subShift,
                  children: vlistElem
                }, options);
              } else if (supm) {
                supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
                supsub = buildCommon.makeVList({
                  positionType: "shift",
                  positionData: -supShift,
                  children: [{
                    type: "elem",
                    elem: supm,
                    marginRight
                  }]
                }, options);
              } else {
                throw new Error("supsub must have either sup or sub.");
              }
              const mclass = getTypeOfDomTree(base, "right") || "mord";
              return buildCommon.makeSpan([mclass], [base, buildCommon.makeSpan(["msupsub"], [supsub])], options);
            },
            mathmlBuilder(group, options) {
              let isBrace = false;
              let isOver;
              let isSup;
              if (group.base && group.base.type === "horizBrace") {
                isSup = !!group.sup;
                if (isSup === group.base.isOver) {
                  isBrace = true;
                  isOver = group.base.isOver;
                }
              }
              if (group.base && (group.base.type === "op" || group.base.type === "operatorname")) {
                group.base.parentIsSupSub = true;
              }
              const children2 = [buildMathML_buildGroup(group.base, options)];
              if (group.sub) {
                children2.push(buildMathML_buildGroup(group.sub, options));
              }
              if (group.sup) {
                children2.push(buildMathML_buildGroup(group.sup, options));
              }
              let nodeType;
              if (isBrace) {
                nodeType = isOver ? "mover" : "munder";
              } else if (!group.sub) {
                const base = group.base;
                if (base && base.type === "op" && base.limits && (options.style === src_Style.DISPLAY || base.alwaysHandleSupSub)) {
                  nodeType = "mover";
                } else if (base && base.type === "operatorname" && base.alwaysHandleSupSub && (base.limits || options.style === src_Style.DISPLAY)) {
                  nodeType = "mover";
                } else {
                  nodeType = "msup";
                }
              } else if (!group.sup) {
                const base = group.base;
                if (base && base.type === "op" && base.limits && (options.style === src_Style.DISPLAY || base.alwaysHandleSupSub)) {
                  nodeType = "munder";
                } else if (base && base.type === "operatorname" && base.alwaysHandleSupSub && (base.limits || options.style === src_Style.DISPLAY)) {
                  nodeType = "munder";
                } else {
                  nodeType = "msub";
                }
              } else {
                const base = group.base;
                if (base && base.type === "op" && base.limits && options.style === src_Style.DISPLAY) {
                  nodeType = "munderover";
                } else if (base && base.type === "operatorname" && base.alwaysHandleSupSub && (options.style === src_Style.DISPLAY || base.limits)) {
                  nodeType = "munderover";
                } else {
                  nodeType = "msubsup";
                }
              }
              return new mathMLTree.MathNode(nodeType, children2);
            }
          });
          defineFunctionBuilders({
            type: "atom",
            htmlBuilder(group, options) {
              return buildCommon.mathsym(group.text, group.mode, options, ["m" + group.family]);
            },
            mathmlBuilder(group, options) {
              const node = new mathMLTree.MathNode("mo", [makeText(group.text, group.mode)]);
              if (group.family === "bin") {
                const variant = getVariant(group, options);
                if (variant === "bold-italic") {
                  node.setAttribute("mathvariant", variant);
                }
              } else if (group.family === "punct") {
                node.setAttribute("separator", "true");
              } else if (group.family === "open" || group.family === "close") {
                node.setAttribute("stretchy", "false");
              }
              return node;
            }
          });
          const defaultVariant = {
            "mi": "italic",
            "mn": "normal",
            "mtext": "normal"
          };
          defineFunctionBuilders({
            type: "mathord",
            htmlBuilder(group, options) {
              return buildCommon.makeOrd(group, options, "mathord");
            },
            mathmlBuilder(group, options) {
              const node = new mathMLTree.MathNode("mi", [makeText(group.text, group.mode, options)]);
              const variant = getVariant(group, options) || "italic";
              if (variant !== defaultVariant[node.type]) {
                node.setAttribute("mathvariant", variant);
              }
              return node;
            }
          });
          defineFunctionBuilders({
            type: "textord",
            htmlBuilder(group, options) {
              return buildCommon.makeOrd(group, options, "textord");
            },
            mathmlBuilder(group, options) {
              const text = makeText(group.text, group.mode, options);
              const variant = getVariant(group, options) || "normal";
              let node;
              if (group.mode === "text") {
                node = new mathMLTree.MathNode("mtext", [text]);
              } else if (/[0-9]/.test(group.text)) {
                node = new mathMLTree.MathNode("mn", [text]);
              } else if (group.text === "\\prime") {
                node = new mathMLTree.MathNode("mo", [text]);
              } else {
                node = new mathMLTree.MathNode("mi", [text]);
              }
              if (variant !== defaultVariant[node.type]) {
                node.setAttribute("mathvariant", variant);
              }
              return node;
            }
          });
          const cssSpace = {
            "\\nobreak": "nobreak",
            "\\allowbreak": "allowbreak"
          };
          const regularSpace = {
            " ": {},
            "\\ ": {},
            "~": {
              className: "nobreak"
            },
            "\\space": {},
            "\\nobreakspace": {
              className: "nobreak"
            }
          };
          defineFunctionBuilders({
            type: "spacing",
            htmlBuilder(group, options) {
              if (regularSpace.hasOwnProperty(group.text)) {
                const className = regularSpace[group.text].className || "";
                if (group.mode === "text") {
                  const ord = buildCommon.makeOrd(group, options, "textord");
                  ord.classes.push(className);
                  return ord;
                } else {
                  return buildCommon.makeSpan(["mspace", className], [buildCommon.mathsym(group.text, group.mode, options)], options);
                }
              } else if (cssSpace.hasOwnProperty(group.text)) {
                return buildCommon.makeSpan(["mspace", cssSpace[group.text]], [], options);
              } else {
                throw new src_ParseError('Unknown type of space "' + group.text + '"');
              }
            },
            mathmlBuilder(group, options) {
              let node;
              if (regularSpace.hasOwnProperty(group.text)) {
                node = new mathMLTree.MathNode("mtext", [new mathMLTree.TextNode(" ")]);
              } else if (cssSpace.hasOwnProperty(group.text)) {
                return new mathMLTree.MathNode("mspace");
              } else {
                throw new src_ParseError('Unknown type of space "' + group.text + '"');
              }
              return node;
            }
          });
          const pad = () => {
            const padNode = new mathMLTree.MathNode("mtd", []);
            padNode.setAttribute("width", "50%");
            return padNode;
          };
          defineFunctionBuilders({
            type: "tag",
            mathmlBuilder(group, options) {
              const table = new mathMLTree.MathNode("mtable", [new mathMLTree.MathNode("mtr", [pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.body, options)]), pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.tag, options)])])]);
              table.setAttribute("width", "100%");
              return table;
            }
          });
          const textFontFamilies = {
            "\\text": void 0,
            "\\textrm": "textrm",
            "\\textsf": "textsf",
            "\\texttt": "texttt",
            "\\textnormal": "textrm"
          };
          const textFontWeights = {
            "\\textbf": "textbf",
            "\\textmd": "textmd"
          };
          const textFontShapes = {
            "\\textit": "textit",
            "\\textup": "textup"
          };
          const optionsWithFont = (group, options) => {
            const font = group.font;
            if (!font) {
              return options;
            } else if (textFontFamilies[font]) {
              return options.withTextFontFamily(textFontFamilies[font]);
            } else if (textFontWeights[font]) {
              return options.withTextFontWeight(textFontWeights[font]);
            } else if (font === "\\emph") {
              return options.fontShape === "textit" ? options.withTextFontShape("textup") : options.withTextFontShape("textit");
            }
            return options.withTextFontShape(textFontShapes[font]);
          };
          defineFunction({
            type: "text",
            names: [
              // Font families
              "\\text",
              "\\textrm",
              "\\textsf",
              "\\texttt",
              "\\textnormal",
              // Font weights
              "\\textbf",
              "\\textmd",
              // Font Shapes
              "\\textit",
              "\\textup",
              "\\emph"
            ],
            props: {
              numArgs: 1,
              argTypes: ["text"],
              allowedInArgument: true,
              allowedInText: true
            },
            handler(_ref, args) {
              let {
                parser,
                funcName
              } = _ref;
              const body = args[0];
              return {
                type: "text",
                mode: parser.mode,
                body: ordargument(body),
                font: funcName
              };
            },
            htmlBuilder(group, options) {
              const newOptions = optionsWithFont(group, options);
              const inner2 = buildExpression(group.body, newOptions, true);
              return buildCommon.makeSpan(["mord", "text"], inner2, newOptions);
            },
            mathmlBuilder(group, options) {
              const newOptions = optionsWithFont(group, options);
              return buildExpressionRow(group.body, newOptions);
            }
          });
          defineFunction({
            type: "underline",
            names: ["\\underline"],
            props: {
              numArgs: 1,
              allowedInText: true
            },
            handler(_ref, args) {
              let {
                parser
              } = _ref;
              return {
                type: "underline",
                mode: parser.mode,
                body: args[0]
              };
            },
            htmlBuilder(group, options) {
              const innerGroup = buildGroup(group.body, options);
              const line = buildCommon.makeLineSpan("underline-line", options);
              const defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
              const vlist = buildCommon.makeVList({
                positionType: "top",
                positionData: innerGroup.height,
                children: [{
                  type: "kern",
                  size: defaultRuleThickness
                }, {
                  type: "elem",
                  elem: line
                }, {
                  type: "kern",
                  size: 3 * defaultRuleThickness
                }, {
                  type: "elem",
                  elem: innerGroup
                }]
              }, options);
              return buildCommon.makeSpan(["mord", "underline"], [vlist], options);
            },
            mathmlBuilder(group, options) {
              const operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("‾")]);
              operator.setAttribute("stretchy", "true");
              const node = new mathMLTree.MathNode("munder", [buildMathML_buildGroup(group.body, options), operator]);
              node.setAttribute("accentunder", "true");
              return node;
            }
          });
          defineFunction({
            type: "vcenter",
            names: ["\\vcenter"],
            props: {
              numArgs: 1,
              argTypes: ["original"],
              // In LaTeX, \vcenter can act only on a box.
              allowedInText: false
            },
            handler(_ref, args) {
              let {
                parser
              } = _ref;
              return {
                type: "vcenter",
                mode: parser.mode,
                body: args[0]
              };
            },
            htmlBuilder(group, options) {
              const body = buildGroup(group.body, options);
              const axisHeight = options.fontMetrics().axisHeight;
              const dy = 0.5 * (body.height - axisHeight - (body.depth + axisHeight));
              return buildCommon.makeVList({
                positionType: "shift",
                positionData: dy,
                children: [{
                  type: "elem",
                  elem: body
                }]
              }, options);
            },
            mathmlBuilder(group, options) {
              return new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)], ["vcenter"]);
            }
          });
          defineFunction({
            type: "verb",
            names: ["\\verb"],
            props: {
              numArgs: 0,
              allowedInText: true
            },
            handler(context, args, optArgs) {
              throw new src_ParseError("\\verb ended by end of line instead of matching delimiter");
            },
            htmlBuilder(group, options) {
              const text = makeVerb(group);
              const body = [];
              const newOptions = options.havingStyle(options.style.text());
              for (let i = 0; i < text.length; i++) {
                let c = text[i];
                if (c === "~") {
                  c = "\\textasciitilde";
                }
                body.push(buildCommon.makeSymbol(c, "Typewriter-Regular", group.mode, newOptions, ["mord", "texttt"]));
              }
              return buildCommon.makeSpan(["mord", "text"].concat(newOptions.sizingClasses(options)), buildCommon.tryCombineChars(body), newOptions);
            },
            mathmlBuilder(group, options) {
              const text = new mathMLTree.TextNode(makeVerb(group));
              const node = new mathMLTree.MathNode("mtext", [text]);
              node.setAttribute("mathvariant", "monospace");
              return node;
            }
          });
          const makeVerb = (group) => group.body.replace(/ /g, group.star ? "␣" : " ");
          const functions = _functions;
          var src_functions = functions;
          const spaceRegexString = "[ \r\n	]";
          const controlWordRegexString = "\\\\[a-zA-Z@]+";
          const controlSymbolRegexString = "\\\\[^\uD800-\uDFFF]";
          const controlWordWhitespaceRegexString = "(" + controlWordRegexString + ")" + spaceRegexString + "*";
          const controlSpaceRegexString = "\\\\(\n|[ \r	]+\n?)[ \r	]*";
          const combiningDiacriticalMarkString = "[̀-ͯ]";
          const combiningDiacriticalMarksEndRegex = new RegExp(combiningDiacriticalMarkString + "+$");
          const tokenRegexString = "(" + spaceRegexString + "+)|" + // whitespace
          (controlSpaceRegexString + "|") + // \whitespace
          "([!-\\[\\]-‧‪-퟿豈-￿]" + // single codepoint
          (combiningDiacriticalMarkString + "*") + // ...plus accents
          "|[\uD800-\uDBFF][\uDC00-\uDFFF]" + // surrogate pair
          (combiningDiacriticalMarkString + "*") + // ...plus accents
          "|\\\\verb\\*([^]).*?\\4|\\\\verb([^*a-zA-Z]).*?\\5" + // \verb unstarred
          ("|" + controlWordWhitespaceRegexString) + // \macroName + spaces
          ("|" + controlSymbolRegexString + ")");
          class Lexer {
            // Category codes. The lexer only supports comment characters (14) for now.
            // MacroExpander additionally distinguishes active (13).
            constructor(input, settings) {
              this.input = void 0;
              this.settings = void 0;
              this.tokenRegex = void 0;
              this.catcodes = void 0;
              this.input = input;
              this.settings = settings;
              this.tokenRegex = new RegExp(tokenRegexString, "g");
              this.catcodes = {
                "%": 14,
                // comment character
                "~": 13
                // active character
              };
            }
            setCatcode(char, code) {
              this.catcodes[char] = code;
            }
            /**
             * This function lexes a single token.
             */
            lex() {
              const input = this.input;
              const pos = this.tokenRegex.lastIndex;
              if (pos === input.length) {
                return new Token("EOF", new SourceLocation(this, pos, pos));
              }
              const match = this.tokenRegex.exec(input);
              if (match === null || match.index !== pos) {
                throw new src_ParseError("Unexpected character: '" + input[pos] + "'", new Token(input[pos], new SourceLocation(this, pos, pos + 1)));
              }
              const text = match[6] || match[3] || (match[2] ? "\\ " : " ");
              if (this.catcodes[text] === 14) {
                const nlIndex = input.indexOf("\n", this.tokenRegex.lastIndex);
                if (nlIndex === -1) {
                  this.tokenRegex.lastIndex = input.length;
                  this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would fail because of commenting the end of math mode (e.g. $)");
                } else {
                  this.tokenRegex.lastIndex = nlIndex + 1;
                }
                return this.lex();
              }
              return new Token(text, new SourceLocation(this, pos, this.tokenRegex.lastIndex));
            }
          }
          class Namespace {
            /**
             * Both arguments are optional.  The first argument is an object of
             * built-in mappings which never change.  The second argument is an object
             * of initial (global-level) mappings, which will constantly change
             * according to any global/top-level `set`s done.
             */
            constructor(builtins, globalMacros) {
              if (builtins === void 0) {
                builtins = {};
              }
              if (globalMacros === void 0) {
                globalMacros = {};
              }
              this.current = void 0;
              this.builtins = void 0;
              this.undefStack = void 0;
              this.current = globalMacros;
              this.builtins = builtins;
              this.undefStack = [];
            }
            /**
             * Start a new nested group, affecting future local `set`s.
             */
            beginGroup() {
              this.undefStack.push({});
            }
            /**
             * End current nested group, restoring values before the group began.
             */
            endGroup() {
              if (this.undefStack.length === 0) {
                throw new src_ParseError("Unbalanced namespace destruction: attempt to pop global namespace; please report this as a bug");
              }
              const undefs = this.undefStack.pop();
              for (const undef in undefs) {
                if (undefs.hasOwnProperty(undef)) {
                  if (undefs[undef] == null) {
                    delete this.current[undef];
                  } else {
                    this.current[undef] = undefs[undef];
                  }
                }
              }
            }
            /**
             * Ends all currently nested groups (if any), restoring values before the
             * groups began.  Useful in case of an error in the middle of parsing.
             */
            endGroups() {
              while (this.undefStack.length > 0) {
                this.endGroup();
              }
            }
            /**
             * Detect whether `name` has a definition.  Equivalent to
             * `get(name) != null`.
             */
            has(name2) {
              return this.current.hasOwnProperty(name2) || this.builtins.hasOwnProperty(name2);
            }
            /**
             * Get the current value of a name, or `undefined` if there is no value.
             *
             * Note: Do not use `if (namespace.get(...))` to detect whether a macro
             * is defined, as the definition may be the empty string which evaluates
             * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
             * `if (namespace.has(...))`.
             */
            get(name2) {
              if (this.current.hasOwnProperty(name2)) {
                return this.current[name2];
              } else {
                return this.builtins[name2];
              }
            }
            /**
             * Set the current value of a name, and optionally set it globally too.
             * Local set() sets the current value and (when appropriate) adds an undo
             * operation to the undo stack.  Global set() may change the undo
             * operation at every level, so takes time linear in their number.
             * A value of undefined means to delete existing definitions.
             */
            set(name2, value, global2) {
              if (global2 === void 0) {
                global2 = false;
              }
              if (global2) {
                for (let i = 0; i < this.undefStack.length; i++) {
                  delete this.undefStack[i][name2];
                }
                if (this.undefStack.length > 0) {
                  this.undefStack[this.undefStack.length - 1][name2] = value;
                }
              } else {
                const top = this.undefStack[this.undefStack.length - 1];
                if (top && !top.hasOwnProperty(name2)) {
                  top[name2] = this.current[name2];
                }
              }
              if (value == null) {
                delete this.current[name2];
              } else {
                this.current[name2] = value;
              }
            }
          }
          const macros = _macros;
          var src_macros = macros;
          defineMacro("\\noexpand", function(context) {
            const t = context.popToken();
            if (context.isExpandable(t.text)) {
              t.noexpand = true;
              t.treatAsRelax = true;
            }
            return {
              tokens: [t],
              numArgs: 0
            };
          });
          defineMacro("\\expandafter", function(context) {
            const t = context.popToken();
            context.expandOnce(true);
            return {
              tokens: [t],
              numArgs: 0
            };
          });
          defineMacro("\\@firstoftwo", function(context) {
            const args = context.consumeArgs(2);
            return {
              tokens: args[0],
              numArgs: 0
            };
          });
          defineMacro("\\@secondoftwo", function(context) {
            const args = context.consumeArgs(2);
            return {
              tokens: args[1],
              numArgs: 0
            };
          });
          defineMacro("\\@ifnextchar", function(context) {
            const args = context.consumeArgs(3);
            context.consumeSpaces();
            const nextToken = context.future();
            if (args[0].length === 1 && args[0][0].text === nextToken.text) {
              return {
                tokens: args[1],
                numArgs: 0
              };
            } else {
              return {
                tokens: args[2],
                numArgs: 0
              };
            }
          });
          defineMacro("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}");
          defineMacro("\\TextOrMath", function(context) {
            const args = context.consumeArgs(2);
            if (context.mode === "text") {
              return {
                tokens: args[0],
                numArgs: 0
              };
            } else {
              return {
                tokens: args[1],
                numArgs: 0
              };
            }
          });
          const digitToNumber = {
            "0": 0,
            "1": 1,
            "2": 2,
            "3": 3,
            "4": 4,
            "5": 5,
            "6": 6,
            "7": 7,
            "8": 8,
            "9": 9,
            "a": 10,
            "A": 10,
            "b": 11,
            "B": 11,
            "c": 12,
            "C": 12,
            "d": 13,
            "D": 13,
            "e": 14,
            "E": 14,
            "f": 15,
            "F": 15
          };
          defineMacro("\\char", function(context) {
            let token = context.popToken();
            let base;
            let number = "";
            if (token.text === "'") {
              base = 8;
              token = context.popToken();
            } else if (token.text === '"') {
              base = 16;
              token = context.popToken();
            } else if (token.text === "`") {
              token = context.popToken();
              if (token.text[0] === "\\") {
                number = token.text.charCodeAt(1);
              } else if (token.text === "EOF") {
                throw new src_ParseError("\\char` missing argument");
              } else {
                number = token.text.charCodeAt(0);
              }
            } else {
              base = 10;
            }
            if (base) {
              number = digitToNumber[token.text];
              if (number == null || number >= base) {
                throw new src_ParseError("Invalid base-" + base + " digit " + token.text);
              }
              let digit;
              while ((digit = digitToNumber[context.future().text]) != null && digit < base) {
                number *= base;
                number += digit;
                context.popToken();
              }
            }
            return "\\@char{" + number + "}";
          });
          const newcommand = (context, existsOK, nonexistsOK, skipIfExists) => {
            let arg = context.consumeArg().tokens;
            if (arg.length !== 1) {
              throw new src_ParseError("\\newcommand's first argument must be a macro name");
            }
            const name2 = arg[0].text;
            const exists = context.isDefined(name2);
            if (exists && !existsOK) {
              throw new src_ParseError("\\newcommand{" + name2 + "} attempting to redefine " + (name2 + "; use \\renewcommand"));
            }
            if (!exists && !nonexistsOK) {
              throw new src_ParseError("\\renewcommand{" + name2 + "} when command " + name2 + " does not yet exist; use \\newcommand");
            }
            let numArgs = 0;
            arg = context.consumeArg().tokens;
            if (arg.length === 1 && arg[0].text === "[") {
              let argText = "";
              let token = context.expandNextToken();
              while (token.text !== "]" && token.text !== "EOF") {
                argText += token.text;
                token = context.expandNextToken();
              }
              if (!argText.match(/^\s*[0-9]+\s*$/)) {
                throw new src_ParseError("Invalid number of arguments: " + argText);
              }
              numArgs = parseInt(argText);
              arg = context.consumeArg().tokens;
            }
            if (!(exists && skipIfExists)) {
              context.macros.set(name2, {
                tokens: arg,
                numArgs
              });
            }
            return "";
          };
          defineMacro("\\newcommand", (context) => newcommand(context, false, true, false));
          defineMacro("\\renewcommand", (context) => newcommand(context, true, false, false));
          defineMacro("\\providecommand", (context) => newcommand(context, true, true, true));
          defineMacro("\\message", (context) => {
            const arg = context.consumeArgs(1)[0];
            console.log(arg.reverse().map((token) => token.text).join(""));
            return "";
          });
          defineMacro("\\errmessage", (context) => {
            const arg = context.consumeArgs(1)[0];
            console.error(arg.reverse().map((token) => token.text).join(""));
            return "";
          });
          defineMacro("\\show", (context) => {
            const tok = context.popToken();
            const name2 = tok.text;
            console.log(tok, context.macros.get(name2), src_functions[name2], src_symbols.math[name2], src_symbols.text[name2]);
            return "";
          });
          defineMacro("\\bgroup", "{");
          defineMacro("\\egroup", "}");
          defineMacro("~", "\\nobreakspace");
          defineMacro("\\lq", "`");
          defineMacro("\\rq", "'");
          defineMacro("\\aa", "\\r a");
          defineMacro("\\AA", "\\r A");
          defineMacro("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`©}");
          defineMacro("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
          defineMacro("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}");
          defineMacro("ℬ", "\\mathscr{B}");
          defineMacro("ℰ", "\\mathscr{E}");
          defineMacro("ℱ", "\\mathscr{F}");
          defineMacro("ℋ", "\\mathscr{H}");
          defineMacro("ℐ", "\\mathscr{I}");
          defineMacro("ℒ", "\\mathscr{L}");
          defineMacro("ℳ", "\\mathscr{M}");
          defineMacro("ℛ", "\\mathscr{R}");
          defineMacro("ℭ", "\\mathfrak{C}");
          defineMacro("ℌ", "\\mathfrak{H}");
          defineMacro("ℨ", "\\mathfrak{Z}");
          defineMacro("\\Bbbk", "\\Bbb{k}");
          defineMacro("·", "\\cdotp");
          defineMacro("\\llap", "\\mathllap{\\textrm{#1}}");
          defineMacro("\\rlap", "\\mathrlap{\\textrm{#1}}");
          defineMacro("\\clap", "\\mathclap{\\textrm{#1}}");
          defineMacro("\\mathstrut", "\\vphantom{(}");
          defineMacro("\\underbar", "\\underline{\\text{#1}}");
          defineMacro("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}');
          defineMacro("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}");
          defineMacro("\\ne", "\\neq");
          defineMacro("≠", "\\neq");
          defineMacro("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}{\\mathrel{\\char`∉}}");
          defineMacro("∉", "\\notin");
          defineMacro("≘", "\\html@mathml{\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}}{\\mathrel{\\char`≘}}");
          defineMacro("≙", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`≘}}");
          defineMacro("≚", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`≚}}");
          defineMacro("≛", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}{\\mathrel{\\char`≛}}");
          defineMacro("≝", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}{\\mathrel{\\char`≝}}");
          defineMacro("≞", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}{\\mathrel{\\char`≞}}");
          defineMacro("≟", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`≟}}");
          defineMacro("⟂", "\\perp");
          defineMacro("‼", "\\mathclose{!\\mkern-0.8mu!}");
          defineMacro("∌", "\\notni");
          defineMacro("⌜", "\\ulcorner");
          defineMacro("⌝", "\\urcorner");
          defineMacro("⌞", "\\llcorner");
          defineMacro("⌟", "\\lrcorner");
          defineMacro("©", "\\copyright");
          defineMacro("®", "\\textregistered");
          defineMacro("️", "\\textregistered");
          defineMacro("\\ulcorner", '\\html@mathml{\\@ulcorner}{\\mathop{\\char"231c}}');
          defineMacro("\\urcorner", '\\html@mathml{\\@urcorner}{\\mathop{\\char"231d}}');
          defineMacro("\\llcorner", '\\html@mathml{\\@llcorner}{\\mathop{\\char"231e}}');
          defineMacro("\\lrcorner", '\\html@mathml{\\@lrcorner}{\\mathop{\\char"231f}}');
          defineMacro("\\vdots", "{\\varvdots\\rule{0pt}{15pt}}");
          defineMacro("⋮", "\\vdots");
          defineMacro("\\varGamma", "\\mathit{\\Gamma}");
          defineMacro("\\varDelta", "\\mathit{\\Delta}");
          defineMacro("\\varTheta", "\\mathit{\\Theta}");
          defineMacro("\\varLambda", "\\mathit{\\Lambda}");
          defineMacro("\\varXi", "\\mathit{\\Xi}");
          defineMacro("\\varPi", "\\mathit{\\Pi}");
          defineMacro("\\varSigma", "\\mathit{\\Sigma}");
          defineMacro("\\varUpsilon", "\\mathit{\\Upsilon}");
          defineMacro("\\varPhi", "\\mathit{\\Phi}");
          defineMacro("\\varPsi", "\\mathit{\\Psi}");
          defineMacro("\\varOmega", "\\mathit{\\Omega}");
          defineMacro("\\substack", "\\begin{subarray}{c}#1\\end{subarray}");
          defineMacro("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu\\relax");
          defineMacro("\\boxed", "\\fbox{$\\displaystyle{#1}$}");
          defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
          defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
          defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;");
          defineMacro("\\dddot", "{\\overset{\\raisebox{-0.1ex}{\\normalsize ...}}{#1}}");
          defineMacro("\\ddddot", "{\\overset{\\raisebox{-0.1ex}{\\normalsize ....}}{#1}}");
          const dotsByToken = {
            ",": "\\dotsc",
            "\\not": "\\dotsb",
            // \keybin@ checks for the following:
            "+": "\\dotsb",
            "=": "\\dotsb",
            "<": "\\dotsb",
            ">": "\\dotsb",
            "-": "\\dotsb",
            "*": "\\dotsb",
            ":": "\\dotsb",
            // Symbols whose definition starts with \DOTSB:
            "\\DOTSB": "\\dotsb",
            "\\coprod": "\\dotsb",
            "\\bigvee": "\\dotsb",
            "\\bigwedge": "\\dotsb",
            "\\biguplus": "\\dotsb",
            "\\bigcap": "\\dotsb",
            "\\bigcup": "\\dotsb",
            "\\prod": "\\dotsb",
            "\\sum": "\\dotsb",
            "\\bigotimes": "\\dotsb",
            "\\bigoplus": "\\dotsb",
            "\\bigodot": "\\dotsb",
            "\\bigsqcup": "\\dotsb",
            "\\And": "\\dotsb",
            "\\longrightarrow": "\\dotsb",
            "\\Longrightarrow": "\\dotsb",
            "\\longleftarrow": "\\dotsb",
            "\\Longleftarrow": "\\dotsb",
            "\\longleftrightarrow": "\\dotsb",
            "\\Longleftrightarrow": "\\dotsb",
            "\\mapsto": "\\dotsb",
            "\\longmapsto": "\\dotsb",
            "\\hookrightarrow": "\\dotsb",
            "\\doteq": "\\dotsb",
            // Symbols whose definition starts with \mathbin:
            "\\mathbin": "\\dotsb",
            // Symbols whose definition starts with \mathrel:
            "\\mathrel": "\\dotsb",
            "\\relbar": "\\dotsb",
            "\\Relbar": "\\dotsb",
            "\\xrightarrow": "\\dotsb",
            "\\xleftarrow": "\\dotsb",
            // Symbols whose definition starts with \DOTSI:
            "\\DOTSI": "\\dotsi",
            "\\int": "\\dotsi",
            "\\oint": "\\dotsi",
            "\\iint": "\\dotsi",
            "\\iiint": "\\dotsi",
            "\\iiiint": "\\dotsi",
            "\\idotsint": "\\dotsi",
            // Symbols whose definition starts with \DOTSX:
            "\\DOTSX": "\\dotsx"
          };
          defineMacro("\\dots", function(context) {
            let thedots = "\\dotso";
            const next = context.expandAfterFuture().text;
            if (next in dotsByToken) {
              thedots = dotsByToken[next];
            } else if (next.slice(0, 4) === "\\not") {
              thedots = "\\dotsb";
            } else if (next in src_symbols.math) {
              if (utils.contains(["bin", "rel"], src_symbols.math[next].group)) {
                thedots = "\\dotsb";
              }
            }
            return thedots;
          });
          const spaceAfterDots = {
            // \rightdelim@ checks for the following:
            ")": true,
            "]": true,
            "\\rbrack": true,
            "\\}": true,
            "\\rbrace": true,
            "\\rangle": true,
            "\\rceil": true,
            "\\rfloor": true,
            "\\rgroup": true,
            "\\rmoustache": true,
            "\\right": true,
            "\\bigr": true,
            "\\biggr": true,
            "\\Bigr": true,
            "\\Biggr": true,
            // \extra@ also tests for the following:
            "$": true,
            // \extrap@ checks for the following:
            ";": true,
            ".": true,
            ",": true
          };
          defineMacro("\\dotso", function(context) {
            const next = context.future().text;
            if (next in spaceAfterDots) {
              return "\\ldots\\,";
            } else {
              return "\\ldots";
            }
          });
          defineMacro("\\dotsc", function(context) {
            const next = context.future().text;
            if (next in spaceAfterDots && next !== ",") {
              return "\\ldots\\,";
            } else {
              return "\\ldots";
            }
          });
          defineMacro("\\cdots", function(context) {
            const next = context.future().text;
            if (next in spaceAfterDots) {
              return "\\@cdots\\,";
            } else {
              return "\\@cdots";
            }
          });
          defineMacro("\\dotsb", "\\cdots");
          defineMacro("\\dotsm", "\\cdots");
          defineMacro("\\dotsi", "\\!\\cdots");
          defineMacro("\\dotsx", "\\ldots\\,");
          defineMacro("\\DOTSI", "\\relax");
          defineMacro("\\DOTSB", "\\relax");
          defineMacro("\\DOTSX", "\\relax");
          defineMacro("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax");
          defineMacro("\\,", "\\tmspace+{3mu}{.1667em}");
          defineMacro("\\thinspace", "\\,");
          defineMacro("\\>", "\\mskip{4mu}");
          defineMacro("\\:", "\\tmspace+{4mu}{.2222em}");
          defineMacro("\\medspace", "\\:");
          defineMacro("\\;", "\\tmspace+{5mu}{.2777em}");
          defineMacro("\\thickspace", "\\;");
          defineMacro("\\!", "\\tmspace-{3mu}{.1667em}");
          defineMacro("\\negthinspace", "\\!");
          defineMacro("\\negmedspace", "\\tmspace-{4mu}{.2222em}");
          defineMacro("\\negthickspace", "\\tmspace-{5mu}{.277em}");
          defineMacro("\\enspace", "\\kern.5em ");
          defineMacro("\\enskip", "\\hskip.5em\\relax");
          defineMacro("\\quad", "\\hskip1em\\relax");
          defineMacro("\\qquad", "\\hskip2em\\relax");
          defineMacro("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
          defineMacro("\\tag@paren", "\\tag@literal{({#1})}");
          defineMacro("\\tag@literal", (context) => {
            if (context.macros.get("\\df@tag")) {
              throw new src_ParseError("Multiple \\tag");
            }
            return "\\gdef\\df@tag{\\text{#1}}";
          });
          defineMacro("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}\\mathbin{\\rm mod}\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
          defineMacro("\\pod", "\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
          defineMacro("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
          defineMacro("\\mod", "\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}{\\rm mod}\\,\\,#1");
          defineMacro("\\newline", "\\\\\\relax");
          defineMacro("\\TeX", "\\textrm{\\html@mathml{T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX}{TeX}}");
          const latexRaiseA = makeEm(fontMetricsData["Main-Regular"]["T".charCodeAt(0)][1] - 0.7 * fontMetricsData["Main-Regular"]["A".charCodeAt(0)][1]);
          defineMacro("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{LaTeX}}");
          defineMacro("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{KaTeX}}");
          defineMacro("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
          defineMacro("\\@hspace", "\\hskip #1\\relax");
          defineMacro("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax");
          defineMacro("\\ordinarycolon", ":");
          defineMacro("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}");
          defineMacro("\\dblcolon", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}{\\mathop{\\char"2237}}');
          defineMacro("\\coloneqq", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2254}}');
          defineMacro("\\Coloneqq", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2237\\char"3d}}');
          defineMacro("\\coloneq", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"3a\\char"2212}}');
          defineMacro("\\Coloneq", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"2237\\char"2212}}');
          defineMacro("\\eqqcolon", '\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2255}}');
          defineMacro("\\Eqqcolon", '\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"3d\\char"2237}}');
          defineMacro("\\eqcolon", '\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2239}}');
          defineMacro("\\Eqcolon", '\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"2212\\char"2237}}');
          defineMacro("\\colonapprox", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"3a\\char"2248}}');
          defineMacro("\\Colonapprox", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"2237\\char"2248}}');
          defineMacro("\\colonsim", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"3a\\char"223c}}');
          defineMacro("\\Colonsim", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"2237\\char"223c}}');
          defineMacro("∷", "\\dblcolon");
          defineMacro("∹", "\\eqcolon");
          defineMacro("≔", "\\coloneqq");
          defineMacro("≕", "\\eqqcolon");
          defineMacro("⩴", "\\Coloneqq");
          defineMacro("\\ratio", "\\vcentcolon");
          defineMacro("\\coloncolon", "\\dblcolon");
          defineMacro("\\colonequals", "\\coloneqq");
          defineMacro("\\coloncolonequals", "\\Coloneqq");
          defineMacro("\\equalscolon", "\\eqqcolon");
          defineMacro("\\equalscoloncolon", "\\Eqqcolon");
          defineMacro("\\colonminus", "\\coloneq");
          defineMacro("\\coloncolonminus", "\\Coloneq");
          defineMacro("\\minuscolon", "\\eqcolon");
          defineMacro("\\minuscoloncolon", "\\Eqcolon");
          defineMacro("\\coloncolonapprox", "\\Colonapprox");
          defineMacro("\\coloncolonsim", "\\Colonsim");
          defineMacro("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
          defineMacro("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
          defineMacro("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
          defineMacro("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}");
          defineMacro("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`∌}}");
          defineMacro("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
          defineMacro("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}");
          defineMacro("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
          defineMacro("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
          defineMacro("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{lim}}");
          defineMacro("\\varliminf", "\\DOTSB\\operatorname*{\\underline{lim}}");
          defineMacro("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{lim}}");
          defineMacro("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{lim}}");
          defineMacro("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{≩}");
          defineMacro("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{≨}");
          defineMacro("\\ngeqq", "\\html@mathml{\\@ngeqq}{≱}");
          defineMacro("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{≱}");
          defineMacro("\\nleqq", "\\html@mathml{\\@nleqq}{≰}");
          defineMacro("\\nleqslant", "\\html@mathml{\\@nleqslant}{≰}");
          defineMacro("\\nshortmid", "\\html@mathml{\\@nshortmid}{∤}");
          defineMacro("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{∦}");
          defineMacro("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{⊈}");
          defineMacro("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{⊉}");
          defineMacro("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{⊊}");
          defineMacro("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{⫋}");
          defineMacro("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{⊋}");
          defineMacro("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{⫌}");
          defineMacro("\\imath", "\\html@mathml{\\@imath}{ı}");
          defineMacro("\\jmath", "\\html@mathml{\\@jmath}{ȷ}");
          defineMacro("\\llbracket", "\\html@mathml{\\mathopen{[\\mkern-3.2mu[}}{\\mathopen{\\char`⟦}}");
          defineMacro("\\rrbracket", "\\html@mathml{\\mathclose{]\\mkern-3.2mu]}}{\\mathclose{\\char`⟧}}");
          defineMacro("⟦", "\\llbracket");
          defineMacro("⟧", "\\rrbracket");
          defineMacro("\\lBrace", "\\html@mathml{\\mathopen{\\{\\mkern-3.2mu[}}{\\mathopen{\\char`⦃}}");
          defineMacro("\\rBrace", "\\html@mathml{\\mathclose{]\\mkern-3.2mu\\}}}{\\mathclose{\\char`⦄}}");
          defineMacro("⦃", "\\lBrace");
          defineMacro("⦄", "\\rBrace");
          defineMacro("\\minuso", "\\mathbin{\\html@mathml{{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}{\\char`⦵}}");
          defineMacro("⦵", "\\minuso");
          defineMacro("\\darr", "\\downarrow");
          defineMacro("\\dArr", "\\Downarrow");
          defineMacro("\\Darr", "\\Downarrow");
          defineMacro("\\lang", "\\langle");
          defineMacro("\\rang", "\\rangle");
          defineMacro("\\uarr", "\\uparrow");
          defineMacro("\\uArr", "\\Uparrow");
          defineMacro("\\Uarr", "\\Uparrow");
          defineMacro("\\N", "\\mathbb{N}");
          defineMacro("\\R", "\\mathbb{R}");
          defineMacro("\\Z", "\\mathbb{Z}");
          defineMacro("\\alef", "\\aleph");
          defineMacro("\\alefsym", "\\aleph");
          defineMacro("\\Alpha", "\\mathrm{A}");
          defineMacro("\\Beta", "\\mathrm{B}");
          defineMacro("\\bull", "\\bullet");
          defineMacro("\\Chi", "\\mathrm{X}");
          defineMacro("\\clubs", "\\clubsuit");
          defineMacro("\\cnums", "\\mathbb{C}");
          defineMacro("\\Complex", "\\mathbb{C}");
          defineMacro("\\Dagger", "\\ddagger");
          defineMacro("\\diamonds", "\\diamondsuit");
          defineMacro("\\empty", "\\emptyset");
          defineMacro("\\Epsilon", "\\mathrm{E}");
          defineMacro("\\Eta", "\\mathrm{H}");
          defineMacro("\\exist", "\\exists");
          defineMacro("\\harr", "\\leftrightarrow");
          defineMacro("\\hArr", "\\Leftrightarrow");
          defineMacro("\\Harr", "\\Leftrightarrow");
          defineMacro("\\hearts", "\\heartsuit");
          defineMacro("\\image", "\\Im");
          defineMacro("\\infin", "\\infty");
          defineMacro("\\Iota", "\\mathrm{I}");
          defineMacro("\\isin", "\\in");
          defineMacro("\\Kappa", "\\mathrm{K}");
          defineMacro("\\larr", "\\leftarrow");
          defineMacro("\\lArr", "\\Leftarrow");
          defineMacro("\\Larr", "\\Leftarrow");
          defineMacro("\\lrarr", "\\leftrightarrow");
          defineMacro("\\lrArr", "\\Leftrightarrow");
          defineMacro("\\Lrarr", "\\Leftrightarrow");
          defineMacro("\\Mu", "\\mathrm{M}");
          defineMacro("\\natnums", "\\mathbb{N}");
          defineMacro("\\Nu", "\\mathrm{N}");
          defineMacro("\\Omicron", "\\mathrm{O}");
          defineMacro("\\plusmn", "\\pm");
          defineMacro("\\rarr", "\\rightarrow");
          defineMacro("\\rArr", "\\Rightarrow");
          defineMacro("\\Rarr", "\\Rightarrow");
          defineMacro("\\real", "\\Re");
          defineMacro("\\reals", "\\mathbb{R}");
          defineMacro("\\Reals", "\\mathbb{R}");
          defineMacro("\\Rho", "\\mathrm{P}");
          defineMacro("\\sdot", "\\cdot");
          defineMacro("\\sect", "\\S");
          defineMacro("\\spades", "\\spadesuit");
          defineMacro("\\sub", "\\subset");
          defineMacro("\\sube", "\\subseteq");
          defineMacro("\\supe", "\\supseteq");
          defineMacro("\\Tau", "\\mathrm{T}");
          defineMacro("\\thetasym", "\\vartheta");
          defineMacro("\\weierp", "\\wp");
          defineMacro("\\Zeta", "\\mathrm{Z}");
          defineMacro("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
          defineMacro("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
          defineMacro("\\plim", "\\DOTSB\\mathop{\\operatorname{plim}}\\limits");
          defineMacro("\\bra", "\\mathinner{\\langle{#1}|}");
          defineMacro("\\ket", "\\mathinner{|{#1}\\rangle}");
          defineMacro("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
          defineMacro("\\Bra", "\\left\\langle#1\\right|");
          defineMacro("\\Ket", "\\left|#1\\right\\rangle");
          const braketHelper = (one2) => (context) => {
            const left = context.consumeArg().tokens;
            const middle = context.consumeArg().tokens;
            const middleDouble = context.consumeArg().tokens;
            const right = context.consumeArg().tokens;
            const oldMiddle = context.macros.get("|");
            const oldMiddleDouble = context.macros.get("\\|");
            context.macros.beginGroup();
            const midMacro = (double) => (context2) => {
              if (one2) {
                context2.macros.set("|", oldMiddle);
                if (middleDouble.length) {
                  context2.macros.set("\\|", oldMiddleDouble);
                }
              }
              let doubled = double;
              if (!double && middleDouble.length) {
                const nextToken = context2.future();
                if (nextToken.text === "|") {
                  context2.popToken();
                  doubled = true;
                }
              }
              return {
                tokens: doubled ? middleDouble : middle,
                numArgs: 0
              };
            };
            context.macros.set("|", midMacro(false));
            if (middleDouble.length) {
              context.macros.set("\\|", midMacro(true));
            }
            const arg = context.consumeArg().tokens;
            const expanded = context.expandTokens([
              ...right,
              ...arg,
              ...left
              // reversed
            ]);
            context.macros.endGroup();
            return {
              tokens: expanded.reverse(),
              numArgs: 0
            };
          };
          defineMacro("\\bra@ket", braketHelper(false));
          defineMacro("\\bra@set", braketHelper(true));
          defineMacro("\\Braket", "\\bra@ket{\\left\\langle}{\\,\\middle\\vert\\,}{\\,\\middle\\vert\\,}{\\right\\rangle}");
          defineMacro("\\Set", "\\bra@set{\\left\\{\\:}{\\;\\middle\\vert\\;}{\\;\\middle\\Vert\\;}{\\:\\right\\}}");
          defineMacro("\\set", "\\bra@set{\\{\\,}{\\mid}{}{\\,\\}}");
          defineMacro("\\angln", "{\\angl n}");
          defineMacro("\\blue", "\\textcolor{##6495ed}{#1}");
          defineMacro("\\orange", "\\textcolor{##ffa500}{#1}");
          defineMacro("\\pink", "\\textcolor{##ff00af}{#1}");
          defineMacro("\\red", "\\textcolor{##df0030}{#1}");
          defineMacro("\\green", "\\textcolor{##28ae7b}{#1}");
          defineMacro("\\gray", "\\textcolor{gray}{#1}");
          defineMacro("\\purple", "\\textcolor{##9d38bd}{#1}");
          defineMacro("\\blueA", "\\textcolor{##ccfaff}{#1}");
          defineMacro("\\blueB", "\\textcolor{##80f6ff}{#1}");
          defineMacro("\\blueC", "\\textcolor{##63d9ea}{#1}");
          defineMacro("\\blueD", "\\textcolor{##11accd}{#1}");
          defineMacro("\\blueE", "\\textcolor{##0c7f99}{#1}");
          defineMacro("\\tealA", "\\textcolor{##94fff5}{#1}");
          defineMacro("\\tealB", "\\textcolor{##26edd5}{#1}");
          defineMacro("\\tealC", "\\textcolor{##01d1c1}{#1}");
          defineMacro("\\tealD", "\\textcolor{##01a995}{#1}");
          defineMacro("\\tealE", "\\textcolor{##208170}{#1}");
          defineMacro("\\greenA", "\\textcolor{##b6ffb0}{#1}");
          defineMacro("\\greenB", "\\textcolor{##8af281}{#1}");
          defineMacro("\\greenC", "\\textcolor{##74cf70}{#1}");
          defineMacro("\\greenD", "\\textcolor{##1fab54}{#1}");
          defineMacro("\\greenE", "\\textcolor{##0d923f}{#1}");
          defineMacro("\\goldA", "\\textcolor{##ffd0a9}{#1}");
          defineMacro("\\goldB", "\\textcolor{##ffbb71}{#1}");
          defineMacro("\\goldC", "\\textcolor{##ff9c39}{#1}");
          defineMacro("\\goldD", "\\textcolor{##e07d10}{#1}");
          defineMacro("\\goldE", "\\textcolor{##a75a05}{#1}");
          defineMacro("\\redA", "\\textcolor{##fca9a9}{#1}");
          defineMacro("\\redB", "\\textcolor{##ff8482}{#1}");
          defineMacro("\\redC", "\\textcolor{##f9685d}{#1}");
          defineMacro("\\redD", "\\textcolor{##e84d39}{#1}");
          defineMacro("\\redE", "\\textcolor{##bc2612}{#1}");
          defineMacro("\\maroonA", "\\textcolor{##ffbde0}{#1}");
          defineMacro("\\maroonB", "\\textcolor{##ff92c6}{#1}");
          defineMacro("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
          defineMacro("\\maroonD", "\\textcolor{##ca337c}{#1}");
          defineMacro("\\maroonE", "\\textcolor{##9e034e}{#1}");
          defineMacro("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
          defineMacro("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
          defineMacro("\\purpleC", "\\textcolor{##aa87ff}{#1}");
          defineMacro("\\purpleD", "\\textcolor{##7854ab}{#1}");
          defineMacro("\\purpleE", "\\textcolor{##543b78}{#1}");
          defineMacro("\\mintA", "\\textcolor{##f5f9e8}{#1}");
          defineMacro("\\mintB", "\\textcolor{##edf2df}{#1}");
          defineMacro("\\mintC", "\\textcolor{##e0e5cc}{#1}");
          defineMacro("\\grayA", "\\textcolor{##f6f7f7}{#1}");
          defineMacro("\\grayB", "\\textcolor{##f0f1f2}{#1}");
          defineMacro("\\grayC", "\\textcolor{##e3e5e6}{#1}");
          defineMacro("\\grayD", "\\textcolor{##d6d8da}{#1}");
          defineMacro("\\grayE", "\\textcolor{##babec2}{#1}");
          defineMacro("\\grayF", "\\textcolor{##888d93}{#1}");
          defineMacro("\\grayG", "\\textcolor{##626569}{#1}");
          defineMacro("\\grayH", "\\textcolor{##3b3e40}{#1}");
          defineMacro("\\grayI", "\\textcolor{##21242c}{#1}");
          defineMacro("\\kaBlue", "\\textcolor{##314453}{#1}");
          defineMacro("\\kaGreen", "\\textcolor{##71B307}{#1}");
          const implicitCommands = {
            "^": true,
            // Parser.js
            "_": true,
            // Parser.js
            "\\limits": true,
            // Parser.js
            "\\nolimits": true
            // Parser.js
          };
          class MacroExpander {
            constructor(input, settings, mode) {
              this.settings = void 0;
              this.expansionCount = void 0;
              this.lexer = void 0;
              this.macros = void 0;
              this.stack = void 0;
              this.mode = void 0;
              this.settings = settings;
              this.expansionCount = 0;
              this.feed(input);
              this.macros = new Namespace(src_macros, settings.macros);
              this.mode = mode;
              this.stack = [];
            }
            /**
             * Feed a new input string to the same MacroExpander
             * (with existing macros etc.).
             */
            feed(input) {
              this.lexer = new Lexer(input, this.settings);
            }
            /**
             * Switches between "text" and "math" modes.
             */
            switchMode(newMode) {
              this.mode = newMode;
            }
            /**
             * Start a new group nesting within all namespaces.
             */
            beginGroup() {
              this.macros.beginGroup();
            }
            /**
             * End current group nesting within all namespaces.
             */
            endGroup() {
              this.macros.endGroup();
            }
            /**
             * Ends all currently nested groups (if any), restoring values before the
             * groups began.  Useful in case of an error in the middle of parsing.
             */
            endGroups() {
              this.macros.endGroups();
            }
            /**
             * Returns the topmost token on the stack, without expanding it.
             * Similar in behavior to TeX's `\futurelet`.
             */
            future() {
              if (this.stack.length === 0) {
                this.pushToken(this.lexer.lex());
              }
              return this.stack[this.stack.length - 1];
            }
            /**
             * Remove and return the next unexpanded token.
             */
            popToken() {
              this.future();
              return this.stack.pop();
            }
            /**
             * Add a given token to the token stack.  In particular, this get be used
             * to put back a token returned from one of the other methods.
             */
            pushToken(token) {
              this.stack.push(token);
            }
            /**
             * Append an array of tokens to the token stack.
             */
            pushTokens(tokens) {
              this.stack.push(...tokens);
            }
            /**
             * Find an macro argument without expanding tokens and append the array of
             * tokens to the token stack. Uses Token as a container for the result.
             */
            scanArgument(isOptional) {
              let start2;
              let end;
              let tokens;
              if (isOptional) {
                this.consumeSpaces();
                if (this.future().text !== "[") {
                  return null;
                }
                start2 = this.popToken();
                ({
                  tokens,
                  end
                } = this.consumeArg(["]"]));
              } else {
                ({
                  tokens,
                  start: start2,
                  end
                } = this.consumeArg());
              }
              this.pushToken(new Token("EOF", end.loc));
              this.pushTokens(tokens);
              return start2.range(end, "");
            }
            /**
             * Consume all following space tokens, without expansion.
             */
            consumeSpaces() {
              for (; ; ) {
                const token = this.future();
                if (token.text === " ") {
                  this.stack.pop();
                } else {
                  break;
                }
              }
            }
            /**
             * Consume an argument from the token stream, and return the resulting array
             * of tokens and start/end token.
             */
            consumeArg(delims) {
              const tokens = [];
              const isDelimited = delims && delims.length > 0;
              if (!isDelimited) {
                this.consumeSpaces();
              }
              const start2 = this.future();
              let tok;
              let depth = 0;
              let match = 0;
              do {
                tok = this.popToken();
                tokens.push(tok);
                if (tok.text === "{") {
                  ++depth;
                } else if (tok.text === "}") {
                  --depth;
                  if (depth === -1) {
                    throw new src_ParseError("Extra }", tok);
                  }
                } else if (tok.text === "EOF") {
                  throw new src_ParseError("Unexpected end of input in a macro argument, expected '" + (delims && isDelimited ? delims[match] : "}") + "'", tok);
                }
                if (delims && isDelimited) {
                  if ((depth === 0 || depth === 1 && delims[match] === "{") && tok.text === delims[match]) {
                    ++match;
                    if (match === delims.length) {
                      tokens.splice(-match, match);
                      break;
                    }
                  } else {
                    match = 0;
                  }
                }
              } while (depth !== 0 || isDelimited);
              if (start2.text === "{" && tokens[tokens.length - 1].text === "}") {
                tokens.pop();
                tokens.shift();
              }
              tokens.reverse();
              return {
                tokens,
                start: start2,
                end: tok
              };
            }
            /**
             * Consume the specified number of (delimited) arguments from the token
             * stream and return the resulting array of arguments.
             */
            consumeArgs(numArgs, delimiters2) {
              if (delimiters2) {
                if (delimiters2.length !== numArgs + 1) {
                  throw new src_ParseError("The length of delimiters doesn't match the number of args!");
                }
                const delims = delimiters2[0];
                for (let i = 0; i < delims.length; i++) {
                  const tok = this.popToken();
                  if (delims[i] !== tok.text) {
                    throw new src_ParseError("Use of the macro doesn't match its definition", tok);
                  }
                }
              }
              const args = [];
              for (let i = 0; i < numArgs; i++) {
                args.push(this.consumeArg(delimiters2 && delimiters2[i + 1]).tokens);
              }
              return args;
            }
            /**
             * Increment `expansionCount` by the specified amount.
             * Throw an error if it exceeds `maxExpand`.
             */
            countExpansion(amount) {
              this.expansionCount += amount;
              if (this.expansionCount > this.settings.maxExpand) {
                throw new src_ParseError("Too many expansions: infinite loop or need to increase maxExpand setting");
              }
            }
            /**
             * Expand the next token only once if possible.
             *
             * If the token is expanded, the resulting tokens will be pushed onto
             * the stack in reverse order, and the number of such tokens will be
             * returned.  This number might be zero or positive.
             *
             * If not, the return value is `false`, and the next token remains at the
             * top of the stack.
             *
             * In either case, the next token will be on the top of the stack,
             * or the stack will be empty (in case of empty expansion
             * and no other tokens).
             *
             * Used to implement `expandAfterFuture` and `expandNextToken`.
             *
             * If expandableOnly, only expandable tokens are expanded and
             * an undefined control sequence results in an error.
             */
            expandOnce(expandableOnly) {
              const topToken = this.popToken();
              const name2 = topToken.text;
              const expansion = !topToken.noexpand ? this._getExpansion(name2) : null;
              if (expansion == null || expandableOnly && expansion.unexpandable) {
                if (expandableOnly && expansion == null && name2[0] === "\\" && !this.isDefined(name2)) {
                  throw new src_ParseError("Undefined control sequence: " + name2);
                }
                this.pushToken(topToken);
                return false;
              }
              this.countExpansion(1);
              let tokens = expansion.tokens;
              const args = this.consumeArgs(expansion.numArgs, expansion.delimiters);
              if (expansion.numArgs) {
                tokens = tokens.slice();
                for (let i = tokens.length - 1; i >= 0; --i) {
                  let tok = tokens[i];
                  if (tok.text === "#") {
                    if (i === 0) {
                      throw new src_ParseError("Incomplete placeholder at end of macro body", tok);
                    }
                    tok = tokens[--i];
                    if (tok.text === "#") {
                      tokens.splice(i + 1, 1);
                    } else if (/^[1-9]$/.test(tok.text)) {
                      tokens.splice(i, 2, ...args[+tok.text - 1]);
                    } else {
                      throw new src_ParseError("Not a valid argument number", tok);
                    }
                  }
                }
              }
              this.pushTokens(tokens);
              return tokens.length;
            }
            /**
             * Expand the next token only once (if possible), and return the resulting
             * top token on the stack (without removing anything from the stack).
             * Similar in behavior to TeX's `\expandafter\futurelet`.
             * Equivalent to expandOnce() followed by future().
             */
            expandAfterFuture() {
              this.expandOnce();
              return this.future();
            }
            /**
             * Recursively expand first token, then return first non-expandable token.
             */
            expandNextToken() {
              for (; ; ) {
                if (this.expandOnce() === false) {
                  const token = this.stack.pop();
                  if (token.treatAsRelax) {
                    token.text = "\\relax";
                  }
                  return token;
                }
              }
              throw new Error();
            }
            /**
             * Fully expand the given macro name and return the resulting list of
             * tokens, or return `undefined` if no such macro is defined.
             */
            expandMacro(name2) {
              return this.macros.has(name2) ? this.expandTokens([new Token(name2)]) : void 0;
            }
            /**
             * Fully expand the given token stream and return the resulting list of
             * tokens.  Note that the input tokens are in reverse order, but the
             * output tokens are in forward order.
             */
            expandTokens(tokens) {
              const output = [];
              const oldStackLength = this.stack.length;
              this.pushTokens(tokens);
              while (this.stack.length > oldStackLength) {
                if (this.expandOnce(true) === false) {
                  const token = this.stack.pop();
                  if (token.treatAsRelax) {
                    token.noexpand = false;
                    token.treatAsRelax = false;
                  }
                  output.push(token);
                }
              }
              this.countExpansion(output.length);
              return output;
            }
            /**
             * Fully expand the given macro name and return the result as a string,
             * or return `undefined` if no such macro is defined.
             */
            expandMacroAsText(name2) {
              const tokens = this.expandMacro(name2);
              if (tokens) {
                return tokens.map((token) => token.text).join("");
              } else {
                return tokens;
              }
            }
            /**
             * Returns the expanded macro as a reversed array of tokens and a macro
             * argument count.  Or returns `null` if no such macro.
             */
            _getExpansion(name2) {
              const definition = this.macros.get(name2);
              if (definition == null) {
                return definition;
              }
              if (name2.length === 1) {
                const catcode = this.lexer.catcodes[name2];
                if (catcode != null && catcode !== 13) {
                  return;
                }
              }
              const expansion = typeof definition === "function" ? definition(this) : definition;
              if (typeof expansion === "string") {
                let numArgs = 0;
                if (expansion.indexOf("#") !== -1) {
                  const stripped = expansion.replace(/##/g, "");
                  while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
                    ++numArgs;
                  }
                }
                const bodyLexer = new Lexer(expansion, this.settings);
                const tokens = [];
                let tok = bodyLexer.lex();
                while (tok.text !== "EOF") {
                  tokens.push(tok);
                  tok = bodyLexer.lex();
                }
                tokens.reverse();
                const expanded = {
                  tokens,
                  numArgs
                };
                return expanded;
              }
              return expansion;
            }
            /**
             * Determine whether a command is currently "defined" (has some
             * functionality), meaning that it's a macro (in the current group),
             * a function, a symbol, or one of the special commands listed in
             * `implicitCommands`.
             */
            isDefined(name2) {
              return this.macros.has(name2) || src_functions.hasOwnProperty(name2) || src_symbols.math.hasOwnProperty(name2) || src_symbols.text.hasOwnProperty(name2) || implicitCommands.hasOwnProperty(name2);
            }
            /**
             * Determine whether a command is expandable.
             */
            isExpandable(name2) {
              const macro = this.macros.get(name2);
              return macro != null ? typeof macro === "string" || typeof macro === "function" || !macro.unexpandable : src_functions.hasOwnProperty(name2) && !src_functions[name2].primitive;
            }
          }
          const unicodeSubRegEx = /^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/;
          const uSubsAndSups = Object.freeze({
            "₊": "+",
            "₋": "-",
            "₌": "=",
            "₍": "(",
            "₎": ")",
            "₀": "0",
            "₁": "1",
            "₂": "2",
            "₃": "3",
            "₄": "4",
            "₅": "5",
            "₆": "6",
            "₇": "7",
            "₈": "8",
            "₉": "9",
            "ₐ": "a",
            "ₑ": "e",
            "ₕ": "h",
            "ᵢ": "i",
            "ⱼ": "j",
            "ₖ": "k",
            "ₗ": "l",
            "ₘ": "m",
            "ₙ": "n",
            "ₒ": "o",
            "ₚ": "p",
            "ᵣ": "r",
            "ₛ": "s",
            "ₜ": "t",
            "ᵤ": "u",
            "ᵥ": "v",
            "ₓ": "x",
            "ᵦ": "β",
            "ᵧ": "γ",
            "ᵨ": "ρ",
            "ᵩ": "ϕ",
            "ᵪ": "χ",
            "⁺": "+",
            "⁻": "-",
            "⁼": "=",
            "⁽": "(",
            "⁾": ")",
            "⁰": "0",
            "¹": "1",
            "²": "2",
            "³": "3",
            "⁴": "4",
            "⁵": "5",
            "⁶": "6",
            "⁷": "7",
            "⁸": "8",
            "⁹": "9",
            "ᴬ": "A",
            "ᴮ": "B",
            "ᴰ": "D",
            "ᴱ": "E",
            "ᴳ": "G",
            "ᴴ": "H",
            "ᴵ": "I",
            "ᴶ": "J",
            "ᴷ": "K",
            "ᴸ": "L",
            "ᴹ": "M",
            "ᴺ": "N",
            "ᴼ": "O",
            "ᴾ": "P",
            "ᴿ": "R",
            "ᵀ": "T",
            "ᵁ": "U",
            "ⱽ": "V",
            "ᵂ": "W",
            "ᵃ": "a",
            "ᵇ": "b",
            "ᶜ": "c",
            "ᵈ": "d",
            "ᵉ": "e",
            "ᶠ": "f",
            "ᵍ": "g",
            "ʰ": "h",
            "ⁱ": "i",
            "ʲ": "j",
            "ᵏ": "k",
            "ˡ": "l",
            "ᵐ": "m",
            "ⁿ": "n",
            "ᵒ": "o",
            "ᵖ": "p",
            "ʳ": "r",
            "ˢ": "s",
            "ᵗ": "t",
            "ᵘ": "u",
            "ᵛ": "v",
            "ʷ": "w",
            "ˣ": "x",
            "ʸ": "y",
            "ᶻ": "z",
            "ᵝ": "β",
            "ᵞ": "γ",
            "ᵟ": "δ",
            "ᵠ": "ϕ",
            "ᵡ": "χ",
            "ᶿ": "θ"
          });
          const unicodeAccents = {
            "́": {
              "text": "\\'",
              "math": "\\acute"
            },
            "̀": {
              "text": "\\`",
              "math": "\\grave"
            },
            "̈": {
              "text": '\\"',
              "math": "\\ddot"
            },
            "̃": {
              "text": "\\~",
              "math": "\\tilde"
            },
            "̄": {
              "text": "\\=",
              "math": "\\bar"
            },
            "̆": {
              "text": "\\u",
              "math": "\\breve"
            },
            "̌": {
              "text": "\\v",
              "math": "\\check"
            },
            "̂": {
              "text": "\\^",
              "math": "\\hat"
            },
            "̇": {
              "text": "\\.",
              "math": "\\dot"
            },
            "̊": {
              "text": "\\r",
              "math": "\\mathring"
            },
            "̋": {
              "text": "\\H"
            },
            "̧": {
              "text": "\\c"
            }
          };
          const unicodeSymbols = {
            "á": "á",
            "à": "à",
            "ä": "ä",
            "ǟ": "ǟ",
            "ã": "ã",
            "ā": "ā",
            "ă": "ă",
            "ắ": "ắ",
            "ằ": "ằ",
            "ẵ": "ẵ",
            "ǎ": "ǎ",
            "â": "â",
            "ấ": "ấ",
            "ầ": "ầ",
            "ẫ": "ẫ",
            "ȧ": "ȧ",
            "ǡ": "ǡ",
            "å": "å",
            "ǻ": "ǻ",
            "ḃ": "ḃ",
            "ć": "ć",
            "ḉ": "ḉ",
            "č": "č",
            "ĉ": "ĉ",
            "ċ": "ċ",
            "ç": "ç",
            "ď": "ď",
            "ḋ": "ḋ",
            "ḑ": "ḑ",
            "é": "é",
            "è": "è",
            "ë": "ë",
            "ẽ": "ẽ",
            "ē": "ē",
            "ḗ": "ḗ",
            "ḕ": "ḕ",
            "ĕ": "ĕ",
            "ḝ": "ḝ",
            "ě": "ě",
            "ê": "ê",
            "ế": "ế",
            "ề": "ề",
            "ễ": "ễ",
            "ė": "ė",
            "ȩ": "ȩ",
            "ḟ": "ḟ",
            "ǵ": "ǵ",
            "ḡ": "ḡ",
            "ğ": "ğ",
            "ǧ": "ǧ",
            "ĝ": "ĝ",
            "ġ": "ġ",
            "ģ": "ģ",
            "ḧ": "ḧ",
            "ȟ": "ȟ",
            "ĥ": "ĥ",
            "ḣ": "ḣ",
            "ḩ": "ḩ",
            "í": "í",
            "ì": "ì",
            "ï": "ï",
            "ḯ": "ḯ",
            "ĩ": "ĩ",
            "ī": "ī",
            "ĭ": "ĭ",
            "ǐ": "ǐ",
            "î": "î",
            "ǰ": "ǰ",
            "ĵ": "ĵ",
            "ḱ": "ḱ",
            "ǩ": "ǩ",
            "ķ": "ķ",
            "ĺ": "ĺ",
            "ľ": "ľ",
            "ļ": "ļ",
            "ḿ": "ḿ",
            "ṁ": "ṁ",
            "ń": "ń",
            "ǹ": "ǹ",
            "ñ": "ñ",
            "ň": "ň",
            "ṅ": "ṅ",
            "ņ": "ņ",
            "ó": "ó",
            "ò": "ò",
            "ö": "ö",
            "ȫ": "ȫ",
            "õ": "õ",
            "ṍ": "ṍ",
            "ṏ": "ṏ",
            "ȭ": "ȭ",
            "ō": "ō",
            "ṓ": "ṓ",
            "ṑ": "ṑ",
            "ŏ": "ŏ",
            "ǒ": "ǒ",
            "ô": "ô",
            "ố": "ố",
            "ồ": "ồ",
            "ỗ": "ỗ",
            "ȯ": "ȯ",
            "ȱ": "ȱ",
            "ő": "ő",
            "ṕ": "ṕ",
            "ṗ": "ṗ",
            "ŕ": "ŕ",
            "ř": "ř",
            "ṙ": "ṙ",
            "ŗ": "ŗ",
            "ś": "ś",
            "ṥ": "ṥ",
            "š": "š",
            "ṧ": "ṧ",
            "ŝ": "ŝ",
            "ṡ": "ṡ",
            "ş": "ş",
            "ẗ": "ẗ",
            "ť": "ť",
            "ṫ": "ṫ",
            "ţ": "ţ",
            "ú": "ú",
            "ù": "ù",
            "ü": "ü",
            "ǘ": "ǘ",
            "ǜ": "ǜ",
            "ǖ": "ǖ",
            "ǚ": "ǚ",
            "ũ": "ũ",
            "ṹ": "ṹ",
            "ū": "ū",
            "ṻ": "ṻ",
            "ŭ": "ŭ",
            "ǔ": "ǔ",
            "û": "û",
            "ů": "ů",
            "ű": "ű",
            "ṽ": "ṽ",
            "ẃ": "ẃ",
            "ẁ": "ẁ",
            "ẅ": "ẅ",
            "ŵ": "ŵ",
            "ẇ": "ẇ",
            "ẘ": "ẘ",
            "ẍ": "ẍ",
            "ẋ": "ẋ",
            "ý": "ý",
            "ỳ": "ỳ",
            "ÿ": "ÿ",
            "ỹ": "ỹ",
            "ȳ": "ȳ",
            "ŷ": "ŷ",
            "ẏ": "ẏ",
            "ẙ": "ẙ",
            "ź": "ź",
            "ž": "ž",
            "ẑ": "ẑ",
            "ż": "ż",
            "Á": "Á",
            "À": "À",
            "Ä": "Ä",
            "Ǟ": "Ǟ",
            "Ã": "Ã",
            "Ā": "Ā",
            "Ă": "Ă",
            "Ắ": "Ắ",
            "Ằ": "Ằ",
            "Ẵ": "Ẵ",
            "Ǎ": "Ǎ",
            "Â": "Â",
            "Ấ": "Ấ",
            "Ầ": "Ầ",
            "Ẫ": "Ẫ",
            "Ȧ": "Ȧ",
            "Ǡ": "Ǡ",
            "Å": "Å",
            "Ǻ": "Ǻ",
            "Ḃ": "Ḃ",
            "Ć": "Ć",
            "Ḉ": "Ḉ",
            "Č": "Č",
            "Ĉ": "Ĉ",
            "Ċ": "Ċ",
            "Ç": "Ç",
            "Ď": "Ď",
            "Ḋ": "Ḋ",
            "Ḑ": "Ḑ",
            "É": "É",
            "È": "È",
            "Ë": "Ë",
            "Ẽ": "Ẽ",
            "Ē": "Ē",
            "Ḗ": "Ḗ",
            "Ḕ": "Ḕ",
            "Ĕ": "Ĕ",
            "Ḝ": "Ḝ",
            "Ě": "Ě",
            "Ê": "Ê",
            "Ế": "Ế",
            "Ề": "Ề",
            "Ễ": "Ễ",
            "Ė": "Ė",
            "Ȩ": "Ȩ",
            "Ḟ": "Ḟ",
            "Ǵ": "Ǵ",
            "Ḡ": "Ḡ",
            "Ğ": "Ğ",
            "Ǧ": "Ǧ",
            "Ĝ": "Ĝ",
            "Ġ": "Ġ",
            "Ģ": "Ģ",
            "Ḧ": "Ḧ",
            "Ȟ": "Ȟ",
            "Ĥ": "Ĥ",
            "Ḣ": "Ḣ",
            "Ḩ": "Ḩ",
            "Í": "Í",
            "Ì": "Ì",
            "Ï": "Ï",
            "Ḯ": "Ḯ",
            "Ĩ": "Ĩ",
            "Ī": "Ī",
            "Ĭ": "Ĭ",
            "Ǐ": "Ǐ",
            "Î": "Î",
            "İ": "İ",
            "Ĵ": "Ĵ",
            "Ḱ": "Ḱ",
            "Ǩ": "Ǩ",
            "Ķ": "Ķ",
            "Ĺ": "Ĺ",
            "Ľ": "Ľ",
            "Ļ": "Ļ",
            "Ḿ": "Ḿ",
            "Ṁ": "Ṁ",
            "Ń": "Ń",
            "Ǹ": "Ǹ",
            "Ñ": "Ñ",
            "Ň": "Ň",
            "Ṅ": "Ṅ",
            "Ņ": "Ņ",
            "Ó": "Ó",
            "Ò": "Ò",
            "Ö": "Ö",
            "Ȫ": "Ȫ",
            "Õ": "Õ",
            "Ṍ": "Ṍ",
            "Ṏ": "Ṏ",
            "Ȭ": "Ȭ",
            "Ō": "Ō",
            "Ṓ": "Ṓ",
            "Ṑ": "Ṑ",
            "Ŏ": "Ŏ",
            "Ǒ": "Ǒ",
            "Ô": "Ô",
            "Ố": "Ố",
            "Ồ": "Ồ",
            "Ỗ": "Ỗ",
            "Ȯ": "Ȯ",
            "Ȱ": "Ȱ",
            "Ő": "Ő",
            "Ṕ": "Ṕ",
            "Ṗ": "Ṗ",
            "Ŕ": "Ŕ",
            "Ř": "Ř",
            "Ṙ": "Ṙ",
            "Ŗ": "Ŗ",
            "Ś": "Ś",
            "Ṥ": "Ṥ",
            "Š": "Š",
            "Ṧ": "Ṧ",
            "Ŝ": "Ŝ",
            "Ṡ": "Ṡ",
            "Ş": "Ş",
            "Ť": "Ť",
            "Ṫ": "Ṫ",
            "Ţ": "Ţ",
            "Ú": "Ú",
            "Ù": "Ù",
            "Ü": "Ü",
            "Ǘ": "Ǘ",
            "Ǜ": "Ǜ",
            "Ǖ": "Ǖ",
            "Ǚ": "Ǚ",
            "Ũ": "Ũ",
            "Ṹ": "Ṹ",
            "Ū": "Ū",
            "Ṻ": "Ṻ",
            "Ŭ": "Ŭ",
            "Ǔ": "Ǔ",
            "Û": "Û",
            "Ů": "Ů",
            "Ű": "Ű",
            "Ṽ": "Ṽ",
            "Ẃ": "Ẃ",
            "Ẁ": "Ẁ",
            "Ẅ": "Ẅ",
            "Ŵ": "Ŵ",
            "Ẇ": "Ẇ",
            "Ẍ": "Ẍ",
            "Ẋ": "Ẋ",
            "Ý": "Ý",
            "Ỳ": "Ỳ",
            "Ÿ": "Ÿ",
            "Ỹ": "Ỹ",
            "Ȳ": "Ȳ",
            "Ŷ": "Ŷ",
            "Ẏ": "Ẏ",
            "Ź": "Ź",
            "Ž": "Ž",
            "Ẑ": "Ẑ",
            "Ż": "Ż",
            "ά": "ά",
            "ὰ": "ὰ",
            "ᾱ": "ᾱ",
            "ᾰ": "ᾰ",
            "έ": "έ",
            "ὲ": "ὲ",
            "ή": "ή",
            "ὴ": "ὴ",
            "ί": "ί",
            "ὶ": "ὶ",
            "ϊ": "ϊ",
            "ΐ": "ΐ",
            "ῒ": "ῒ",
            "ῑ": "ῑ",
            "ῐ": "ῐ",
            "ό": "ό",
            "ὸ": "ὸ",
            "ύ": "ύ",
            "ὺ": "ὺ",
            "ϋ": "ϋ",
            "ΰ": "ΰ",
            "ῢ": "ῢ",
            "ῡ": "ῡ",
            "ῠ": "ῠ",
            "ώ": "ώ",
            "ὼ": "ὼ",
            "Ύ": "Ύ",
            "Ὺ": "Ὺ",
            "Ϋ": "Ϋ",
            "Ῡ": "Ῡ",
            "Ῠ": "Ῠ",
            "Ώ": "Ώ",
            "Ὼ": "Ὼ"
          };
          class Parser {
            constructor(input, settings) {
              this.mode = void 0;
              this.gullet = void 0;
              this.settings = void 0;
              this.leftrightDepth = void 0;
              this.nextToken = void 0;
              this.mode = "math";
              this.gullet = new MacroExpander(input, settings, this.mode);
              this.settings = settings;
              this.leftrightDepth = 0;
            }
            /**
             * Checks a result to make sure it has the right type, and throws an
             * appropriate error otherwise.
             */
            expect(text, consume) {
              if (consume === void 0) {
                consume = true;
              }
              if (this.fetch().text !== text) {
                throw new src_ParseError("Expected '" + text + "', got '" + this.fetch().text + "'", this.fetch());
              }
              if (consume) {
                this.consume();
              }
            }
            /**
             * Discards the current lookahead token, considering it consumed.
             */
            consume() {
              this.nextToken = null;
            }
            /**
             * Return the current lookahead token, or if there isn't one (at the
             * beginning, or if the previous lookahead token was consume()d),
             * fetch the next token as the new lookahead token and return it.
             */
            fetch() {
              if (this.nextToken == null) {
                this.nextToken = this.gullet.expandNextToken();
              }
              return this.nextToken;
            }
            /**
             * Switches between "text" and "math" modes.
             */
            switchMode(newMode) {
              this.mode = newMode;
              this.gullet.switchMode(newMode);
            }
            /**
             * Main parsing function, which parses an entire input.
             */
            parse() {
              if (!this.settings.globalGroup) {
                this.gullet.beginGroup();
              }
              if (this.settings.colorIsTextColor) {
                this.gullet.macros.set("\\color", "\\textcolor");
              }
              try {
                const parse = this.parseExpression(false);
                this.expect("EOF");
                if (!this.settings.globalGroup) {
                  this.gullet.endGroup();
                }
                return parse;
              } finally {
                this.gullet.endGroups();
              }
            }
            /**
             * Fully parse a separate sequence of tokens as a separate job.
             * Tokens should be specified in reverse order, as in a MacroDefinition.
             */
            subparse(tokens) {
              const oldToken = this.nextToken;
              this.consume();
              this.gullet.pushToken(new Token("}"));
              this.gullet.pushTokens(tokens);
              const parse = this.parseExpression(false);
              this.expect("}");
              this.nextToken = oldToken;
              return parse;
            }
            /**
             * Parses an "expression", which is a list of atoms.
             *
             * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
             *                 happens when functions have higher precedence han infix
             *                 nodes in implicit parses.
             *
             * `breakOnTokenText`: The text of the token that the expression should end
             *                     with, or `null` if something else should end the
             *                     expression.
             */
            parseExpression(breakOnInfix, breakOnTokenText) {
              const body = [];
              while (true) {
                if (this.mode === "math") {
                  this.consumeSpaces();
                }
                const lex = this.fetch();
                if (Parser.endOfExpression.indexOf(lex.text) !== -1) {
                  break;
                }
                if (breakOnTokenText && lex.text === breakOnTokenText) {
                  break;
                }
                if (breakOnInfix && src_functions[lex.text] && src_functions[lex.text].infix) {
                  break;
                }
                const atom = this.parseAtom(breakOnTokenText);
                if (!atom) {
                  break;
                } else if (atom.type === "internal") {
                  continue;
                }
                body.push(atom);
              }
              if (this.mode === "text") {
                this.formLigatures(body);
              }
              return this.handleInfixNodes(body);
            }
            /**
             * Rewrites infix operators such as \over with corresponding commands such
             * as \frac.
             *
             * There can only be one infix operator per group.  If there's more than one
             * then the expression is ambiguous.  This can be resolved by adding {}.
             */
            handleInfixNodes(body) {
              let overIndex = -1;
              let funcName;
              for (let i = 0; i < body.length; i++) {
                if (body[i].type === "infix") {
                  if (overIndex !== -1) {
                    throw new src_ParseError("only one infix operator per group", body[i].token);
                  }
                  overIndex = i;
                  funcName = body[i].replaceWith;
                }
              }
              if (overIndex !== -1 && funcName) {
                let numerNode;
                let denomNode;
                const numerBody = body.slice(0, overIndex);
                const denomBody = body.slice(overIndex + 1);
                if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
                  numerNode = numerBody[0];
                } else {
                  numerNode = {
                    type: "ordgroup",
                    mode: this.mode,
                    body: numerBody
                  };
                }
                if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
                  denomNode = denomBody[0];
                } else {
                  denomNode = {
                    type: "ordgroup",
                    mode: this.mode,
                    body: denomBody
                  };
                }
                let node;
                if (funcName === "\\\\abovefrac") {
                  node = this.callFunction(funcName, [numerNode, body[overIndex], denomNode], []);
                } else {
                  node = this.callFunction(funcName, [numerNode, denomNode], []);
                }
                return [node];
              } else {
                return body;
              }
            }
            /**
             * Handle a subscript or superscript with nice errors.
             */
            handleSupSubscript(name2) {
              const symbolToken = this.fetch();
              const symbol = symbolToken.text;
              this.consume();
              this.consumeSpaces();
              let group;
              do {
                var _group;
                group = this.parseGroup(name2);
              } while (((_group = group) == null ? void 0 : _group.type) === "internal");
              if (!group) {
                throw new src_ParseError("Expected group after '" + symbol + "'", symbolToken);
              }
              return group;
            }
            /**
             * Converts the textual input of an unsupported command into a text node
             * contained within a color node whose color is determined by errorColor
             */
            formatUnsupportedCmd(text) {
              const textordArray = [];
              for (let i = 0; i < text.length; i++) {
                textordArray.push({
                  type: "textord",
                  mode: "text",
                  text: text[i]
                });
              }
              const textNode = {
                type: "text",
                mode: this.mode,
                body: textordArray
              };
              const colorNode = {
                type: "color",
                mode: this.mode,
                color: this.settings.errorColor,
                body: [textNode]
              };
              return colorNode;
            }
            /**
             * Parses a group with optional super/subscripts.
             */
            parseAtom(breakOnTokenText) {
              const base = this.parseGroup("atom", breakOnTokenText);
              if ((base == null ? void 0 : base.type) === "internal") {
                return base;
              }
              if (this.mode === "text") {
                return base;
              }
              let superscript;
              let subscript;
              while (true) {
                this.consumeSpaces();
                const lex = this.fetch();
                if (lex.text === "\\limits" || lex.text === "\\nolimits") {
                  if (base && base.type === "op") {
                    const limits = lex.text === "\\limits";
                    base.limits = limits;
                    base.alwaysHandleSupSub = true;
                  } else if (base && base.type === "operatorname") {
                    if (base.alwaysHandleSupSub) {
                      base.limits = lex.text === "\\limits";
                    }
                  } else {
                    throw new src_ParseError("Limit controls must follow a math operator", lex);
                  }
                  this.consume();
                } else if (lex.text === "^") {
                  if (superscript) {
                    throw new src_ParseError("Double superscript", lex);
                  }
                  superscript = this.handleSupSubscript("superscript");
                } else if (lex.text === "_") {
                  if (subscript) {
                    throw new src_ParseError("Double subscript", lex);
                  }
                  subscript = this.handleSupSubscript("subscript");
                } else if (lex.text === "'") {
                  if (superscript) {
                    throw new src_ParseError("Double superscript", lex);
                  }
                  const prime = {
                    type: "textord",
                    mode: this.mode,
                    text: "\\prime"
                  };
                  const primes = [prime];
                  this.consume();
                  while (this.fetch().text === "'") {
                    primes.push(prime);
                    this.consume();
                  }
                  if (this.fetch().text === "^") {
                    primes.push(this.handleSupSubscript("superscript"));
                  }
                  superscript = {
                    type: "ordgroup",
                    mode: this.mode,
                    body: primes
                  };
                } else if (uSubsAndSups[lex.text]) {
                  const isSub = unicodeSubRegEx.test(lex.text);
                  const subsupTokens = [];
                  subsupTokens.push(new Token(uSubsAndSups[lex.text]));
                  this.consume();
                  while (true) {
                    const token = this.fetch().text;
                    if (!uSubsAndSups[token]) {
                      break;
                    }
                    if (unicodeSubRegEx.test(token) !== isSub) {
                      break;
                    }
                    subsupTokens.unshift(new Token(uSubsAndSups[token]));
                    this.consume();
                  }
                  const body = this.subparse(subsupTokens);
                  if (isSub) {
                    subscript = {
                      type: "ordgroup",
                      mode: "math",
                      body
                    };
                  } else {
                    superscript = {
                      type: "ordgroup",
                      mode: "math",
                      body
                    };
                  }
                } else {
                  break;
                }
              }
              if (superscript || subscript) {
                return {
                  type: "supsub",
                  mode: this.mode,
                  base,
                  sup: superscript,
                  sub: subscript
                };
              } else {
                return base;
              }
            }
            /**
             * Parses an entire function, including its base and all of its arguments.
             */
            parseFunction(breakOnTokenText, name2) {
              const token = this.fetch();
              const func = token.text;
              const funcData = src_functions[func];
              if (!funcData) {
                return null;
              }
              this.consume();
              if (name2 && name2 !== "atom" && !funcData.allowedInArgument) {
                throw new src_ParseError("Got function '" + func + "' with no arguments" + (name2 ? " as " + name2 : ""), token);
              } else if (this.mode === "text" && !funcData.allowedInText) {
                throw new src_ParseError("Can't use function '" + func + "' in text mode", token);
              } else if (this.mode === "math" && funcData.allowedInMath === false) {
                throw new src_ParseError("Can't use function '" + func + "' in math mode", token);
              }
              const {
                args,
                optArgs
              } = this.parseArguments(func, funcData);
              return this.callFunction(func, args, optArgs, token, breakOnTokenText);
            }
            /**
             * Call a function handler with a suitable context and arguments.
             */
            callFunction(name2, args, optArgs, token, breakOnTokenText) {
              const context = {
                funcName: name2,
                parser: this,
                token,
                breakOnTokenText
              };
              const func = src_functions[name2];
              if (func && func.handler) {
                return func.handler(context, args, optArgs);
              } else {
                throw new src_ParseError("No function handler for " + name2);
              }
            }
            /**
             * Parses the arguments of a function or environment
             */
            parseArguments(func, funcData) {
              const totalArgs = funcData.numArgs + funcData.numOptionalArgs;
              if (totalArgs === 0) {
                return {
                  args: [],
                  optArgs: []
                };
              }
              const args = [];
              const optArgs = [];
              for (let i = 0; i < totalArgs; i++) {
                let argType = funcData.argTypes && funcData.argTypes[i];
                const isOptional = i < funcData.numOptionalArgs;
                if (funcData.primitive && argType == null || // \sqrt expands into primitive if optional argument doesn't exist
                funcData.type === "sqrt" && i === 1 && optArgs[0] == null) {
                  argType = "primitive";
                }
                const arg = this.parseGroupOfType("argument to '" + func + "'", argType, isOptional);
                if (isOptional) {
                  optArgs.push(arg);
                } else if (arg != null) {
                  args.push(arg);
                } else {
                  throw new src_ParseError("Null argument, please report this as a bug");
                }
              }
              return {
                args,
                optArgs
              };
            }
            /**
             * Parses a group when the mode is changing.
             */
            parseGroupOfType(name2, type, optional) {
              switch (type) {
                case "color":
                  return this.parseColorGroup(optional);
                case "size":
                  return this.parseSizeGroup(optional);
                case "url":
                  return this.parseUrlGroup(optional);
                case "math":
                case "text":
                  return this.parseArgumentGroup(optional, type);
                case "hbox": {
                  const group = this.parseArgumentGroup(optional, "text");
                  return group != null ? {
                    type: "styling",
                    mode: group.mode,
                    body: [group],
                    style: "text"
                    // simulate \textstyle
                  } : null;
                }
                case "raw": {
                  const token = this.parseStringGroup("raw", optional);
                  return token != null ? {
                    type: "raw",
                    mode: "text",
                    string: token.text
                  } : null;
                }
                case "primitive": {
                  if (optional) {
                    throw new src_ParseError("A primitive argument cannot be optional");
                  }
                  const group = this.parseGroup(name2);
                  if (group == null) {
                    throw new src_ParseError("Expected group as " + name2, this.fetch());
                  }
                  return group;
                }
                case "original":
                case null:
                case void 0:
                  return this.parseArgumentGroup(optional);
                default:
                  throw new src_ParseError("Unknown group type as " + name2, this.fetch());
              }
            }
            /**
             * Discard any space tokens, fetching the next non-space token.
             */
            consumeSpaces() {
              while (this.fetch().text === " ") {
                this.consume();
              }
            }
            /**
             * Parses a group, essentially returning the string formed by the
             * brace-enclosed tokens plus some position information.
             */
            parseStringGroup(modeName, optional) {
              const argToken = this.gullet.scanArgument(optional);
              if (argToken == null) {
                return null;
              }
              let str = "";
              let nextToken;
              while ((nextToken = this.fetch()).text !== "EOF") {
                str += nextToken.text;
                this.consume();
              }
              this.consume();
              argToken.text = str;
              return argToken;
            }
            /**
             * Parses a regex-delimited group: the largest sequence of tokens
             * whose concatenated strings match `regex`. Returns the string
             * formed by the tokens plus some position information.
             */
            parseRegexGroup(regex, modeName) {
              const firstToken = this.fetch();
              let lastToken = firstToken;
              let str = "";
              let nextToken;
              while ((nextToken = this.fetch()).text !== "EOF" && regex.test(str + nextToken.text)) {
                lastToken = nextToken;
                str += lastToken.text;
                this.consume();
              }
              if (str === "") {
                throw new src_ParseError("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
              }
              return firstToken.range(lastToken, str);
            }
            /**
             * Parses a color description.
             */
            parseColorGroup(optional) {
              const res = this.parseStringGroup("color", optional);
              if (res == null) {
                return null;
              }
              const match = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);
              if (!match) {
                throw new src_ParseError("Invalid color: '" + res.text + "'", res);
              }
              let color2 = match[0];
              if (/^[0-9a-f]{6}$/i.test(color2)) {
                color2 = "#" + color2;
              }
              return {
                type: "color-token",
                mode: this.mode,
                color: color2
              };
            }
            /**
             * Parses a size specification, consisting of magnitude and unit.
             */
            parseSizeGroup(optional) {
              let res;
              let isBlank = false;
              this.gullet.consumeSpaces();
              if (!optional && this.gullet.future().text !== "{") {
                res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
              } else {
                res = this.parseStringGroup("size", optional);
              }
              if (!res) {
                return null;
              }
              if (!optional && res.text.length === 0) {
                res.text = "0pt";
                isBlank = true;
              }
              const match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);
              if (!match) {
                throw new src_ParseError("Invalid size: '" + res.text + "'", res);
              }
              const data = {
                number: +(match[1] + match[2]),
                // sign + magnitude, cast to number
                unit: match[3]
              };
              if (!validUnit(data)) {
                throw new src_ParseError("Invalid unit: '" + data.unit + "'", res);
              }
              return {
                type: "size",
                mode: this.mode,
                value: data,
                isBlank
              };
            }
            /**
             * Parses an URL, checking escaped letters and allowed protocols,
             * and setting the catcode of % as an active character (as in \hyperref).
             */
            parseUrlGroup(optional) {
              this.gullet.lexer.setCatcode("%", 13);
              this.gullet.lexer.setCatcode("~", 12);
              const res = this.parseStringGroup("url", optional);
              this.gullet.lexer.setCatcode("%", 14);
              this.gullet.lexer.setCatcode("~", 13);
              if (res == null) {
                return null;
              }
              const url = res.text.replace(/\\([#$%&~_^{}])/g, "$1");
              return {
                type: "url",
                mode: this.mode,
                url
              };
            }
            /**
             * Parses an argument with the mode specified.
             */
            parseArgumentGroup(optional, mode) {
              const argToken = this.gullet.scanArgument(optional);
              if (argToken == null) {
                return null;
              }
              const outerMode = this.mode;
              if (mode) {
                this.switchMode(mode);
              }
              this.gullet.beginGroup();
              const expression = this.parseExpression(false, "EOF");
              this.expect("EOF");
              this.gullet.endGroup();
              const result = {
                type: "ordgroup",
                mode: this.mode,
                loc: argToken.loc,
                body: expression
              };
              if (mode) {
                this.switchMode(outerMode);
              }
              return result;
            }
            /**
             * Parses an ordinary group, which is either a single nucleus (like "x")
             * or an expression in braces (like "{x+y}") or an implicit group, a group
             * that starts at the current position, and ends right before a higher explicit
             * group ends, or at EOF.
             */
            parseGroup(name2, breakOnTokenText) {
              const firstToken = this.fetch();
              const text = firstToken.text;
              let result;
              if (text === "{" || text === "\\begingroup") {
                this.consume();
                const groupEnd = text === "{" ? "}" : "\\endgroup";
                this.gullet.beginGroup();
                const expression = this.parseExpression(false, groupEnd);
                const lastToken = this.fetch();
                this.expect(groupEnd);
                this.gullet.endGroup();
                result = {
                  type: "ordgroup",
                  mode: this.mode,
                  loc: SourceLocation.range(firstToken, lastToken),
                  body: expression,
                  // A group formed by \begingroup...\endgroup is a semi-simple group
                  // which doesn't affect spacing in math mode, i.e., is transparent.
                  // https://tex.stackexchange.com/questions/1930/when-should-one-
                  // use-begingroup-instead-of-bgroup
                  semisimple: text === "\\begingroup" || void 0
                };
              } else {
                result = this.parseFunction(breakOnTokenText, name2) || this.parseSymbol();
                if (result == null && text[0] === "\\" && !implicitCommands.hasOwnProperty(text)) {
                  if (this.settings.throwOnError) {
                    throw new src_ParseError("Undefined control sequence: " + text, firstToken);
                  }
                  result = this.formatUnsupportedCmd(text);
                  this.consume();
                }
              }
              return result;
            }
            /**
             * Form ligature-like combinations of characters for text mode.
             * This includes inputs like "--", "---", "``" and "''".
             * The result will simply replace multiple textord nodes with a single
             * character in each value by a single textord node having multiple
             * characters in its value.  The representation is still ASCII source.
             * The group will be modified in place.
             */
            formLigatures(group) {
              let n = group.length - 1;
              for (let i = 0; i < n; ++i) {
                const a = group[i];
                const v = a.text;
                if (v === "-" && group[i + 1].text === "-") {
                  if (i + 1 < n && group[i + 2].text === "-") {
                    group.splice(i, 3, {
                      type: "textord",
                      mode: "text",
                      loc: SourceLocation.range(a, group[i + 2]),
                      text: "---"
                    });
                    n -= 2;
                  } else {
                    group.splice(i, 2, {
                      type: "textord",
                      mode: "text",
                      loc: SourceLocation.range(a, group[i + 1]),
                      text: "--"
                    });
                    n -= 1;
                  }
                }
                if ((v === "'" || v === "`") && group[i + 1].text === v) {
                  group.splice(i, 2, {
                    type: "textord",
                    mode: "text",
                    loc: SourceLocation.range(a, group[i + 1]),
                    text: v + v
                  });
                  n -= 1;
                }
              }
            }
            /**
             * Parse a single symbol out of the string. Here, we handle single character
             * symbols and special functions like \verb.
             */
            parseSymbol() {
              const nucleus = this.fetch();
              let text = nucleus.text;
              if (/^\\verb[^a-zA-Z]/.test(text)) {
                this.consume();
                let arg = text.slice(5);
                const star = arg.charAt(0) === "*";
                if (star) {
                  arg = arg.slice(1);
                }
                if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
                  throw new src_ParseError("\\verb assertion failed --\n                    please report what input caused this bug");
                }
                arg = arg.slice(1, -1);
                return {
                  type: "verb",
                  mode: "text",
                  body: arg,
                  star
                };
              }
              if (unicodeSymbols.hasOwnProperty(text[0]) && !src_symbols[this.mode][text[0]]) {
                if (this.settings.strict && this.mode === "math") {
                  this.settings.reportNonstrict("unicodeTextInMathMode", 'Accented Unicode text character "' + text[0] + '" used in math mode', nucleus);
                }
                text = unicodeSymbols[text[0]] + text.slice(1);
              }
              const match = combiningDiacriticalMarksEndRegex.exec(text);
              if (match) {
                text = text.substring(0, match.index);
                if (text === "i") {
                  text = "ı";
                } else if (text === "j") {
                  text = "ȷ";
                }
              }
              let symbol;
              if (src_symbols[this.mode][text]) {
                if (this.settings.strict && this.mode === "math" && extraLatin.indexOf(text) >= 0) {
                  this.settings.reportNonstrict("unicodeTextInMathMode", 'Latin-1/Unicode text character "' + text[0] + '" used in math mode', nucleus);
                }
                const group = src_symbols[this.mode][text].group;
                const loc = SourceLocation.range(nucleus);
                let s;
                if (ATOMS.hasOwnProperty(group)) {
                  const family = group;
                  s = {
                    type: "atom",
                    mode: this.mode,
                    family,
                    loc,
                    text
                  };
                } else {
                  s = {
                    type: group,
                    mode: this.mode,
                    loc,
                    text
                  };
                }
                symbol = s;
              } else if (text.charCodeAt(0) >= 128) {
                if (this.settings.strict) {
                  if (!supportedCodepoint(text.charCodeAt(0))) {
                    this.settings.reportNonstrict("unknownSymbol", 'Unrecognized Unicode character "' + text[0] + '"' + (" (" + text.charCodeAt(0) + ")"), nucleus);
                  } else if (this.mode === "math") {
                    this.settings.reportNonstrict("unicodeTextInMathMode", 'Unicode text character "' + text[0] + '" used in math mode', nucleus);
                  }
                }
                symbol = {
                  type: "textord",
                  mode: "text",
                  loc: SourceLocation.range(nucleus),
                  text
                };
              } else {
                return null;
              }
              this.consume();
              if (match) {
                for (let i = 0; i < match[0].length; i++) {
                  const accent2 = match[0][i];
                  if (!unicodeAccents[accent2]) {
                    throw new src_ParseError("Unknown accent ' " + accent2 + "'", nucleus);
                  }
                  const command = unicodeAccents[accent2][this.mode] || unicodeAccents[accent2].text;
                  if (!command) {
                    throw new src_ParseError("Accent " + accent2 + " unsupported in " + this.mode + " mode", nucleus);
                  }
                  symbol = {
                    type: "accent",
                    mode: this.mode,
                    loc: SourceLocation.range(nucleus),
                    label: command,
                    isStretchy: false,
                    isShifty: true,
                    // $FlowFixMe
                    base: symbol
                  };
                }
              }
              return symbol;
            }
          }
          Parser.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];
          const parseTree = function(toParse, settings) {
            if (!(typeof toParse === "string" || toParse instanceof String)) {
              throw new TypeError("KaTeX can only parse string typed expression");
            }
            const parser = new Parser(toParse, settings);
            delete parser.gullet.macros.current["\\df@tag"];
            let tree = parser.parse();
            delete parser.gullet.macros.current["\\current@color"];
            delete parser.gullet.macros.current["\\color"];
            if (parser.gullet.macros.get("\\df@tag")) {
              if (!settings.displayMode) {
                throw new src_ParseError("\\tag works only in display equations");
              }
              tree = [{
                type: "tag",
                mode: "text",
                body: tree,
                tag: parser.subparse([new Token("\\df@tag")])
              }];
            }
            return tree;
          };
          var src_parseTree = parseTree;
          let render = function(expression, baseNode, options) {
            baseNode.textContent = "";
            const node = renderToDomTree(expression, options).toNode();
            baseNode.appendChild(node);
          };
          if (typeof document !== "undefined") {
            if (document.compatMode !== "CSS1Compat") {
              typeof console !== "undefined" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your website has a suitable doctype.");
              render = function() {
                throw new src_ParseError("KaTeX doesn't work in quirks mode.");
              };
            }
          }
          const renderToString = function(expression, options) {
            const markup = renderToDomTree(expression, options).toMarkup();
            return markup;
          };
          const generateParseTree = function(expression, options) {
            const settings = new Settings(options);
            return src_parseTree(expression, settings);
          };
          const renderError = function(error, expression, options) {
            if (options.throwOnError || !(error instanceof src_ParseError)) {
              throw error;
            }
            const node = buildCommon.makeSpan(["katex-error"], [new SymbolNode(expression)]);
            node.setAttribute("title", error.toString());
            node.setAttribute("style", "color:" + options.errorColor);
            return node;
          };
          const renderToDomTree = function(expression, options) {
            const settings = new Settings(options);
            try {
              const tree = src_parseTree(expression, settings);
              return buildTree(tree, expression, settings);
            } catch (error) {
              return renderError(error, expression, settings);
            }
          };
          const renderToHTMLTree = function(expression, options) {
            const settings = new Settings(options);
            try {
              const tree = src_parseTree(expression, settings);
              return buildHTMLTree(tree, expression, settings);
            } catch (error) {
              return renderError(error, expression, settings);
            }
          };
          const version2 = "0.16.22";
          const __domTree = {
            Span,
            Anchor,
            SymbolNode,
            SvgNode,
            PathNode,
            LineNode
          };
          var katex2 = {
            /**
             * Current KaTeX version
             */
            version: version2,
            /**
             * Renders the given LaTeX into an HTML+MathML combination, and adds
             * it as a child to the specified DOM node.
             */
            render,
            /**
             * Renders the given LaTeX into an HTML+MathML combination string,
             * for sending to the client.
             */
            renderToString,
            /**
             * KaTeX error, usually during parsing.
             */
            ParseError: src_ParseError,
            /**
             * The schema of Settings
             */
            SETTINGS_SCHEMA,
            /**
             * Parses the given LaTeX into KaTeX's internal parse tree structure,
             * without rendering to HTML or MathML.
             *
             * NOTE: This method is not currently recommended for public use.
             * The internal tree representation is unstable and is very likely
             * to change. Use at your own risk.
             */
            __parse: generateParseTree,
            /**
             * Renders the given LaTeX into an HTML+MathML internal DOM tree
             * representation, without flattening that representation to a string.
             *
             * NOTE: This method is not currently recommended for public use.
             * The internal tree representation is unstable and is very likely
             * to change. Use at your own risk.
             */
            __renderToDomTree: renderToDomTree,
            /**
             * Renders the given LaTeX into an HTML internal DOM tree representation,
             * without MathML and without flattening that representation to a string.
             *
             * NOTE: This method is not currently recommended for public use.
             * The internal tree representation is unstable and is very likely
             * to change. Use at your own risk.
             */
            __renderToHTMLTree: renderToHTMLTree,
            /**
             * extends internal font metrics object with a new object
             * each key in the new object represents a font name
            */
            __setFontMetrics: setFontMetrics,
            /**
             * adds a new symbol to builtin symbols table
             */
            __defineSymbol: defineSymbol,
            /**
             * adds a new function to builtin function list,
             * which directly produce parse tree elements
             * and have their own html/mathml builders
             */
            __defineFunction: defineFunction,
            /**
             * adds a new macro to builtin macro list
             */
            __defineMacro: defineMacro,
            /**
             * Expose the dom tree node types, which can be useful for type checking nodes.
             *
             * NOTE: These methods are not currently recommended for public use.
             * The internal tree representation is unstable and is very likely
             * to change. Use at your own risk.
             */
            __domTree
          };
          var katex_webpack = katex2;
          __webpack_exports__ = __webpack_exports__["default"];
          return __webpack_exports__;
        }()
      );
    });
  })(katex);
  return katex.exports;
}
/*! markmap-lib v0.14.4 | MIT License */
(function(module2, exports) {
  (function(global2, factory) {
    factory(exports, requireKatex());
  })(commonjsGlobal, function(exports2, require$$0) {
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e["default"] : e;
    }
    var require$$0__default = /* @__PURE__ */ _interopDefaultLegacy(require$$0);
    function _extends$1() {
      _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$1.apply(this, arguments);
    }
    /*! markmap-common v0.14.2 | MIT License */
    class Hook2 {
      constructor() {
        this.listeners = [];
      }
      tap(fn) {
        this.listeners.push(fn);
        return () => this.revoke(fn);
      }
      revoke(fn) {
        const i2 = this.listeners.indexOf(fn);
        if (i2 >= 0)
          this.listeners.splice(i2, 1);
      }
      revokeAll() {
        this.listeners.splice(0);
      }
      call(...args) {
        for (const fn of this.listeners) {
          fn(...args);
        }
      }
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    const _excluded = ["textContent"];
    function escapeHtml$1(html) {
      return html.replace(/[&<"]/g, (m) => ({
        "&": "&amp;",
        "<": "&lt;",
        '"': "&quot;"
      })[m]);
    }
    function escapeScript(content) {
      return content.replace(/<(\/script>)/g, "\\x3c$2");
    }
    function htmlOpen(tagName, attrs) {
      const attrStr = attrs ? Object.entries(attrs).map(([key, value]) => {
        if (value == null || value === false)
          return;
        key = ` ${escapeHtml$1(key)}`;
        if (value === true)
          return key;
        return `${key}="${escapeHtml$1(value)}"`;
      }).filter(Boolean).join("") : "";
      return `<${tagName}${attrStr}>`;
    }
    function htmlClose(tagName) {
      return `</${tagName}>`;
    }
    function wrapHtml(tagName, content, attrs) {
      if (content == null)
        return htmlOpen(tagName, attrs);
      return htmlOpen(tagName, attrs) + (content || "") + htmlClose(tagName);
    }
    function buildCode(fn, args) {
      const params = args.map((arg) => {
        if (typeof arg === "function")
          return arg.toString();
        return JSON.stringify(arg != null ? arg : null);
      }).join(",");
      return `(${fn.toString()})(${params})`;
    }
    function persistJS(items, context) {
      return items.map((item) => {
        if (item.type === "script") {
          const _item$data = item.data, {
            textContent
          } = _item$data, rest = _objectWithoutPropertiesLoose(_item$data, _excluded);
          return wrapHtml("script", textContent || "", rest);
        }
        if (item.type === "iife") {
          const {
            fn,
            getParams
          } = item.data;
          return wrapHtml("script", escapeScript(buildCode(fn, (getParams == null ? void 0 : getParams(context)) || [])));
        }
        return "";
      });
    }
    function persistCSS(items) {
      return items.map((item) => {
        if (item.type === "stylesheet") {
          return wrapHtml("link", null, _extends2({
            rel: "stylesheet"
          }, item.data));
        }
        return wrapHtml("style", item.data);
      });
    }
    Math.random().toString(36).slice(2, 8);
    function wrapFunction(fn, {
      before,
      after
    }) {
      return function wrapped(...args) {
        const ctx = {
          args,
          thisObj: this
        };
        try {
          if (before)
            before(ctx);
        } catch (_unused) {
        }
        ctx.result = fn.apply(ctx.thisObj, ctx.args);
        try {
          if (after)
            after(ctx);
        } catch (_unused2) {
        }
        return ctx.result;
      };
    }
    function memoize(fn) {
      const cache = {};
      return function memoized(...args) {
        const key = `${args[0]}`;
        let data = cache[key];
        if (!data) {
          data = {
            value: fn(...args)
          };
          cache[key] = data;
        }
        return data.value;
      };
    }
    function createElement(tagName, props, attrs) {
      const el = document.createElement(tagName);
      if (props) {
        Object.entries(props).forEach(([key, value]) => {
          el[key] = value;
        });
      }
      if (attrs) {
        Object.entries(attrs).forEach(([key, value]) => {
          el.setAttribute(key, value);
        });
      }
      return el;
    }
    const memoizedPreloadJS = memoize((url) => {
      document.head.append(createElement("link", {
        rel: "preload",
        as: "script",
        href: url
      }));
    });
    async function loadJSItem(item, context) {
      if (!item.loaded) {
        if (item.type === "script") {
          item.loaded = new Promise((resolve, reject) => {
            var _item$data;
            document.head.append(createElement("script", _extends2({}, item.data, {
              onload: resolve,
              onerror: reject
            })));
            if (!((_item$data = item.data) != null && _item$data.src))
              resolve(void 0);
          }).then(() => {
            item.loaded = true;
          });
        }
        if (item.type === "iife") {
          const {
            fn,
            getParams
          } = item.data;
          fn(...(getParams == null ? void 0 : getParams(context)) || []);
          item.loaded = true;
        }
      }
      await item.loaded;
    }
    async function loadJS(items, context) {
      const needPreload = items.filter((item) => {
        var _item$data2;
        return item.type === "script" && ((_item$data2 = item.data) == null ? void 0 : _item$data2.src);
      });
      if (needPreload.length > 1)
        needPreload.forEach((item) => memoizedPreloadJS(item.data.src));
      context = _extends2({
        getMarkmap: () => window.markmap
      }, context);
      for (const item of items) {
        await loadJSItem(item, context);
      }
    }
    const template = '<!DOCTYPE html>\n<html>\n<head>\n<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n<meta http-equiv="X-UA-Compatible" content="ie=edge">\n<title>Markmap</title>\n<style>\n* {\n  margin: 0;\n  padding: 0;\n}\n#mindmap {\n  display: block;\n  width: 100vw;\n  height: 100vh;\n}\n</style>\n<!--CSS-->\n</head>\n<body>\n<svg id="mindmap"></svg>\n<!--JS-->\n</body>\n</html>\n';
    const BASE_JS = [`https://cdn.jsdelivr.net/npm/d3@${"6.7.0"}`, `https://cdn.jsdelivr.net/npm/markmap-view@${"0.14.4"}`].map((src) => ({
      type: "script",
      data: {
        src
      }
    }));
    function fillTemplate(root2, assets, extra) {
      extra = _extends$1({
        baseJs: BASE_JS
      }, extra);
      const {
        scripts: scripts2,
        styles
      } = assets;
      const cssList = [...styles ? persistCSS(styles) : []];
      const context = {
        getMarkmap: () => window.markmap,
        getOptions: extra.getOptions,
        jsonOptions: extra.jsonOptions,
        root: root2
      };
      const jsList = [...persistJS([...extra.baseJs, ...scripts2 || [], {
        type: "iife",
        data: {
          fn: (getMarkmap, getOptions, root3, jsonOptions) => {
            const markmap = getMarkmap();
            window.mm = markmap.Markmap.create("svg#mindmap", (getOptions || markmap.deriveOptions)(jsonOptions), root3);
          },
          getParams: ({
            getMarkmap,
            getOptions,
            root: root3,
            jsonOptions
          }) => {
            return [getMarkmap, getOptions, root3, jsonOptions];
          }
        }
      }], context)];
      const html = template.replace("<!--CSS-->", () => cssList.join("")).replace("<!--JS-->", () => jsList.join(""));
      return html;
    }
    var entities = {
      "Aacute": "Á",
      "aacute": "á",
      "Abreve": "Ă",
      "abreve": "ă",
      "ac": "∾",
      "acd": "∿",
      "acE": "∾̳",
      "Acirc": "Â",
      "acirc": "â",
      "acute": "´",
      "Acy": "А",
      "acy": "а",
      "AElig": "Æ",
      "aelig": "æ",
      "af": "⁡",
      "Afr": "𝔄",
      "afr": "𝔞",
      "Agrave": "À",
      "agrave": "à",
      "alefsym": "ℵ",
      "aleph": "ℵ",
      "Alpha": "Α",
      "alpha": "α",
      "Amacr": "Ā",
      "amacr": "ā",
      "amalg": "⨿",
      "AMP": "&",
      "amp": "&",
      "And": "⩓",
      "and": "∧",
      "andand": "⩕",
      "andd": "⩜",
      "andslope": "⩘",
      "andv": "⩚",
      "ang": "∠",
      "ange": "⦤",
      "angle": "∠",
      "angmsd": "∡",
      "angmsdaa": "⦨",
      "angmsdab": "⦩",
      "angmsdac": "⦪",
      "angmsdad": "⦫",
      "angmsdae": "⦬",
      "angmsdaf": "⦭",
      "angmsdag": "⦮",
      "angmsdah": "⦯",
      "angrt": "∟",
      "angrtvb": "⊾",
      "angrtvbd": "⦝",
      "angsph": "∢",
      "angst": "Å",
      "angzarr": "⍼",
      "Aogon": "Ą",
      "aogon": "ą",
      "Aopf": "𝔸",
      "aopf": "𝕒",
      "ap": "≈",
      "apacir": "⩯",
      "apE": "⩰",
      "ape": "≊",
      "apid": "≋",
      "apos": "'",
      "ApplyFunction": "⁡",
      "approx": "≈",
      "approxeq": "≊",
      "Aring": "Å",
      "aring": "å",
      "Ascr": "𝒜",
      "ascr": "𝒶",
      "Assign": "≔",
      "ast": "*",
      "asymp": "≈",
      "asympeq": "≍",
      "Atilde": "Ã",
      "atilde": "ã",
      "Auml": "Ä",
      "auml": "ä",
      "awconint": "∳",
      "awint": "⨑",
      "backcong": "≌",
      "backepsilon": "϶",
      "backprime": "‵",
      "backsim": "∽",
      "backsimeq": "⋍",
      "Backslash": "∖",
      "Barv": "⫧",
      "barvee": "⊽",
      "Barwed": "⌆",
      "barwed": "⌅",
      "barwedge": "⌅",
      "bbrk": "⎵",
      "bbrktbrk": "⎶",
      "bcong": "≌",
      "Bcy": "Б",
      "bcy": "б",
      "bdquo": "„",
      "becaus": "∵",
      "Because": "∵",
      "because": "∵",
      "bemptyv": "⦰",
      "bepsi": "϶",
      "bernou": "ℬ",
      "Bernoullis": "ℬ",
      "Beta": "Β",
      "beta": "β",
      "beth": "ℶ",
      "between": "≬",
      "Bfr": "𝔅",
      "bfr": "𝔟",
      "bigcap": "⋂",
      "bigcirc": "◯",
      "bigcup": "⋃",
      "bigodot": "⨀",
      "bigoplus": "⨁",
      "bigotimes": "⨂",
      "bigsqcup": "⨆",
      "bigstar": "★",
      "bigtriangledown": "▽",
      "bigtriangleup": "△",
      "biguplus": "⨄",
      "bigvee": "⋁",
      "bigwedge": "⋀",
      "bkarow": "⤍",
      "blacklozenge": "⧫",
      "blacksquare": "▪",
      "blacktriangle": "▴",
      "blacktriangledown": "▾",
      "blacktriangleleft": "◂",
      "blacktriangleright": "▸",
      "blank": "␣",
      "blk12": "▒",
      "blk14": "░",
      "blk34": "▓",
      "block": "█",
      "bne": "=⃥",
      "bnequiv": "≡⃥",
      "bNot": "⫭",
      "bnot": "⌐",
      "Bopf": "𝔹",
      "bopf": "𝕓",
      "bot": "⊥",
      "bottom": "⊥",
      "bowtie": "⋈",
      "boxbox": "⧉",
      "boxDL": "╗",
      "boxDl": "╖",
      "boxdL": "╕",
      "boxdl": "┐",
      "boxDR": "╔",
      "boxDr": "╓",
      "boxdR": "╒",
      "boxdr": "┌",
      "boxH": "═",
      "boxh": "─",
      "boxHD": "╦",
      "boxHd": "╤",
      "boxhD": "╥",
      "boxhd": "┬",
      "boxHU": "╩",
      "boxHu": "╧",
      "boxhU": "╨",
      "boxhu": "┴",
      "boxminus": "⊟",
      "boxplus": "⊞",
      "boxtimes": "⊠",
      "boxUL": "╝",
      "boxUl": "╜",
      "boxuL": "╛",
      "boxul": "┘",
      "boxUR": "╚",
      "boxUr": "╙",
      "boxuR": "╘",
      "boxur": "└",
      "boxV": "║",
      "boxv": "│",
      "boxVH": "╬",
      "boxVh": "╫",
      "boxvH": "╪",
      "boxvh": "┼",
      "boxVL": "╣",
      "boxVl": "╢",
      "boxvL": "╡",
      "boxvl": "┤",
      "boxVR": "╠",
      "boxVr": "╟",
      "boxvR": "╞",
      "boxvr": "├",
      "bprime": "‵",
      "Breve": "˘",
      "breve": "˘",
      "brvbar": "¦",
      "Bscr": "ℬ",
      "bscr": "𝒷",
      "bsemi": "⁏",
      "bsim": "∽",
      "bsime": "⋍",
      "bsol": "\\",
      "bsolb": "⧅",
      "bsolhsub": "⟈",
      "bull": "•",
      "bullet": "•",
      "bump": "≎",
      "bumpE": "⪮",
      "bumpe": "≏",
      "Bumpeq": "≎",
      "bumpeq": "≏",
      "Cacute": "Ć",
      "cacute": "ć",
      "Cap": "⋒",
      "cap": "∩",
      "capand": "⩄",
      "capbrcup": "⩉",
      "capcap": "⩋",
      "capcup": "⩇",
      "capdot": "⩀",
      "CapitalDifferentialD": "ⅅ",
      "caps": "∩︀",
      "caret": "⁁",
      "caron": "ˇ",
      "Cayleys": "ℭ",
      "ccaps": "⩍",
      "Ccaron": "Č",
      "ccaron": "č",
      "Ccedil": "Ç",
      "ccedil": "ç",
      "Ccirc": "Ĉ",
      "ccirc": "ĉ",
      "Cconint": "∰",
      "ccups": "⩌",
      "ccupssm": "⩐",
      "Cdot": "Ċ",
      "cdot": "ċ",
      "cedil": "¸",
      "Cedilla": "¸",
      "cemptyv": "⦲",
      "cent": "¢",
      "CenterDot": "·",
      "centerdot": "·",
      "Cfr": "ℭ",
      "cfr": "𝔠",
      "CHcy": "Ч",
      "chcy": "ч",
      "check": "✓",
      "checkmark": "✓",
      "Chi": "Χ",
      "chi": "χ",
      "cir": "○",
      "circ": "ˆ",
      "circeq": "≗",
      "circlearrowleft": "↺",
      "circlearrowright": "↻",
      "circledast": "⊛",
      "circledcirc": "⊚",
      "circleddash": "⊝",
      "CircleDot": "⊙",
      "circledR": "®",
      "circledS": "Ⓢ",
      "CircleMinus": "⊖",
      "CirclePlus": "⊕",
      "CircleTimes": "⊗",
      "cirE": "⧃",
      "cire": "≗",
      "cirfnint": "⨐",
      "cirmid": "⫯",
      "cirscir": "⧂",
      "ClockwiseContourIntegral": "∲",
      "CloseCurlyDoubleQuote": "”",
      "CloseCurlyQuote": "’",
      "clubs": "♣",
      "clubsuit": "♣",
      "Colon": "∷",
      "colon": ":",
      "Colone": "⩴",
      "colone": "≔",
      "coloneq": "≔",
      "comma": ",",
      "commat": "@",
      "comp": "∁",
      "compfn": "∘",
      "complement": "∁",
      "complexes": "ℂ",
      "cong": "≅",
      "congdot": "⩭",
      "Congruent": "≡",
      "Conint": "∯",
      "conint": "∮",
      "ContourIntegral": "∮",
      "Copf": "ℂ",
      "copf": "𝕔",
      "coprod": "∐",
      "Coproduct": "∐",
      "COPY": "©",
      "copy": "©",
      "copysr": "℗",
      "CounterClockwiseContourIntegral": "∳",
      "crarr": "↵",
      "Cross": "⨯",
      "cross": "✗",
      "Cscr": "𝒞",
      "cscr": "𝒸",
      "csub": "⫏",
      "csube": "⫑",
      "csup": "⫐",
      "csupe": "⫒",
      "ctdot": "⋯",
      "cudarrl": "⤸",
      "cudarrr": "⤵",
      "cuepr": "⋞",
      "cuesc": "⋟",
      "cularr": "↶",
      "cularrp": "⤽",
      "Cup": "⋓",
      "cup": "∪",
      "cupbrcap": "⩈",
      "CupCap": "≍",
      "cupcap": "⩆",
      "cupcup": "⩊",
      "cupdot": "⊍",
      "cupor": "⩅",
      "cups": "∪︀",
      "curarr": "↷",
      "curarrm": "⤼",
      "curlyeqprec": "⋞",
      "curlyeqsucc": "⋟",
      "curlyvee": "⋎",
      "curlywedge": "⋏",
      "curren": "¤",
      "curvearrowleft": "↶",
      "curvearrowright": "↷",
      "cuvee": "⋎",
      "cuwed": "⋏",
      "cwconint": "∲",
      "cwint": "∱",
      "cylcty": "⌭",
      "Dagger": "‡",
      "dagger": "†",
      "daleth": "ℸ",
      "Darr": "↡",
      "dArr": "⇓",
      "darr": "↓",
      "dash": "‐",
      "Dashv": "⫤",
      "dashv": "⊣",
      "dbkarow": "⤏",
      "dblac": "˝",
      "Dcaron": "Ď",
      "dcaron": "ď",
      "Dcy": "Д",
      "dcy": "д",
      "DD": "ⅅ",
      "dd": "ⅆ",
      "ddagger": "‡",
      "ddarr": "⇊",
      "DDotrahd": "⤑",
      "ddotseq": "⩷",
      "deg": "°",
      "Del": "∇",
      "Delta": "Δ",
      "delta": "δ",
      "demptyv": "⦱",
      "dfisht": "⥿",
      "Dfr": "𝔇",
      "dfr": "𝔡",
      "dHar": "⥥",
      "dharl": "⇃",
      "dharr": "⇂",
      "DiacriticalAcute": "´",
      "DiacriticalDot": "˙",
      "DiacriticalDoubleAcute": "˝",
      "DiacriticalGrave": "`",
      "DiacriticalTilde": "˜",
      "diam": "⋄",
      "Diamond": "⋄",
      "diamond": "⋄",
      "diamondsuit": "♦",
      "diams": "♦",
      "die": "¨",
      "DifferentialD": "ⅆ",
      "digamma": "ϝ",
      "disin": "⋲",
      "div": "÷",
      "divide": "÷",
      "divideontimes": "⋇",
      "divonx": "⋇",
      "DJcy": "Ђ",
      "djcy": "ђ",
      "dlcorn": "⌞",
      "dlcrop": "⌍",
      "dollar": "$",
      "Dopf": "𝔻",
      "dopf": "𝕕",
      "Dot": "¨",
      "dot": "˙",
      "DotDot": "⃜",
      "doteq": "≐",
      "doteqdot": "≑",
      "DotEqual": "≐",
      "dotminus": "∸",
      "dotplus": "∔",
      "dotsquare": "⊡",
      "doublebarwedge": "⌆",
      "DoubleContourIntegral": "∯",
      "DoubleDot": "¨",
      "DoubleDownArrow": "⇓",
      "DoubleLeftArrow": "⇐",
      "DoubleLeftRightArrow": "⇔",
      "DoubleLeftTee": "⫤",
      "DoubleLongLeftArrow": "⟸",
      "DoubleLongLeftRightArrow": "⟺",
      "DoubleLongRightArrow": "⟹",
      "DoubleRightArrow": "⇒",
      "DoubleRightTee": "⊨",
      "DoubleUpArrow": "⇑",
      "DoubleUpDownArrow": "⇕",
      "DoubleVerticalBar": "∥",
      "DownArrow": "↓",
      "Downarrow": "⇓",
      "downarrow": "↓",
      "DownArrowBar": "⤓",
      "DownArrowUpArrow": "⇵",
      "DownBreve": "̑",
      "downdownarrows": "⇊",
      "downharpoonleft": "⇃",
      "downharpoonright": "⇂",
      "DownLeftRightVector": "⥐",
      "DownLeftTeeVector": "⥞",
      "DownLeftVector": "↽",
      "DownLeftVectorBar": "⥖",
      "DownRightTeeVector": "⥟",
      "DownRightVector": "⇁",
      "DownRightVectorBar": "⥗",
      "DownTee": "⊤",
      "DownTeeArrow": "↧",
      "drbkarow": "⤐",
      "drcorn": "⌟",
      "drcrop": "⌌",
      "Dscr": "𝒟",
      "dscr": "𝒹",
      "DScy": "Ѕ",
      "dscy": "ѕ",
      "dsol": "⧶",
      "Dstrok": "Đ",
      "dstrok": "đ",
      "dtdot": "⋱",
      "dtri": "▿",
      "dtrif": "▾",
      "duarr": "⇵",
      "duhar": "⥯",
      "dwangle": "⦦",
      "DZcy": "Џ",
      "dzcy": "џ",
      "dzigrarr": "⟿",
      "Eacute": "É",
      "eacute": "é",
      "easter": "⩮",
      "Ecaron": "Ě",
      "ecaron": "ě",
      "ecir": "≖",
      "Ecirc": "Ê",
      "ecirc": "ê",
      "ecolon": "≕",
      "Ecy": "Э",
      "ecy": "э",
      "eDDot": "⩷",
      "Edot": "Ė",
      "eDot": "≑",
      "edot": "ė",
      "ee": "ⅇ",
      "efDot": "≒",
      "Efr": "𝔈",
      "efr": "𝔢",
      "eg": "⪚",
      "Egrave": "È",
      "egrave": "è",
      "egs": "⪖",
      "egsdot": "⪘",
      "el": "⪙",
      "Element": "∈",
      "elinters": "⏧",
      "ell": "ℓ",
      "els": "⪕",
      "elsdot": "⪗",
      "Emacr": "Ē",
      "emacr": "ē",
      "empty": "∅",
      "emptyset": "∅",
      "EmptySmallSquare": "◻",
      "emptyv": "∅",
      "EmptyVerySmallSquare": "▫",
      "emsp": " ",
      "emsp13": " ",
      "emsp14": " ",
      "ENG": "Ŋ",
      "eng": "ŋ",
      "ensp": " ",
      "Eogon": "Ę",
      "eogon": "ę",
      "Eopf": "𝔼",
      "eopf": "𝕖",
      "epar": "⋕",
      "eparsl": "⧣",
      "eplus": "⩱",
      "epsi": "ε",
      "Epsilon": "Ε",
      "epsilon": "ε",
      "epsiv": "ϵ",
      "eqcirc": "≖",
      "eqcolon": "≕",
      "eqsim": "≂",
      "eqslantgtr": "⪖",
      "eqslantless": "⪕",
      "Equal": "⩵",
      "equals": "=",
      "EqualTilde": "≂",
      "equest": "≟",
      "Equilibrium": "⇌",
      "equiv": "≡",
      "equivDD": "⩸",
      "eqvparsl": "⧥",
      "erarr": "⥱",
      "erDot": "≓",
      "Escr": "ℰ",
      "escr": "ℯ",
      "esdot": "≐",
      "Esim": "⩳",
      "esim": "≂",
      "Eta": "Η",
      "eta": "η",
      "ETH": "Ð",
      "eth": "ð",
      "Euml": "Ë",
      "euml": "ë",
      "euro": "€",
      "excl": "!",
      "exist": "∃",
      "Exists": "∃",
      "expectation": "ℰ",
      "ExponentialE": "ⅇ",
      "exponentiale": "ⅇ",
      "fallingdotseq": "≒",
      "Fcy": "Ф",
      "fcy": "ф",
      "female": "♀",
      "ffilig": "ﬃ",
      "fflig": "ﬀ",
      "ffllig": "ﬄ",
      "Ffr": "𝔉",
      "ffr": "𝔣",
      "filig": "ﬁ",
      "FilledSmallSquare": "◼",
      "FilledVerySmallSquare": "▪",
      "fjlig": "fj",
      "flat": "♭",
      "fllig": "ﬂ",
      "fltns": "▱",
      "fnof": "ƒ",
      "Fopf": "𝔽",
      "fopf": "𝕗",
      "ForAll": "∀",
      "forall": "∀",
      "fork": "⋔",
      "forkv": "⫙",
      "Fouriertrf": "ℱ",
      "fpartint": "⨍",
      "frac12": "½",
      "frac13": "⅓",
      "frac14": "¼",
      "frac15": "⅕",
      "frac16": "⅙",
      "frac18": "⅛",
      "frac23": "⅔",
      "frac25": "⅖",
      "frac34": "¾",
      "frac35": "⅗",
      "frac38": "⅜",
      "frac45": "⅘",
      "frac56": "⅚",
      "frac58": "⅝",
      "frac78": "⅞",
      "frasl": "⁄",
      "frown": "⌢",
      "Fscr": "ℱ",
      "fscr": "𝒻",
      "gacute": "ǵ",
      "Gamma": "Γ",
      "gamma": "γ",
      "Gammad": "Ϝ",
      "gammad": "ϝ",
      "gap": "⪆",
      "Gbreve": "Ğ",
      "gbreve": "ğ",
      "Gcedil": "Ģ",
      "Gcirc": "Ĝ",
      "gcirc": "ĝ",
      "Gcy": "Г",
      "gcy": "г",
      "Gdot": "Ġ",
      "gdot": "ġ",
      "gE": "≧",
      "ge": "≥",
      "gEl": "⪌",
      "gel": "⋛",
      "geq": "≥",
      "geqq": "≧",
      "geqslant": "⩾",
      "ges": "⩾",
      "gescc": "⪩",
      "gesdot": "⪀",
      "gesdoto": "⪂",
      "gesdotol": "⪄",
      "gesl": "⋛︀",
      "gesles": "⪔",
      "Gfr": "𝔊",
      "gfr": "𝔤",
      "Gg": "⋙",
      "gg": "≫",
      "ggg": "⋙",
      "gimel": "ℷ",
      "GJcy": "Ѓ",
      "gjcy": "ѓ",
      "gl": "≷",
      "gla": "⪥",
      "glE": "⪒",
      "glj": "⪤",
      "gnap": "⪊",
      "gnapprox": "⪊",
      "gnE": "≩",
      "gne": "⪈",
      "gneq": "⪈",
      "gneqq": "≩",
      "gnsim": "⋧",
      "Gopf": "𝔾",
      "gopf": "𝕘",
      "grave": "`",
      "GreaterEqual": "≥",
      "GreaterEqualLess": "⋛",
      "GreaterFullEqual": "≧",
      "GreaterGreater": "⪢",
      "GreaterLess": "≷",
      "GreaterSlantEqual": "⩾",
      "GreaterTilde": "≳",
      "Gscr": "𝒢",
      "gscr": "ℊ",
      "gsim": "≳",
      "gsime": "⪎",
      "gsiml": "⪐",
      "GT": ">",
      "Gt": "≫",
      "gt": ">",
      "gtcc": "⪧",
      "gtcir": "⩺",
      "gtdot": "⋗",
      "gtlPar": "⦕",
      "gtquest": "⩼",
      "gtrapprox": "⪆",
      "gtrarr": "⥸",
      "gtrdot": "⋗",
      "gtreqless": "⋛",
      "gtreqqless": "⪌",
      "gtrless": "≷",
      "gtrsim": "≳",
      "gvertneqq": "≩︀",
      "gvnE": "≩︀",
      "Hacek": "ˇ",
      "hairsp": " ",
      "half": "½",
      "hamilt": "ℋ",
      "HARDcy": "Ъ",
      "hardcy": "ъ",
      "hArr": "⇔",
      "harr": "↔",
      "harrcir": "⥈",
      "harrw": "↭",
      "Hat": "^",
      "hbar": "ℏ",
      "Hcirc": "Ĥ",
      "hcirc": "ĥ",
      "hearts": "♥",
      "heartsuit": "♥",
      "hellip": "…",
      "hercon": "⊹",
      "Hfr": "ℌ",
      "hfr": "𝔥",
      "HilbertSpace": "ℋ",
      "hksearow": "⤥",
      "hkswarow": "⤦",
      "hoarr": "⇿",
      "homtht": "∻",
      "hookleftarrow": "↩",
      "hookrightarrow": "↪",
      "Hopf": "ℍ",
      "hopf": "𝕙",
      "horbar": "―",
      "HorizontalLine": "─",
      "Hscr": "ℋ",
      "hscr": "𝒽",
      "hslash": "ℏ",
      "Hstrok": "Ħ",
      "hstrok": "ħ",
      "HumpDownHump": "≎",
      "HumpEqual": "≏",
      "hybull": "⁃",
      "hyphen": "‐",
      "Iacute": "Í",
      "iacute": "í",
      "ic": "⁣",
      "Icirc": "Î",
      "icirc": "î",
      "Icy": "И",
      "icy": "и",
      "Idot": "İ",
      "IEcy": "Е",
      "iecy": "е",
      "iexcl": "¡",
      "iff": "⇔",
      "Ifr": "ℑ",
      "ifr": "𝔦",
      "Igrave": "Ì",
      "igrave": "ì",
      "ii": "ⅈ",
      "iiiint": "⨌",
      "iiint": "∭",
      "iinfin": "⧜",
      "iiota": "℩",
      "IJlig": "Ĳ",
      "ijlig": "ĳ",
      "Im": "ℑ",
      "Imacr": "Ī",
      "imacr": "ī",
      "image": "ℑ",
      "ImaginaryI": "ⅈ",
      "imagline": "ℐ",
      "imagpart": "ℑ",
      "imath": "ı",
      "imof": "⊷",
      "imped": "Ƶ",
      "Implies": "⇒",
      "in": "∈",
      "incare": "℅",
      "infin": "∞",
      "infintie": "⧝",
      "inodot": "ı",
      "Int": "∬",
      "int": "∫",
      "intcal": "⊺",
      "integers": "ℤ",
      "Integral": "∫",
      "intercal": "⊺",
      "Intersection": "⋂",
      "intlarhk": "⨗",
      "intprod": "⨼",
      "InvisibleComma": "⁣",
      "InvisibleTimes": "⁢",
      "IOcy": "Ё",
      "iocy": "ё",
      "Iogon": "Į",
      "iogon": "į",
      "Iopf": "𝕀",
      "iopf": "𝕚",
      "Iota": "Ι",
      "iota": "ι",
      "iprod": "⨼",
      "iquest": "¿",
      "Iscr": "ℐ",
      "iscr": "𝒾",
      "isin": "∈",
      "isindot": "⋵",
      "isinE": "⋹",
      "isins": "⋴",
      "isinsv": "⋳",
      "isinv": "∈",
      "it": "⁢",
      "Itilde": "Ĩ",
      "itilde": "ĩ",
      "Iukcy": "І",
      "iukcy": "і",
      "Iuml": "Ï",
      "iuml": "ï",
      "Jcirc": "Ĵ",
      "jcirc": "ĵ",
      "Jcy": "Й",
      "jcy": "й",
      "Jfr": "𝔍",
      "jfr": "𝔧",
      "jmath": "ȷ",
      "Jopf": "𝕁",
      "jopf": "𝕛",
      "Jscr": "𝒥",
      "jscr": "𝒿",
      "Jsercy": "Ј",
      "jsercy": "ј",
      "Jukcy": "Є",
      "jukcy": "є",
      "Kappa": "Κ",
      "kappa": "κ",
      "kappav": "ϰ",
      "Kcedil": "Ķ",
      "kcedil": "ķ",
      "Kcy": "К",
      "kcy": "к",
      "Kfr": "𝔎",
      "kfr": "𝔨",
      "kgreen": "ĸ",
      "KHcy": "Х",
      "khcy": "х",
      "KJcy": "Ќ",
      "kjcy": "ќ",
      "Kopf": "𝕂",
      "kopf": "𝕜",
      "Kscr": "𝒦",
      "kscr": "𝓀",
      "lAarr": "⇚",
      "Lacute": "Ĺ",
      "lacute": "ĺ",
      "laemptyv": "⦴",
      "lagran": "ℒ",
      "Lambda": "Λ",
      "lambda": "λ",
      "Lang": "⟪",
      "lang": "⟨",
      "langd": "⦑",
      "langle": "⟨",
      "lap": "⪅",
      "Laplacetrf": "ℒ",
      "laquo": "«",
      "Larr": "↞",
      "lArr": "⇐",
      "larr": "←",
      "larrb": "⇤",
      "larrbfs": "⤟",
      "larrfs": "⤝",
      "larrhk": "↩",
      "larrlp": "↫",
      "larrpl": "⤹",
      "larrsim": "⥳",
      "larrtl": "↢",
      "lat": "⪫",
      "lAtail": "⤛",
      "latail": "⤙",
      "late": "⪭",
      "lates": "⪭︀",
      "lBarr": "⤎",
      "lbarr": "⤌",
      "lbbrk": "❲",
      "lbrace": "{",
      "lbrack": "[",
      "lbrke": "⦋",
      "lbrksld": "⦏",
      "lbrkslu": "⦍",
      "Lcaron": "Ľ",
      "lcaron": "ľ",
      "Lcedil": "Ļ",
      "lcedil": "ļ",
      "lceil": "⌈",
      "lcub": "{",
      "Lcy": "Л",
      "lcy": "л",
      "ldca": "⤶",
      "ldquo": "“",
      "ldquor": "„",
      "ldrdhar": "⥧",
      "ldrushar": "⥋",
      "ldsh": "↲",
      "lE": "≦",
      "le": "≤",
      "LeftAngleBracket": "⟨",
      "LeftArrow": "←",
      "Leftarrow": "⇐",
      "leftarrow": "←",
      "LeftArrowBar": "⇤",
      "LeftArrowRightArrow": "⇆",
      "leftarrowtail": "↢",
      "LeftCeiling": "⌈",
      "LeftDoubleBracket": "⟦",
      "LeftDownTeeVector": "⥡",
      "LeftDownVector": "⇃",
      "LeftDownVectorBar": "⥙",
      "LeftFloor": "⌊",
      "leftharpoondown": "↽",
      "leftharpoonup": "↼",
      "leftleftarrows": "⇇",
      "LeftRightArrow": "↔",
      "Leftrightarrow": "⇔",
      "leftrightarrow": "↔",
      "leftrightarrows": "⇆",
      "leftrightharpoons": "⇋",
      "leftrightsquigarrow": "↭",
      "LeftRightVector": "⥎",
      "LeftTee": "⊣",
      "LeftTeeArrow": "↤",
      "LeftTeeVector": "⥚",
      "leftthreetimes": "⋋",
      "LeftTriangle": "⊲",
      "LeftTriangleBar": "⧏",
      "LeftTriangleEqual": "⊴",
      "LeftUpDownVector": "⥑",
      "LeftUpTeeVector": "⥠",
      "LeftUpVector": "↿",
      "LeftUpVectorBar": "⥘",
      "LeftVector": "↼",
      "LeftVectorBar": "⥒",
      "lEg": "⪋",
      "leg": "⋚",
      "leq": "≤",
      "leqq": "≦",
      "leqslant": "⩽",
      "les": "⩽",
      "lescc": "⪨",
      "lesdot": "⩿",
      "lesdoto": "⪁",
      "lesdotor": "⪃",
      "lesg": "⋚︀",
      "lesges": "⪓",
      "lessapprox": "⪅",
      "lessdot": "⋖",
      "lesseqgtr": "⋚",
      "lesseqqgtr": "⪋",
      "LessEqualGreater": "⋚",
      "LessFullEqual": "≦",
      "LessGreater": "≶",
      "lessgtr": "≶",
      "LessLess": "⪡",
      "lesssim": "≲",
      "LessSlantEqual": "⩽",
      "LessTilde": "≲",
      "lfisht": "⥼",
      "lfloor": "⌊",
      "Lfr": "𝔏",
      "lfr": "𝔩",
      "lg": "≶",
      "lgE": "⪑",
      "lHar": "⥢",
      "lhard": "↽",
      "lharu": "↼",
      "lharul": "⥪",
      "lhblk": "▄",
      "LJcy": "Љ",
      "ljcy": "љ",
      "Ll": "⋘",
      "ll": "≪",
      "llarr": "⇇",
      "llcorner": "⌞",
      "Lleftarrow": "⇚",
      "llhard": "⥫",
      "lltri": "◺",
      "Lmidot": "Ŀ",
      "lmidot": "ŀ",
      "lmoust": "⎰",
      "lmoustache": "⎰",
      "lnap": "⪉",
      "lnapprox": "⪉",
      "lnE": "≨",
      "lne": "⪇",
      "lneq": "⪇",
      "lneqq": "≨",
      "lnsim": "⋦",
      "loang": "⟬",
      "loarr": "⇽",
      "lobrk": "⟦",
      "LongLeftArrow": "⟵",
      "Longleftarrow": "⟸",
      "longleftarrow": "⟵",
      "LongLeftRightArrow": "⟷",
      "Longleftrightarrow": "⟺",
      "longleftrightarrow": "⟷",
      "longmapsto": "⟼",
      "LongRightArrow": "⟶",
      "Longrightarrow": "⟹",
      "longrightarrow": "⟶",
      "looparrowleft": "↫",
      "looparrowright": "↬",
      "lopar": "⦅",
      "Lopf": "𝕃",
      "lopf": "𝕝",
      "loplus": "⨭",
      "lotimes": "⨴",
      "lowast": "∗",
      "lowbar": "_",
      "LowerLeftArrow": "↙",
      "LowerRightArrow": "↘",
      "loz": "◊",
      "lozenge": "◊",
      "lozf": "⧫",
      "lpar": "(",
      "lparlt": "⦓",
      "lrarr": "⇆",
      "lrcorner": "⌟",
      "lrhar": "⇋",
      "lrhard": "⥭",
      "lrm": "‎",
      "lrtri": "⊿",
      "lsaquo": "‹",
      "Lscr": "ℒ",
      "lscr": "𝓁",
      "Lsh": "↰",
      "lsh": "↰",
      "lsim": "≲",
      "lsime": "⪍",
      "lsimg": "⪏",
      "lsqb": "[",
      "lsquo": "‘",
      "lsquor": "‚",
      "Lstrok": "Ł",
      "lstrok": "ł",
      "LT": "<",
      "Lt": "≪",
      "lt": "<",
      "ltcc": "⪦",
      "ltcir": "⩹",
      "ltdot": "⋖",
      "lthree": "⋋",
      "ltimes": "⋉",
      "ltlarr": "⥶",
      "ltquest": "⩻",
      "ltri": "◃",
      "ltrie": "⊴",
      "ltrif": "◂",
      "ltrPar": "⦖",
      "lurdshar": "⥊",
      "luruhar": "⥦",
      "lvertneqq": "≨︀",
      "lvnE": "≨︀",
      "macr": "¯",
      "male": "♂",
      "malt": "✠",
      "maltese": "✠",
      "Map": "⤅",
      "map": "↦",
      "mapsto": "↦",
      "mapstodown": "↧",
      "mapstoleft": "↤",
      "mapstoup": "↥",
      "marker": "▮",
      "mcomma": "⨩",
      "Mcy": "М",
      "mcy": "м",
      "mdash": "—",
      "mDDot": "∺",
      "measuredangle": "∡",
      "MediumSpace": " ",
      "Mellintrf": "ℳ",
      "Mfr": "𝔐",
      "mfr": "𝔪",
      "mho": "℧",
      "micro": "µ",
      "mid": "∣",
      "midast": "*",
      "midcir": "⫰",
      "middot": "·",
      "minus": "−",
      "minusb": "⊟",
      "minusd": "∸",
      "minusdu": "⨪",
      "MinusPlus": "∓",
      "mlcp": "⫛",
      "mldr": "…",
      "mnplus": "∓",
      "models": "⊧",
      "Mopf": "𝕄",
      "mopf": "𝕞",
      "mp": "∓",
      "Mscr": "ℳ",
      "mscr": "𝓂",
      "mstpos": "∾",
      "Mu": "Μ",
      "mu": "μ",
      "multimap": "⊸",
      "mumap": "⊸",
      "nabla": "∇",
      "Nacute": "Ń",
      "nacute": "ń",
      "nang": "∠⃒",
      "nap": "≉",
      "napE": "⩰̸",
      "napid": "≋̸",
      "napos": "ŉ",
      "napprox": "≉",
      "natur": "♮",
      "natural": "♮",
      "naturals": "ℕ",
      "nbsp": " ",
      "nbump": "≎̸",
      "nbumpe": "≏̸",
      "ncap": "⩃",
      "Ncaron": "Ň",
      "ncaron": "ň",
      "Ncedil": "Ņ",
      "ncedil": "ņ",
      "ncong": "≇",
      "ncongdot": "⩭̸",
      "ncup": "⩂",
      "Ncy": "Н",
      "ncy": "н",
      "ndash": "–",
      "ne": "≠",
      "nearhk": "⤤",
      "neArr": "⇗",
      "nearr": "↗",
      "nearrow": "↗",
      "nedot": "≐̸",
      "NegativeMediumSpace": "​",
      "NegativeThickSpace": "​",
      "NegativeThinSpace": "​",
      "NegativeVeryThinSpace": "​",
      "nequiv": "≢",
      "nesear": "⤨",
      "nesim": "≂̸",
      "NestedGreaterGreater": "≫",
      "NestedLessLess": "≪",
      "NewLine": "\n",
      "nexist": "∄",
      "nexists": "∄",
      "Nfr": "𝔑",
      "nfr": "𝔫",
      "ngE": "≧̸",
      "nge": "≱",
      "ngeq": "≱",
      "ngeqq": "≧̸",
      "ngeqslant": "⩾̸",
      "nges": "⩾̸",
      "nGg": "⋙̸",
      "ngsim": "≵",
      "nGt": "≫⃒",
      "ngt": "≯",
      "ngtr": "≯",
      "nGtv": "≫̸",
      "nhArr": "⇎",
      "nharr": "↮",
      "nhpar": "⫲",
      "ni": "∋",
      "nis": "⋼",
      "nisd": "⋺",
      "niv": "∋",
      "NJcy": "Њ",
      "njcy": "њ",
      "nlArr": "⇍",
      "nlarr": "↚",
      "nldr": "‥",
      "nlE": "≦̸",
      "nle": "≰",
      "nLeftarrow": "⇍",
      "nleftarrow": "↚",
      "nLeftrightarrow": "⇎",
      "nleftrightarrow": "↮",
      "nleq": "≰",
      "nleqq": "≦̸",
      "nleqslant": "⩽̸",
      "nles": "⩽̸",
      "nless": "≮",
      "nLl": "⋘̸",
      "nlsim": "≴",
      "nLt": "≪⃒",
      "nlt": "≮",
      "nltri": "⋪",
      "nltrie": "⋬",
      "nLtv": "≪̸",
      "nmid": "∤",
      "NoBreak": "⁠",
      "NonBreakingSpace": " ",
      "Nopf": "ℕ",
      "nopf": "𝕟",
      "Not": "⫬",
      "not": "¬",
      "NotCongruent": "≢",
      "NotCupCap": "≭",
      "NotDoubleVerticalBar": "∦",
      "NotElement": "∉",
      "NotEqual": "≠",
      "NotEqualTilde": "≂̸",
      "NotExists": "∄",
      "NotGreater": "≯",
      "NotGreaterEqual": "≱",
      "NotGreaterFullEqual": "≧̸",
      "NotGreaterGreater": "≫̸",
      "NotGreaterLess": "≹",
      "NotGreaterSlantEqual": "⩾̸",
      "NotGreaterTilde": "≵",
      "NotHumpDownHump": "≎̸",
      "NotHumpEqual": "≏̸",
      "notin": "∉",
      "notindot": "⋵̸",
      "notinE": "⋹̸",
      "notinva": "∉",
      "notinvb": "⋷",
      "notinvc": "⋶",
      "NotLeftTriangle": "⋪",
      "NotLeftTriangleBar": "⧏̸",
      "NotLeftTriangleEqual": "⋬",
      "NotLess": "≮",
      "NotLessEqual": "≰",
      "NotLessGreater": "≸",
      "NotLessLess": "≪̸",
      "NotLessSlantEqual": "⩽̸",
      "NotLessTilde": "≴",
      "NotNestedGreaterGreater": "⪢̸",
      "NotNestedLessLess": "⪡̸",
      "notni": "∌",
      "notniva": "∌",
      "notnivb": "⋾",
      "notnivc": "⋽",
      "NotPrecedes": "⊀",
      "NotPrecedesEqual": "⪯̸",
      "NotPrecedesSlantEqual": "⋠",
      "NotReverseElement": "∌",
      "NotRightTriangle": "⋫",
      "NotRightTriangleBar": "⧐̸",
      "NotRightTriangleEqual": "⋭",
      "NotSquareSubset": "⊏̸",
      "NotSquareSubsetEqual": "⋢",
      "NotSquareSuperset": "⊐̸",
      "NotSquareSupersetEqual": "⋣",
      "NotSubset": "⊂⃒",
      "NotSubsetEqual": "⊈",
      "NotSucceeds": "⊁",
      "NotSucceedsEqual": "⪰̸",
      "NotSucceedsSlantEqual": "⋡",
      "NotSucceedsTilde": "≿̸",
      "NotSuperset": "⊃⃒",
      "NotSupersetEqual": "⊉",
      "NotTilde": "≁",
      "NotTildeEqual": "≄",
      "NotTildeFullEqual": "≇",
      "NotTildeTilde": "≉",
      "NotVerticalBar": "∤",
      "npar": "∦",
      "nparallel": "∦",
      "nparsl": "⫽⃥",
      "npart": "∂̸",
      "npolint": "⨔",
      "npr": "⊀",
      "nprcue": "⋠",
      "npre": "⪯̸",
      "nprec": "⊀",
      "npreceq": "⪯̸",
      "nrArr": "⇏",
      "nrarr": "↛",
      "nrarrc": "⤳̸",
      "nrarrw": "↝̸",
      "nRightarrow": "⇏",
      "nrightarrow": "↛",
      "nrtri": "⋫",
      "nrtrie": "⋭",
      "nsc": "⊁",
      "nsccue": "⋡",
      "nsce": "⪰̸",
      "Nscr": "𝒩",
      "nscr": "𝓃",
      "nshortmid": "∤",
      "nshortparallel": "∦",
      "nsim": "≁",
      "nsime": "≄",
      "nsimeq": "≄",
      "nsmid": "∤",
      "nspar": "∦",
      "nsqsube": "⋢",
      "nsqsupe": "⋣",
      "nsub": "⊄",
      "nsubE": "⫅̸",
      "nsube": "⊈",
      "nsubset": "⊂⃒",
      "nsubseteq": "⊈",
      "nsubseteqq": "⫅̸",
      "nsucc": "⊁",
      "nsucceq": "⪰̸",
      "nsup": "⊅",
      "nsupE": "⫆̸",
      "nsupe": "⊉",
      "nsupset": "⊃⃒",
      "nsupseteq": "⊉",
      "nsupseteqq": "⫆̸",
      "ntgl": "≹",
      "Ntilde": "Ñ",
      "ntilde": "ñ",
      "ntlg": "≸",
      "ntriangleleft": "⋪",
      "ntrianglelefteq": "⋬",
      "ntriangleright": "⋫",
      "ntrianglerighteq": "⋭",
      "Nu": "Ν",
      "nu": "ν",
      "num": "#",
      "numero": "№",
      "numsp": " ",
      "nvap": "≍⃒",
      "nVDash": "⊯",
      "nVdash": "⊮",
      "nvDash": "⊭",
      "nvdash": "⊬",
      "nvge": "≥⃒",
      "nvgt": ">⃒",
      "nvHarr": "⤄",
      "nvinfin": "⧞",
      "nvlArr": "⤂",
      "nvle": "≤⃒",
      "nvlt": "<⃒",
      "nvltrie": "⊴⃒",
      "nvrArr": "⤃",
      "nvrtrie": "⊵⃒",
      "nvsim": "∼⃒",
      "nwarhk": "⤣",
      "nwArr": "⇖",
      "nwarr": "↖",
      "nwarrow": "↖",
      "nwnear": "⤧",
      "Oacute": "Ó",
      "oacute": "ó",
      "oast": "⊛",
      "ocir": "⊚",
      "Ocirc": "Ô",
      "ocirc": "ô",
      "Ocy": "О",
      "ocy": "о",
      "odash": "⊝",
      "Odblac": "Ő",
      "odblac": "ő",
      "odiv": "⨸",
      "odot": "⊙",
      "odsold": "⦼",
      "OElig": "Œ",
      "oelig": "œ",
      "ofcir": "⦿",
      "Ofr": "𝔒",
      "ofr": "𝔬",
      "ogon": "˛",
      "Ograve": "Ò",
      "ograve": "ò",
      "ogt": "⧁",
      "ohbar": "⦵",
      "ohm": "Ω",
      "oint": "∮",
      "olarr": "↺",
      "olcir": "⦾",
      "olcross": "⦻",
      "oline": "‾",
      "olt": "⧀",
      "Omacr": "Ō",
      "omacr": "ō",
      "Omega": "Ω",
      "omega": "ω",
      "Omicron": "Ο",
      "omicron": "ο",
      "omid": "⦶",
      "ominus": "⊖",
      "Oopf": "𝕆",
      "oopf": "𝕠",
      "opar": "⦷",
      "OpenCurlyDoubleQuote": "“",
      "OpenCurlyQuote": "‘",
      "operp": "⦹",
      "oplus": "⊕",
      "Or": "⩔",
      "or": "∨",
      "orarr": "↻",
      "ord": "⩝",
      "order": "ℴ",
      "orderof": "ℴ",
      "ordf": "ª",
      "ordm": "º",
      "origof": "⊶",
      "oror": "⩖",
      "orslope": "⩗",
      "orv": "⩛",
      "oS": "Ⓢ",
      "Oscr": "𝒪",
      "oscr": "ℴ",
      "Oslash": "Ø",
      "oslash": "ø",
      "osol": "⊘",
      "Otilde": "Õ",
      "otilde": "õ",
      "Otimes": "⨷",
      "otimes": "⊗",
      "otimesas": "⨶",
      "Ouml": "Ö",
      "ouml": "ö",
      "ovbar": "⌽",
      "OverBar": "‾",
      "OverBrace": "⏞",
      "OverBracket": "⎴",
      "OverParenthesis": "⏜",
      "par": "∥",
      "para": "¶",
      "parallel": "∥",
      "parsim": "⫳",
      "parsl": "⫽",
      "part": "∂",
      "PartialD": "∂",
      "Pcy": "П",
      "pcy": "п",
      "percnt": "%",
      "period": ".",
      "permil": "‰",
      "perp": "⊥",
      "pertenk": "‱",
      "Pfr": "𝔓",
      "pfr": "𝔭",
      "Phi": "Φ",
      "phi": "φ",
      "phiv": "ϕ",
      "phmmat": "ℳ",
      "phone": "☎",
      "Pi": "Π",
      "pi": "π",
      "pitchfork": "⋔",
      "piv": "ϖ",
      "planck": "ℏ",
      "planckh": "ℎ",
      "plankv": "ℏ",
      "plus": "+",
      "plusacir": "⨣",
      "plusb": "⊞",
      "pluscir": "⨢",
      "plusdo": "∔",
      "plusdu": "⨥",
      "pluse": "⩲",
      "PlusMinus": "±",
      "plusmn": "±",
      "plussim": "⨦",
      "plustwo": "⨧",
      "pm": "±",
      "Poincareplane": "ℌ",
      "pointint": "⨕",
      "Popf": "ℙ",
      "popf": "𝕡",
      "pound": "£",
      "Pr": "⪻",
      "pr": "≺",
      "prap": "⪷",
      "prcue": "≼",
      "prE": "⪳",
      "pre": "⪯",
      "prec": "≺",
      "precapprox": "⪷",
      "preccurlyeq": "≼",
      "Precedes": "≺",
      "PrecedesEqual": "⪯",
      "PrecedesSlantEqual": "≼",
      "PrecedesTilde": "≾",
      "preceq": "⪯",
      "precnapprox": "⪹",
      "precneqq": "⪵",
      "precnsim": "⋨",
      "precsim": "≾",
      "Prime": "″",
      "prime": "′",
      "primes": "ℙ",
      "prnap": "⪹",
      "prnE": "⪵",
      "prnsim": "⋨",
      "prod": "∏",
      "Product": "∏",
      "profalar": "⌮",
      "profline": "⌒",
      "profsurf": "⌓",
      "prop": "∝",
      "Proportion": "∷",
      "Proportional": "∝",
      "propto": "∝",
      "prsim": "≾",
      "prurel": "⊰",
      "Pscr": "𝒫",
      "pscr": "𝓅",
      "Psi": "Ψ",
      "psi": "ψ",
      "puncsp": " ",
      "Qfr": "𝔔",
      "qfr": "𝔮",
      "qint": "⨌",
      "Qopf": "ℚ",
      "qopf": "𝕢",
      "qprime": "⁗",
      "Qscr": "𝒬",
      "qscr": "𝓆",
      "quaternions": "ℍ",
      "quatint": "⨖",
      "quest": "?",
      "questeq": "≟",
      "QUOT": '"',
      "quot": '"',
      "rAarr": "⇛",
      "race": "∽̱",
      "Racute": "Ŕ",
      "racute": "ŕ",
      "radic": "√",
      "raemptyv": "⦳",
      "Rang": "⟫",
      "rang": "⟩",
      "rangd": "⦒",
      "range": "⦥",
      "rangle": "⟩",
      "raquo": "»",
      "Rarr": "↠",
      "rArr": "⇒",
      "rarr": "→",
      "rarrap": "⥵",
      "rarrb": "⇥",
      "rarrbfs": "⤠",
      "rarrc": "⤳",
      "rarrfs": "⤞",
      "rarrhk": "↪",
      "rarrlp": "↬",
      "rarrpl": "⥅",
      "rarrsim": "⥴",
      "Rarrtl": "⤖",
      "rarrtl": "↣",
      "rarrw": "↝",
      "rAtail": "⤜",
      "ratail": "⤚",
      "ratio": "∶",
      "rationals": "ℚ",
      "RBarr": "⤐",
      "rBarr": "⤏",
      "rbarr": "⤍",
      "rbbrk": "❳",
      "rbrace": "}",
      "rbrack": "]",
      "rbrke": "⦌",
      "rbrksld": "⦎",
      "rbrkslu": "⦐",
      "Rcaron": "Ř",
      "rcaron": "ř",
      "Rcedil": "Ŗ",
      "rcedil": "ŗ",
      "rceil": "⌉",
      "rcub": "}",
      "Rcy": "Р",
      "rcy": "р",
      "rdca": "⤷",
      "rdldhar": "⥩",
      "rdquo": "”",
      "rdquor": "”",
      "rdsh": "↳",
      "Re": "ℜ",
      "real": "ℜ",
      "realine": "ℛ",
      "realpart": "ℜ",
      "reals": "ℝ",
      "rect": "▭",
      "REG": "®",
      "reg": "®",
      "ReverseElement": "∋",
      "ReverseEquilibrium": "⇋",
      "ReverseUpEquilibrium": "⥯",
      "rfisht": "⥽",
      "rfloor": "⌋",
      "Rfr": "ℜ",
      "rfr": "𝔯",
      "rHar": "⥤",
      "rhard": "⇁",
      "rharu": "⇀",
      "rharul": "⥬",
      "Rho": "Ρ",
      "rho": "ρ",
      "rhov": "ϱ",
      "RightAngleBracket": "⟩",
      "RightArrow": "→",
      "Rightarrow": "⇒",
      "rightarrow": "→",
      "RightArrowBar": "⇥",
      "RightArrowLeftArrow": "⇄",
      "rightarrowtail": "↣",
      "RightCeiling": "⌉",
      "RightDoubleBracket": "⟧",
      "RightDownTeeVector": "⥝",
      "RightDownVector": "⇂",
      "RightDownVectorBar": "⥕",
      "RightFloor": "⌋",
      "rightharpoondown": "⇁",
      "rightharpoonup": "⇀",
      "rightleftarrows": "⇄",
      "rightleftharpoons": "⇌",
      "rightrightarrows": "⇉",
      "rightsquigarrow": "↝",
      "RightTee": "⊢",
      "RightTeeArrow": "↦",
      "RightTeeVector": "⥛",
      "rightthreetimes": "⋌",
      "RightTriangle": "⊳",
      "RightTriangleBar": "⧐",
      "RightTriangleEqual": "⊵",
      "RightUpDownVector": "⥏",
      "RightUpTeeVector": "⥜",
      "RightUpVector": "↾",
      "RightUpVectorBar": "⥔",
      "RightVector": "⇀",
      "RightVectorBar": "⥓",
      "ring": "˚",
      "risingdotseq": "≓",
      "rlarr": "⇄",
      "rlhar": "⇌",
      "rlm": "‏",
      "rmoust": "⎱",
      "rmoustache": "⎱",
      "rnmid": "⫮",
      "roang": "⟭",
      "roarr": "⇾",
      "robrk": "⟧",
      "ropar": "⦆",
      "Ropf": "ℝ",
      "ropf": "𝕣",
      "roplus": "⨮",
      "rotimes": "⨵",
      "RoundImplies": "⥰",
      "rpar": ")",
      "rpargt": "⦔",
      "rppolint": "⨒",
      "rrarr": "⇉",
      "Rrightarrow": "⇛",
      "rsaquo": "›",
      "Rscr": "ℛ",
      "rscr": "𝓇",
      "Rsh": "↱",
      "rsh": "↱",
      "rsqb": "]",
      "rsquo": "’",
      "rsquor": "’",
      "rthree": "⋌",
      "rtimes": "⋊",
      "rtri": "▹",
      "rtrie": "⊵",
      "rtrif": "▸",
      "rtriltri": "⧎",
      "RuleDelayed": "⧴",
      "ruluhar": "⥨",
      "rx": "℞",
      "Sacute": "Ś",
      "sacute": "ś",
      "sbquo": "‚",
      "Sc": "⪼",
      "sc": "≻",
      "scap": "⪸",
      "Scaron": "Š",
      "scaron": "š",
      "sccue": "≽",
      "scE": "⪴",
      "sce": "⪰",
      "Scedil": "Ş",
      "scedil": "ş",
      "Scirc": "Ŝ",
      "scirc": "ŝ",
      "scnap": "⪺",
      "scnE": "⪶",
      "scnsim": "⋩",
      "scpolint": "⨓",
      "scsim": "≿",
      "Scy": "С",
      "scy": "с",
      "sdot": "⋅",
      "sdotb": "⊡",
      "sdote": "⩦",
      "searhk": "⤥",
      "seArr": "⇘",
      "searr": "↘",
      "searrow": "↘",
      "sect": "§",
      "semi": ";",
      "seswar": "⤩",
      "setminus": "∖",
      "setmn": "∖",
      "sext": "✶",
      "Sfr": "𝔖",
      "sfr": "𝔰",
      "sfrown": "⌢",
      "sharp": "♯",
      "SHCHcy": "Щ",
      "shchcy": "щ",
      "SHcy": "Ш",
      "shcy": "ш",
      "ShortDownArrow": "↓",
      "ShortLeftArrow": "←",
      "shortmid": "∣",
      "shortparallel": "∥",
      "ShortRightArrow": "→",
      "ShortUpArrow": "↑",
      "shy": "­",
      "Sigma": "Σ",
      "sigma": "σ",
      "sigmaf": "ς",
      "sigmav": "ς",
      "sim": "∼",
      "simdot": "⩪",
      "sime": "≃",
      "simeq": "≃",
      "simg": "⪞",
      "simgE": "⪠",
      "siml": "⪝",
      "simlE": "⪟",
      "simne": "≆",
      "simplus": "⨤",
      "simrarr": "⥲",
      "slarr": "←",
      "SmallCircle": "∘",
      "smallsetminus": "∖",
      "smashp": "⨳",
      "smeparsl": "⧤",
      "smid": "∣",
      "smile": "⌣",
      "smt": "⪪",
      "smte": "⪬",
      "smtes": "⪬︀",
      "SOFTcy": "Ь",
      "softcy": "ь",
      "sol": "/",
      "solb": "⧄",
      "solbar": "⌿",
      "Sopf": "𝕊",
      "sopf": "𝕤",
      "spades": "♠",
      "spadesuit": "♠",
      "spar": "∥",
      "sqcap": "⊓",
      "sqcaps": "⊓︀",
      "sqcup": "⊔",
      "sqcups": "⊔︀",
      "Sqrt": "√",
      "sqsub": "⊏",
      "sqsube": "⊑",
      "sqsubset": "⊏",
      "sqsubseteq": "⊑",
      "sqsup": "⊐",
      "sqsupe": "⊒",
      "sqsupset": "⊐",
      "sqsupseteq": "⊒",
      "squ": "□",
      "Square": "□",
      "square": "□",
      "SquareIntersection": "⊓",
      "SquareSubset": "⊏",
      "SquareSubsetEqual": "⊑",
      "SquareSuperset": "⊐",
      "SquareSupersetEqual": "⊒",
      "SquareUnion": "⊔",
      "squarf": "▪",
      "squf": "▪",
      "srarr": "→",
      "Sscr": "𝒮",
      "sscr": "𝓈",
      "ssetmn": "∖",
      "ssmile": "⌣",
      "sstarf": "⋆",
      "Star": "⋆",
      "star": "☆",
      "starf": "★",
      "straightepsilon": "ϵ",
      "straightphi": "ϕ",
      "strns": "¯",
      "Sub": "⋐",
      "sub": "⊂",
      "subdot": "⪽",
      "subE": "⫅",
      "sube": "⊆",
      "subedot": "⫃",
      "submult": "⫁",
      "subnE": "⫋",
      "subne": "⊊",
      "subplus": "⪿",
      "subrarr": "⥹",
      "Subset": "⋐",
      "subset": "⊂",
      "subseteq": "⊆",
      "subseteqq": "⫅",
      "SubsetEqual": "⊆",
      "subsetneq": "⊊",
      "subsetneqq": "⫋",
      "subsim": "⫇",
      "subsub": "⫕",
      "subsup": "⫓",
      "succ": "≻",
      "succapprox": "⪸",
      "succcurlyeq": "≽",
      "Succeeds": "≻",
      "SucceedsEqual": "⪰",
      "SucceedsSlantEqual": "≽",
      "SucceedsTilde": "≿",
      "succeq": "⪰",
      "succnapprox": "⪺",
      "succneqq": "⪶",
      "succnsim": "⋩",
      "succsim": "≿",
      "SuchThat": "∋",
      "Sum": "∑",
      "sum": "∑",
      "sung": "♪",
      "Sup": "⋑",
      "sup": "⊃",
      "sup1": "¹",
      "sup2": "²",
      "sup3": "³",
      "supdot": "⪾",
      "supdsub": "⫘",
      "supE": "⫆",
      "supe": "⊇",
      "supedot": "⫄",
      "Superset": "⊃",
      "SupersetEqual": "⊇",
      "suphsol": "⟉",
      "suphsub": "⫗",
      "suplarr": "⥻",
      "supmult": "⫂",
      "supnE": "⫌",
      "supne": "⊋",
      "supplus": "⫀",
      "Supset": "⋑",
      "supset": "⊃",
      "supseteq": "⊇",
      "supseteqq": "⫆",
      "supsetneq": "⊋",
      "supsetneqq": "⫌",
      "supsim": "⫈",
      "supsub": "⫔",
      "supsup": "⫖",
      "swarhk": "⤦",
      "swArr": "⇙",
      "swarr": "↙",
      "swarrow": "↙",
      "swnwar": "⤪",
      "szlig": "ß",
      "Tab": "	",
      "target": "⌖",
      "Tau": "Τ",
      "tau": "τ",
      "tbrk": "⎴",
      "Tcaron": "Ť",
      "tcaron": "ť",
      "Tcedil": "Ţ",
      "tcedil": "ţ",
      "Tcy": "Т",
      "tcy": "т",
      "tdot": "⃛",
      "telrec": "⌕",
      "Tfr": "𝔗",
      "tfr": "𝔱",
      "there4": "∴",
      "Therefore": "∴",
      "therefore": "∴",
      "Theta": "Θ",
      "theta": "θ",
      "thetasym": "ϑ",
      "thetav": "ϑ",
      "thickapprox": "≈",
      "thicksim": "∼",
      "ThickSpace": "  ",
      "thinsp": " ",
      "ThinSpace": " ",
      "thkap": "≈",
      "thksim": "∼",
      "THORN": "Þ",
      "thorn": "þ",
      "Tilde": "∼",
      "tilde": "˜",
      "TildeEqual": "≃",
      "TildeFullEqual": "≅",
      "TildeTilde": "≈",
      "times": "×",
      "timesb": "⊠",
      "timesbar": "⨱",
      "timesd": "⨰",
      "tint": "∭",
      "toea": "⤨",
      "top": "⊤",
      "topbot": "⌶",
      "topcir": "⫱",
      "Topf": "𝕋",
      "topf": "𝕥",
      "topfork": "⫚",
      "tosa": "⤩",
      "tprime": "‴",
      "TRADE": "™",
      "trade": "™",
      "triangle": "▵",
      "triangledown": "▿",
      "triangleleft": "◃",
      "trianglelefteq": "⊴",
      "triangleq": "≜",
      "triangleright": "▹",
      "trianglerighteq": "⊵",
      "tridot": "◬",
      "trie": "≜",
      "triminus": "⨺",
      "TripleDot": "⃛",
      "triplus": "⨹",
      "trisb": "⧍",
      "tritime": "⨻",
      "trpezium": "⏢",
      "Tscr": "𝒯",
      "tscr": "𝓉",
      "TScy": "Ц",
      "tscy": "ц",
      "TSHcy": "Ћ",
      "tshcy": "ћ",
      "Tstrok": "Ŧ",
      "tstrok": "ŧ",
      "twixt": "≬",
      "twoheadleftarrow": "↞",
      "twoheadrightarrow": "↠",
      "Uacute": "Ú",
      "uacute": "ú",
      "Uarr": "↟",
      "uArr": "⇑",
      "uarr": "↑",
      "Uarrocir": "⥉",
      "Ubrcy": "Ў",
      "ubrcy": "ў",
      "Ubreve": "Ŭ",
      "ubreve": "ŭ",
      "Ucirc": "Û",
      "ucirc": "û",
      "Ucy": "У",
      "ucy": "у",
      "udarr": "⇅",
      "Udblac": "Ű",
      "udblac": "ű",
      "udhar": "⥮",
      "ufisht": "⥾",
      "Ufr": "𝔘",
      "ufr": "𝔲",
      "Ugrave": "Ù",
      "ugrave": "ù",
      "uHar": "⥣",
      "uharl": "↿",
      "uharr": "↾",
      "uhblk": "▀",
      "ulcorn": "⌜",
      "ulcorner": "⌜",
      "ulcrop": "⌏",
      "ultri": "◸",
      "Umacr": "Ū",
      "umacr": "ū",
      "uml": "¨",
      "UnderBar": "_",
      "UnderBrace": "⏟",
      "UnderBracket": "⎵",
      "UnderParenthesis": "⏝",
      "Union": "⋃",
      "UnionPlus": "⊎",
      "Uogon": "Ų",
      "uogon": "ų",
      "Uopf": "𝕌",
      "uopf": "𝕦",
      "UpArrow": "↑",
      "Uparrow": "⇑",
      "uparrow": "↑",
      "UpArrowBar": "⤒",
      "UpArrowDownArrow": "⇅",
      "UpDownArrow": "↕",
      "Updownarrow": "⇕",
      "updownarrow": "↕",
      "UpEquilibrium": "⥮",
      "upharpoonleft": "↿",
      "upharpoonright": "↾",
      "uplus": "⊎",
      "UpperLeftArrow": "↖",
      "UpperRightArrow": "↗",
      "Upsi": "ϒ",
      "upsi": "υ",
      "upsih": "ϒ",
      "Upsilon": "Υ",
      "upsilon": "υ",
      "UpTee": "⊥",
      "UpTeeArrow": "↥",
      "upuparrows": "⇈",
      "urcorn": "⌝",
      "urcorner": "⌝",
      "urcrop": "⌎",
      "Uring": "Ů",
      "uring": "ů",
      "urtri": "◹",
      "Uscr": "𝒰",
      "uscr": "𝓊",
      "utdot": "⋰",
      "Utilde": "Ũ",
      "utilde": "ũ",
      "utri": "▵",
      "utrif": "▴",
      "uuarr": "⇈",
      "Uuml": "Ü",
      "uuml": "ü",
      "uwangle": "⦧",
      "vangrt": "⦜",
      "varepsilon": "ϵ",
      "varkappa": "ϰ",
      "varnothing": "∅",
      "varphi": "ϕ",
      "varpi": "ϖ",
      "varpropto": "∝",
      "vArr": "⇕",
      "varr": "↕",
      "varrho": "ϱ",
      "varsigma": "ς",
      "varsubsetneq": "⊊︀",
      "varsubsetneqq": "⫋︀",
      "varsupsetneq": "⊋︀",
      "varsupsetneqq": "⫌︀",
      "vartheta": "ϑ",
      "vartriangleleft": "⊲",
      "vartriangleright": "⊳",
      "Vbar": "⫫",
      "vBar": "⫨",
      "vBarv": "⫩",
      "Vcy": "В",
      "vcy": "в",
      "VDash": "⊫",
      "Vdash": "⊩",
      "vDash": "⊨",
      "vdash": "⊢",
      "Vdashl": "⫦",
      "Vee": "⋁",
      "vee": "∨",
      "veebar": "⊻",
      "veeeq": "≚",
      "vellip": "⋮",
      "Verbar": "‖",
      "verbar": "|",
      "Vert": "‖",
      "vert": "|",
      "VerticalBar": "∣",
      "VerticalLine": "|",
      "VerticalSeparator": "❘",
      "VerticalTilde": "≀",
      "VeryThinSpace": " ",
      "Vfr": "𝔙",
      "vfr": "𝔳",
      "vltri": "⊲",
      "vnsub": "⊂⃒",
      "vnsup": "⊃⃒",
      "Vopf": "𝕍",
      "vopf": "𝕧",
      "vprop": "∝",
      "vrtri": "⊳",
      "Vscr": "𝒱",
      "vscr": "𝓋",
      "vsubnE": "⫋︀",
      "vsubne": "⊊︀",
      "vsupnE": "⫌︀",
      "vsupne": "⊋︀",
      "Vvdash": "⊪",
      "vzigzag": "⦚",
      "Wcirc": "Ŵ",
      "wcirc": "ŵ",
      "wedbar": "⩟",
      "Wedge": "⋀",
      "wedge": "∧",
      "wedgeq": "≙",
      "weierp": "℘",
      "Wfr": "𝔚",
      "wfr": "𝔴",
      "Wopf": "𝕎",
      "wopf": "𝕨",
      "wp": "℘",
      "wr": "≀",
      "wreath": "≀",
      "Wscr": "𝒲",
      "wscr": "𝓌",
      "xcap": "⋂",
      "xcirc": "◯",
      "xcup": "⋃",
      "xdtri": "▽",
      "Xfr": "𝔛",
      "xfr": "𝔵",
      "xhArr": "⟺",
      "xharr": "⟷",
      "Xi": "Ξ",
      "xi": "ξ",
      "xlArr": "⟸",
      "xlarr": "⟵",
      "xmap": "⟼",
      "xnis": "⋻",
      "xodot": "⨀",
      "Xopf": "𝕏",
      "xopf": "𝕩",
      "xoplus": "⨁",
      "xotime": "⨂",
      "xrArr": "⟹",
      "xrarr": "⟶",
      "Xscr": "𝒳",
      "xscr": "𝓍",
      "xsqcup": "⨆",
      "xuplus": "⨄",
      "xutri": "△",
      "xvee": "⋁",
      "xwedge": "⋀",
      "Yacute": "Ý",
      "yacute": "ý",
      "YAcy": "Я",
      "yacy": "я",
      "Ycirc": "Ŷ",
      "ycirc": "ŷ",
      "Ycy": "Ы",
      "ycy": "ы",
      "yen": "¥",
      "Yfr": "𝔜",
      "yfr": "𝔶",
      "YIcy": "Ї",
      "yicy": "ї",
      "Yopf": "𝕐",
      "yopf": "𝕪",
      "Yscr": "𝒴",
      "yscr": "𝓎",
      "YUcy": "Ю",
      "yucy": "ю",
      "Yuml": "Ÿ",
      "yuml": "ÿ",
      "Zacute": "Ź",
      "zacute": "ź",
      "Zcaron": "Ž",
      "zcaron": "ž",
      "Zcy": "З",
      "zcy": "з",
      "Zdot": "Ż",
      "zdot": "ż",
      "zeetrf": "ℨ",
      "ZeroWidthSpace": "​",
      "Zeta": "Ζ",
      "zeta": "ζ",
      "Zfr": "ℨ",
      "zfr": "𝔷",
      "ZHcy": "Ж",
      "zhcy": "ж",
      "zigrarr": "⇝",
      "Zopf": "ℤ",
      "zopf": "𝕫",
      "Zscr": "𝒵",
      "zscr": "𝓏",
      "zwj": "‍",
      "zwnj": "‌"
    };
    var hasOwn = Object.prototype.hasOwnProperty;
    function has(object, key) {
      return object ? hasOwn.call(object, key) : false;
    }
    function decodeEntity(name3) {
      if (has(entities, name3)) {
        return entities[name3];
      } else {
        return name3;
      }
    }
    var hasOwn$1 = Object.prototype.hasOwnProperty;
    function has$1(object, key) {
      return object ? hasOwn$1.call(object, key) : false;
    }
    function assign(obj) {
      var sources = [].slice.call(arguments, 1);
      sources.forEach(function(source) {
        if (!source) {
          return;
        }
        if (typeof source !== "object") {
          throw new TypeError(source + "must be object");
        }
        Object.keys(source).forEach(function(key) {
          obj[key] = source[key];
        });
      });
      return obj;
    }
    var UNESCAPE_MD_RE = /\\([\\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g;
    function unescapeMd(str2) {
      if (str2.indexOf("\\") < 0) {
        return str2;
      }
      return str2.replace(UNESCAPE_MD_RE, "$1");
    }
    function isValidEntityCode(c) {
      if (c >= 55296 && c <= 57343) {
        return false;
      }
      if (c >= 64976 && c <= 65007) {
        return false;
      }
      if ((c & 65535) === 65535 || (c & 65535) === 65534) {
        return false;
      }
      if (c >= 0 && c <= 8) {
        return false;
      }
      if (c === 11) {
        return false;
      }
      if (c >= 14 && c <= 31) {
        return false;
      }
      if (c >= 127 && c <= 159) {
        return false;
      }
      if (c > 1114111) {
        return false;
      }
      return true;
    }
    function fromCodePoint(c) {
      if (c > 65535) {
        c -= 65536;
        var surrogate1 = 55296 + (c >> 10), surrogate2 = 56320 + (c & 1023);
        return String.fromCharCode(surrogate1, surrogate2);
      }
      return String.fromCharCode(c);
    }
    var NAMED_ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;
    var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;
    function replaceEntityPattern(match, name3) {
      var code2 = 0;
      var decoded = decodeEntity(name3);
      if (name3 !== decoded) {
        return decoded;
      } else if (name3.charCodeAt(0) === 35 && DIGITAL_ENTITY_TEST_RE.test(name3)) {
        code2 = name3[1].toLowerCase() === "x" ? parseInt(name3.slice(2), 16) : parseInt(name3.slice(1), 10);
        if (isValidEntityCode(code2)) {
          return fromCodePoint(code2);
        }
      }
      return match;
    }
    function replaceEntities(str2) {
      if (str2.indexOf("&") < 0) {
        return str2;
      }
      return str2.replace(NAMED_ENTITY_RE, replaceEntityPattern);
    }
    var HTML_ESCAPE_TEST_RE = /[&<>"]/;
    var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
    var HTML_REPLACEMENTS = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;"
    };
    function replaceUnsafeChar(ch) {
      return HTML_REPLACEMENTS[ch];
    }
    function escapeHtml(str2) {
      if (HTML_ESCAPE_TEST_RE.test(str2)) {
        return str2.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
      }
      return str2;
    }
    var rules = {};
    rules.blockquote_open = function() {
      return "<blockquote>\n";
    };
    rules.blockquote_close = function(tokens, idx) {
      return "</blockquote>" + getBreak(tokens, idx);
    };
    rules.code = function(tokens, idx) {
      if (tokens[idx].block) {
        return "<pre><code>" + escapeHtml(tokens[idx].content) + "</code></pre>" + getBreak(tokens, idx);
      }
      return "<code>" + escapeHtml(tokens[idx].content) + "</code>";
    };
    rules.fence = function(tokens, idx, options, env, instance) {
      var token = tokens[idx];
      var langClass = "";
      var langPrefix = options.langPrefix;
      var langName = "", fences2, fenceName;
      var highlighted;
      if (token.params) {
        fences2 = token.params.split(/\s+/g);
        fenceName = fences2.join(" ");
        if (has$1(instance.rules.fence_custom, fences2[0])) {
          return instance.rules.fence_custom[fences2[0]](tokens, idx, options, env, instance);
        }
        langName = escapeHtml(replaceEntities(unescapeMd(fenceName)));
        langClass = ' class="' + langPrefix + langName + '"';
      }
      if (options.highlight) {
        highlighted = options.highlight.apply(options.highlight, [token.content].concat(fences2)) || escapeHtml(token.content);
      } else {
        highlighted = escapeHtml(token.content);
      }
      return "<pre><code" + langClass + ">" + highlighted + "</code></pre>" + getBreak(tokens, idx);
    };
    rules.fence_custom = {};
    rules.heading_open = function(tokens, idx) {
      return "<h" + tokens[idx].hLevel + ">";
    };
    rules.heading_close = function(tokens, idx) {
      return "</h" + tokens[idx].hLevel + ">\n";
    };
    rules.hr = function(tokens, idx, options) {
      return (options.xhtmlOut ? "<hr />" : "<hr>") + getBreak(tokens, idx);
    };
    rules.bullet_list_open = function() {
      return "<ul>\n";
    };
    rules.bullet_list_close = function(tokens, idx) {
      return "</ul>" + getBreak(tokens, idx);
    };
    rules.list_item_open = function() {
      return "<li>";
    };
    rules.list_item_close = function() {
      return "</li>\n";
    };
    rules.ordered_list_open = function(tokens, idx) {
      var token = tokens[idx];
      var order = token.order > 1 ? ' start="' + token.order + '"' : "";
      return "<ol" + order + ">\n";
    };
    rules.ordered_list_close = function(tokens, idx) {
      return "</ol>" + getBreak(tokens, idx);
    };
    rules.paragraph_open = function(tokens, idx) {
      return tokens[idx].tight ? "" : "<p>";
    };
    rules.paragraph_close = function(tokens, idx) {
      var addBreak = !(tokens[idx].tight && idx && tokens[idx - 1].type === "inline" && !tokens[idx - 1].content);
      return (tokens[idx].tight ? "" : "</p>") + (addBreak ? getBreak(tokens, idx) : "");
    };
    rules.link_open = function(tokens, idx, options) {
      var title = tokens[idx].title ? ' title="' + escapeHtml(replaceEntities(tokens[idx].title)) + '"' : "";
      var target = options.linkTarget ? ' target="' + options.linkTarget + '"' : "";
      return '<a href="' + escapeHtml(tokens[idx].href) + '"' + title + target + ">";
    };
    rules.link_close = function() {
      return "</a>";
    };
    rules.image = function(tokens, idx, options) {
      var src = ' src="' + escapeHtml(tokens[idx].src) + '"';
      var title = tokens[idx].title ? ' title="' + escapeHtml(replaceEntities(tokens[idx].title)) + '"' : "";
      var alt = ' alt="' + (tokens[idx].alt ? escapeHtml(replaceEntities(unescapeMd(tokens[idx].alt))) : "") + '"';
      var suffix = options.xhtmlOut ? " /" : "";
      return "<img" + src + alt + title + suffix + ">";
    };
    rules.table_open = function() {
      return "<table>\n";
    };
    rules.table_close = function() {
      return "</table>\n";
    };
    rules.thead_open = function() {
      return "<thead>\n";
    };
    rules.thead_close = function() {
      return "</thead>\n";
    };
    rules.tbody_open = function() {
      return "<tbody>\n";
    };
    rules.tbody_close = function() {
      return "</tbody>\n";
    };
    rules.tr_open = function() {
      return "<tr>";
    };
    rules.tr_close = function() {
      return "</tr>\n";
    };
    rules.th_open = function(tokens, idx) {
      var token = tokens[idx];
      return "<th" + (token.align ? ' style="text-align:' + token.align + '"' : "") + ">";
    };
    rules.th_close = function() {
      return "</th>";
    };
    rules.td_open = function(tokens, idx) {
      var token = tokens[idx];
      return "<td" + (token.align ? ' style="text-align:' + token.align + '"' : "") + ">";
    };
    rules.td_close = function() {
      return "</td>";
    };
    rules.strong_open = function() {
      return "<strong>";
    };
    rules.strong_close = function() {
      return "</strong>";
    };
    rules.em_open = function() {
      return "<em>";
    };
    rules.em_close = function() {
      return "</em>";
    };
    rules.del_open = function() {
      return "<del>";
    };
    rules.del_close = function() {
      return "</del>";
    };
    rules.ins_open = function() {
      return "<ins>";
    };
    rules.ins_close = function() {
      return "</ins>";
    };
    rules.mark_open = function() {
      return "<mark>";
    };
    rules.mark_close = function() {
      return "</mark>";
    };
    rules.sub = function(tokens, idx) {
      return "<sub>" + escapeHtml(tokens[idx].content) + "</sub>";
    };
    rules.sup = function(tokens, idx) {
      return "<sup>" + escapeHtml(tokens[idx].content) + "</sup>";
    };
    rules.hardbreak = function(tokens, idx, options) {
      return options.xhtmlOut ? "<br />\n" : "<br>\n";
    };
    rules.softbreak = function(tokens, idx, options) {
      return options.breaks ? options.xhtmlOut ? "<br />\n" : "<br>\n" : "\n";
    };
    rules.text = function(tokens, idx) {
      return escapeHtml(tokens[idx].content);
    };
    rules.htmlblock = function(tokens, idx) {
      return tokens[idx].content;
    };
    rules.htmltag = function(tokens, idx) {
      return tokens[idx].content;
    };
    rules.abbr_open = function(tokens, idx) {
      return '<abbr title="' + escapeHtml(replaceEntities(tokens[idx].title)) + '">';
    };
    rules.abbr_close = function() {
      return "</abbr>";
    };
    rules.footnote_ref = function(tokens, idx) {
      var n = Number(tokens[idx].id + 1).toString();
      var id2 = "fnref" + n;
      if (tokens[idx].subId > 0) {
        id2 += ":" + tokens[idx].subId;
      }
      return '<sup class="footnote-ref"><a href="#fn' + n + '" id="' + id2 + '">[' + n + "]</a></sup>";
    };
    rules.footnote_block_open = function(tokens, idx, options) {
      var hr2 = options.xhtmlOut ? '<hr class="footnotes-sep" />\n' : '<hr class="footnotes-sep">\n';
      return hr2 + '<section class="footnotes">\n<ol class="footnotes-list">\n';
    };
    rules.footnote_block_close = function() {
      return "</ol>\n</section>\n";
    };
    rules.footnote_open = function(tokens, idx) {
      var id2 = Number(tokens[idx].id + 1).toString();
      return '<li id="fn' + id2 + '"  class="footnote-item">';
    };
    rules.footnote_close = function() {
      return "</li>\n";
    };
    rules.footnote_anchor = function(tokens, idx) {
      var n = Number(tokens[idx].id + 1).toString();
      var id2 = "fnref" + n;
      if (tokens[idx].subId > 0) {
        id2 += ":" + tokens[idx].subId;
      }
      return ' <a href="#' + id2 + '" class="footnote-backref">↩</a>';
    };
    rules.dl_open = function() {
      return "<dl>\n";
    };
    rules.dt_open = function() {
      return "<dt>";
    };
    rules.dd_open = function() {
      return "<dd>";
    };
    rules.dl_close = function() {
      return "</dl>\n";
    };
    rules.dt_close = function() {
      return "</dt>\n";
    };
    rules.dd_close = function() {
      return "</dd>\n";
    };
    function nextToken(tokens, idx) {
      if (++idx >= tokens.length - 2) {
        return idx;
      }
      if (tokens[idx].type === "paragraph_open" && tokens[idx].tight && tokens[idx + 1].type === "inline" && tokens[idx + 1].content.length === 0 && tokens[idx + 2].type === "paragraph_close" && tokens[idx + 2].tight) {
        return nextToken(tokens, idx + 2);
      }
      return idx;
    }
    var getBreak = rules.getBreak = function getBreak2(tokens, idx) {
      idx = nextToken(tokens, idx);
      if (idx < tokens.length && tokens[idx].type === "list_item_close") {
        return "";
      }
      return "\n";
    };
    function Renderer() {
      this.rules = assign({}, rules);
      this.getBreak = rules.getBreak;
    }
    Renderer.prototype.renderInline = function(tokens, options, env) {
      var _rules2 = this.rules;
      var len = tokens.length, i2 = 0;
      var result = "";
      while (len--) {
        result += _rules2[tokens[i2].type](tokens, i2++, options, env, this);
      }
      return result;
    };
    Renderer.prototype.render = function(tokens, options, env) {
      var _rules2 = this.rules;
      var len = tokens.length, i2 = -1;
      var result = "";
      while (++i2 < len) {
        if (tokens[i2].type === "inline") {
          result += this.renderInline(tokens[i2].children, options, env);
        } else {
          result += _rules2[tokens[i2].type](tokens, i2, options, env, this);
        }
      }
      return result;
    };
    function Ruler() {
      this.__rules__ = [];
      this.__cache__ = null;
    }
    Ruler.prototype.__find__ = function(name3) {
      var len = this.__rules__.length;
      var i2 = -1;
      while (len--) {
        if (this.__rules__[++i2].name === name3) {
          return i2;
        }
      }
      return -1;
    };
    Ruler.prototype.__compile__ = function() {
      var self2 = this;
      var chains = [""];
      self2.__rules__.forEach(function(rule) {
        if (!rule.enabled) {
          return;
        }
        rule.alt.forEach(function(altName) {
          if (chains.indexOf(altName) < 0) {
            chains.push(altName);
          }
        });
      });
      self2.__cache__ = {};
      chains.forEach(function(chain) {
        self2.__cache__[chain] = [];
        self2.__rules__.forEach(function(rule) {
          if (!rule.enabled) {
            return;
          }
          if (chain && rule.alt.indexOf(chain) < 0) {
            return;
          }
          self2.__cache__[chain].push(rule.fn);
        });
      });
    };
    Ruler.prototype.at = function(name3, fn, options) {
      var idx = this.__find__(name3);
      var opt = options || {};
      if (idx === -1) {
        throw new Error("Parser rule not found: " + name3);
      }
      this.__rules__[idx].fn = fn;
      this.__rules__[idx].alt = opt.alt || [];
      this.__cache__ = null;
    };
    Ruler.prototype.before = function(beforeName, ruleName, fn, options) {
      var idx = this.__find__(beforeName);
      var opt = options || {};
      if (idx === -1) {
        throw new Error("Parser rule not found: " + beforeName);
      }
      this.__rules__.splice(idx, 0, {
        name: ruleName,
        enabled: true,
        fn,
        alt: opt.alt || []
      });
      this.__cache__ = null;
    };
    Ruler.prototype.after = function(afterName, ruleName, fn, options) {
      var idx = this.__find__(afterName);
      var opt = options || {};
      if (idx === -1) {
        throw new Error("Parser rule not found: " + afterName);
      }
      this.__rules__.splice(idx + 1, 0, {
        name: ruleName,
        enabled: true,
        fn,
        alt: opt.alt || []
      });
      this.__cache__ = null;
    };
    Ruler.prototype.push = function(ruleName, fn, options) {
      var opt = options || {};
      this.__rules__.push({
        name: ruleName,
        enabled: true,
        fn,
        alt: opt.alt || []
      });
      this.__cache__ = null;
    };
    Ruler.prototype.enable = function(list2, strict) {
      list2 = !Array.isArray(list2) ? [list2] : list2;
      if (strict) {
        this.__rules__.forEach(function(rule) {
          rule.enabled = false;
        });
      }
      list2.forEach(function(name3) {
        var idx = this.__find__(name3);
        if (idx < 0) {
          throw new Error("Rules manager: invalid rule name " + name3);
        }
        this.__rules__[idx].enabled = true;
      }, this);
      this.__cache__ = null;
    };
    Ruler.prototype.disable = function(list2) {
      list2 = !Array.isArray(list2) ? [list2] : list2;
      list2.forEach(function(name3) {
        var idx = this.__find__(name3);
        if (idx < 0) {
          throw new Error("Rules manager: invalid rule name " + name3);
        }
        this.__rules__[idx].enabled = false;
      }, this);
      this.__cache__ = null;
    };
    Ruler.prototype.getRules = function(chainName) {
      if (this.__cache__ === null) {
        this.__compile__();
      }
      return this.__cache__[chainName] || [];
    };
    function block(state) {
      if (state.inlineMode) {
        state.tokens.push({
          type: "inline",
          content: state.src.replace(/\n/g, " ").trim(),
          level: 0,
          lines: [0, 1],
          children: []
        });
      } else {
        state.block.parse(state.src, state.options, state.env, state.tokens);
      }
    }
    function StateInline(src, parserInline, options, env, outTokens) {
      this.src = src;
      this.env = env;
      this.options = options;
      this.parser = parserInline;
      this.tokens = outTokens;
      this.pos = 0;
      this.posMax = this.src.length;
      this.level = 0;
      this.pending = "";
      this.pendingLevel = 0;
      this.cache = [];
      this.isInLabel = false;
      this.linkLevel = 0;
      this.linkContent = "";
      this.labelUnmatchedScopes = 0;
    }
    StateInline.prototype.pushPending = function() {
      this.tokens.push({
        type: "text",
        content: this.pending,
        level: this.pendingLevel
      });
      this.pending = "";
    };
    StateInline.prototype.push = function(token) {
      if (this.pending) {
        this.pushPending();
      }
      this.tokens.push(token);
      this.pendingLevel = this.level;
    };
    StateInline.prototype.cacheSet = function(key, val) {
      for (var i2 = this.cache.length; i2 <= key; i2++) {
        this.cache.push(0);
      }
      this.cache[key] = val;
    };
    StateInline.prototype.cacheGet = function(key) {
      return key < this.cache.length ? this.cache[key] : 0;
    };
    function parseLinkLabel(state, start2) {
      var level, found, marker, labelEnd = -1, max2 = state.posMax, oldPos = state.pos, oldFlag = state.isInLabel;
      if (state.isInLabel) {
        return -1;
      }
      if (state.labelUnmatchedScopes) {
        state.labelUnmatchedScopes--;
        return -1;
      }
      state.pos = start2 + 1;
      state.isInLabel = true;
      level = 1;
      while (state.pos < max2) {
        marker = state.src.charCodeAt(state.pos);
        if (marker === 91) {
          level++;
        } else if (marker === 93) {
          level--;
          if (level === 0) {
            found = true;
            break;
          }
        }
        state.parser.skipToken(state);
      }
      if (found) {
        labelEnd = state.pos;
        state.labelUnmatchedScopes = 0;
      } else {
        state.labelUnmatchedScopes = level - 1;
      }
      state.pos = oldPos;
      state.isInLabel = oldFlag;
      return labelEnd;
    }
    function parseAbbr(str2, parserInline, options, env) {
      var state, labelEnd, pos, max2, label, title;
      if (str2.charCodeAt(0) !== 42) {
        return -1;
      }
      if (str2.charCodeAt(1) !== 91) {
        return -1;
      }
      if (str2.indexOf("]:") === -1) {
        return -1;
      }
      state = new StateInline(str2, parserInline, options, env, []);
      labelEnd = parseLinkLabel(state, 1);
      if (labelEnd < 0 || str2.charCodeAt(labelEnd + 1) !== 58) {
        return -1;
      }
      max2 = state.posMax;
      for (pos = labelEnd + 2; pos < max2; pos++) {
        if (state.src.charCodeAt(pos) === 10) {
          break;
        }
      }
      label = str2.slice(2, labelEnd);
      title = str2.slice(labelEnd + 2, pos).trim();
      if (title.length === 0) {
        return -1;
      }
      if (!env.abbreviations) {
        env.abbreviations = {};
      }
      if (typeof env.abbreviations[":" + label] === "undefined") {
        env.abbreviations[":" + label] = title;
      }
      return pos;
    }
    function abbr(state) {
      var tokens = state.tokens, i2, l, content, pos;
      if (state.inlineMode) {
        return;
      }
      for (i2 = 1, l = tokens.length - 1; i2 < l; i2++) {
        if (tokens[i2 - 1].type === "paragraph_open" && tokens[i2].type === "inline" && tokens[i2 + 1].type === "paragraph_close") {
          content = tokens[i2].content;
          while (content.length) {
            pos = parseAbbr(content, state.inline, state.options, state.env);
            if (pos < 0) {
              break;
            }
            content = content.slice(pos).trim();
          }
          tokens[i2].content = content;
          if (!content.length) {
            tokens[i2 - 1].tight = true;
            tokens[i2 + 1].tight = true;
          }
        }
      }
    }
    function normalizeLink(url) {
      var normalized = replaceEntities(url);
      try {
        normalized = decodeURI(normalized);
      } catch (err) {
      }
      return encodeURI(normalized);
    }
    function parseLinkDestination(state, pos) {
      var code2, level, link2, start2 = pos, max2 = state.posMax;
      if (state.src.charCodeAt(pos) === 60) {
        pos++;
        while (pos < max2) {
          code2 = state.src.charCodeAt(pos);
          if (code2 === 10) {
            return false;
          }
          if (code2 === 62) {
            link2 = normalizeLink(unescapeMd(state.src.slice(start2 + 1, pos)));
            if (!state.parser.validateLink(link2)) {
              return false;
            }
            state.pos = pos + 1;
            state.linkContent = link2;
            return true;
          }
          if (code2 === 92 && pos + 1 < max2) {
            pos += 2;
            continue;
          }
          pos++;
        }
        return false;
      }
      level = 0;
      while (pos < max2) {
        code2 = state.src.charCodeAt(pos);
        if (code2 === 32) {
          break;
        }
        if (code2 < 32 || code2 === 127) {
          break;
        }
        if (code2 === 92 && pos + 1 < max2) {
          pos += 2;
          continue;
        }
        if (code2 === 40) {
          level++;
          if (level > 1) {
            break;
          }
        }
        if (code2 === 41) {
          level--;
          if (level < 0) {
            break;
          }
        }
        pos++;
      }
      if (start2 === pos) {
        return false;
      }
      link2 = unescapeMd(state.src.slice(start2, pos));
      if (!state.parser.validateLink(link2)) {
        return false;
      }
      state.linkContent = link2;
      state.pos = pos;
      return true;
    }
    function parseLinkTitle(state, pos) {
      var code2, start2 = pos, max2 = state.posMax, marker = state.src.charCodeAt(pos);
      if (marker !== 34 && marker !== 39 && marker !== 40) {
        return false;
      }
      pos++;
      if (marker === 40) {
        marker = 41;
      }
      while (pos < max2) {
        code2 = state.src.charCodeAt(pos);
        if (code2 === marker) {
          state.pos = pos + 1;
          state.linkContent = unescapeMd(state.src.slice(start2 + 1, pos));
          return true;
        }
        if (code2 === 92 && pos + 1 < max2) {
          pos += 2;
          continue;
        }
        pos++;
      }
      return false;
    }
    function normalizeReference(str2) {
      return str2.trim().replace(/\s+/g, " ").toUpperCase();
    }
    function parseReference(str2, parser, options, env) {
      var state, labelEnd, pos, max2, code2, start2, href, title, label;
      if (str2.charCodeAt(0) !== 91) {
        return -1;
      }
      if (str2.indexOf("]:") === -1) {
        return -1;
      }
      state = new StateInline(str2, parser, options, env, []);
      labelEnd = parseLinkLabel(state, 0);
      if (labelEnd < 0 || str2.charCodeAt(labelEnd + 1) !== 58) {
        return -1;
      }
      max2 = state.posMax;
      for (pos = labelEnd + 2; pos < max2; pos++) {
        code2 = state.src.charCodeAt(pos);
        if (code2 !== 32 && code2 !== 10) {
          break;
        }
      }
      if (!parseLinkDestination(state, pos)) {
        return -1;
      }
      href = state.linkContent;
      pos = state.pos;
      start2 = pos;
      for (pos = pos + 1; pos < max2; pos++) {
        code2 = state.src.charCodeAt(pos);
        if (code2 !== 32 && code2 !== 10) {
          break;
        }
      }
      if (pos < max2 && start2 !== pos && parseLinkTitle(state, pos)) {
        title = state.linkContent;
        pos = state.pos;
      } else {
        title = "";
        pos = start2;
      }
      while (pos < max2 && state.src.charCodeAt(pos) === 32) {
        pos++;
      }
      if (pos < max2 && state.src.charCodeAt(pos) !== 10) {
        return -1;
      }
      label = normalizeReference(str2.slice(1, labelEnd));
      if (typeof env.references[label] === "undefined") {
        env.references[label] = {
          title,
          href
        };
      }
      return pos;
    }
    function references(state) {
      var tokens = state.tokens, i2, l, content, pos;
      state.env.references = state.env.references || {};
      if (state.inlineMode) {
        return;
      }
      for (i2 = 1, l = tokens.length - 1; i2 < l; i2++) {
        if (tokens[i2].type === "inline" && tokens[i2 - 1].type === "paragraph_open" && tokens[i2 + 1].type === "paragraph_close") {
          content = tokens[i2].content;
          while (content.length) {
            pos = parseReference(content, state.inline, state.options, state.env);
            if (pos < 0) {
              break;
            }
            content = content.slice(pos).trim();
          }
          tokens[i2].content = content;
          if (!content.length) {
            tokens[i2 - 1].tight = true;
            tokens[i2 + 1].tight = true;
          }
        }
      }
    }
    function inline(state) {
      var tokens = state.tokens, tok, i2, l;
      for (i2 = 0, l = tokens.length; i2 < l; i2++) {
        tok = tokens[i2];
        if (tok.type === "inline") {
          state.inline.parse(tok.content, state.options, state.env, tok.children);
        }
      }
    }
    function footnote_block(state) {
      var i2, l, j, t, lastParagraph, list2, tokens, current, currentLabel, level = 0, insideRef = false, refTokens = {};
      if (!state.env.footnotes) {
        return;
      }
      state.tokens = state.tokens.filter(function(tok) {
        if (tok.type === "footnote_reference_open") {
          insideRef = true;
          current = [];
          currentLabel = tok.label;
          return false;
        }
        if (tok.type === "footnote_reference_close") {
          insideRef = false;
          refTokens[":" + currentLabel] = current;
          return false;
        }
        if (insideRef) {
          current.push(tok);
        }
        return !insideRef;
      });
      if (!state.env.footnotes.list) {
        return;
      }
      list2 = state.env.footnotes.list;
      state.tokens.push({
        type: "footnote_block_open",
        level: level++
      });
      for (i2 = 0, l = list2.length; i2 < l; i2++) {
        state.tokens.push({
          type: "footnote_open",
          id: i2,
          level: level++
        });
        if (list2[i2].tokens) {
          tokens = [];
          tokens.push({
            type: "paragraph_open",
            tight: false,
            level: level++
          });
          tokens.push({
            type: "inline",
            content: "",
            level,
            children: list2[i2].tokens
          });
          tokens.push({
            type: "paragraph_close",
            tight: false,
            level: --level
          });
        } else if (list2[i2].label) {
          tokens = refTokens[":" + list2[i2].label];
        }
        state.tokens = state.tokens.concat(tokens);
        if (state.tokens[state.tokens.length - 1].type === "paragraph_close") {
          lastParagraph = state.tokens.pop();
        } else {
          lastParagraph = null;
        }
        t = list2[i2].count > 0 ? list2[i2].count : 1;
        for (j = 0; j < t; j++) {
          state.tokens.push({
            type: "footnote_anchor",
            id: i2,
            subId: j,
            level
          });
        }
        if (lastParagraph) {
          state.tokens.push(lastParagraph);
        }
        state.tokens.push({
          type: "footnote_close",
          level: --level
        });
      }
      state.tokens.push({
        type: "footnote_block_close",
        level: --level
      });
    }
    var PUNCT_CHARS = ` 
()[]'".,!?-`;
    function regEscape(s) {
      return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1");
    }
    function abbr2(state) {
      var i2, j, l, tokens, token, text2, nodes, pos, level, reg, m, regText, blockTokens = state.tokens;
      if (!state.env.abbreviations) {
        return;
      }
      if (!state.env.abbrRegExp) {
        regText = "(^|[" + PUNCT_CHARS.split("").map(regEscape).join("") + "])(" + Object.keys(state.env.abbreviations).map(function(x2) {
          return x2.substr(1);
        }).sort(function(a, b) {
          return b.length - a.length;
        }).map(regEscape).join("|") + ")($|[" + PUNCT_CHARS.split("").map(regEscape).join("") + "])";
        state.env.abbrRegExp = new RegExp(regText, "g");
      }
      reg = state.env.abbrRegExp;
      for (j = 0, l = blockTokens.length; j < l; j++) {
        if (blockTokens[j].type !== "inline") {
          continue;
        }
        tokens = blockTokens[j].children;
        for (i2 = tokens.length - 1; i2 >= 0; i2--) {
          token = tokens[i2];
          if (token.type !== "text") {
            continue;
          }
          pos = 0;
          text2 = token.content;
          reg.lastIndex = 0;
          level = token.level;
          nodes = [];
          while (m = reg.exec(text2)) {
            if (reg.lastIndex > pos) {
              nodes.push({
                type: "text",
                content: text2.slice(pos, m.index + m[1].length),
                level
              });
            }
            nodes.push({
              type: "abbr_open",
              title: state.env.abbreviations[":" + m[2]],
              level: level++
            });
            nodes.push({
              type: "text",
              content: m[2],
              level
            });
            nodes.push({
              type: "abbr_close",
              level: --level
            });
            pos = reg.lastIndex - m[3].length;
          }
          if (!nodes.length) {
            continue;
          }
          if (pos < text2.length) {
            nodes.push({
              type: "text",
              content: text2.slice(pos),
              level
            });
          }
          blockTokens[j].children = tokens = [].concat(tokens.slice(0, i2), nodes, tokens.slice(i2 + 1));
        }
      }
    }
    var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;
    var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
    var SCOPED_ABBR = {
      "c": "©",
      "r": "®",
      "p": "§",
      "tm": "™"
    };
    function replaceScopedAbbr(str2) {
      if (str2.indexOf("(") < 0) {
        return str2;
      }
      return str2.replace(SCOPED_ABBR_RE, function(match, name3) {
        return SCOPED_ABBR[name3.toLowerCase()];
      });
    }
    function replace(state) {
      var i2, token, text2, inlineTokens, blkIdx;
      if (!state.options.typographer) {
        return;
      }
      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
        if (state.tokens[blkIdx].type !== "inline") {
          continue;
        }
        inlineTokens = state.tokens[blkIdx].children;
        for (i2 = inlineTokens.length - 1; i2 >= 0; i2--) {
          token = inlineTokens[i2];
          if (token.type === "text") {
            text2 = token.content;
            text2 = replaceScopedAbbr(text2);
            if (RARE_RE.test(text2)) {
              text2 = text2.replace(/\+-/g, "±").replace(/\.{2,}/g, "…").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---([^-]|$)/mg, "$1—$2").replace(/(^|\s)--(\s|$)/mg, "$1–$2").replace(/(^|[^-\s])--([^-\s]|$)/mg, "$1–$2");
            }
            token.content = text2;
          }
        }
      }
    }
    var QUOTE_TEST_RE = /['"]/;
    var QUOTE_RE = /['"]/g;
    var PUNCT_RE = /[-\s()\[\]]/;
    var APOSTROPHE = "’";
    function isLetter(str2, pos) {
      if (pos < 0 || pos >= str2.length) {
        return false;
      }
      return !PUNCT_RE.test(str2[pos]);
    }
    function replaceAt(str2, index, ch) {
      return str2.substr(0, index) + ch + str2.substr(index + 1);
    }
    function smartquotes(state) {
      var i2, token, text2, t, pos, max2, thisLevel, lastSpace, nextSpace, item, canOpen, canClose, j, isSingle, blkIdx, tokens, stack;
      if (!state.options.typographer) {
        return;
      }
      stack = [];
      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
        if (state.tokens[blkIdx].type !== "inline") {
          continue;
        }
        tokens = state.tokens[blkIdx].children;
        stack.length = 0;
        for (i2 = 0; i2 < tokens.length; i2++) {
          token = tokens[i2];
          if (token.type !== "text" || QUOTE_TEST_RE.test(token.text)) {
            continue;
          }
          thisLevel = tokens[i2].level;
          for (j = stack.length - 1; j >= 0; j--) {
            if (stack[j].level <= thisLevel) {
              break;
            }
          }
          stack.length = j + 1;
          text2 = token.content;
          pos = 0;
          max2 = text2.length;
          OUTER:
            while (pos < max2) {
              QUOTE_RE.lastIndex = pos;
              t = QUOTE_RE.exec(text2);
              if (!t) {
                break;
              }
              lastSpace = !isLetter(text2, t.index - 1);
              pos = t.index + 1;
              isSingle = t[0] === "'";
              nextSpace = !isLetter(text2, pos);
              if (!nextSpace && !lastSpace) {
                if (isSingle) {
                  token.content = replaceAt(token.content, t.index, APOSTROPHE);
                }
                continue;
              }
              canOpen = !nextSpace;
              canClose = !lastSpace;
              if (canClose) {
                for (j = stack.length - 1; j >= 0; j--) {
                  item = stack[j];
                  if (stack[j].level < thisLevel) {
                    break;
                  }
                  if (item.single === isSingle && stack[j].level === thisLevel) {
                    item = stack[j];
                    if (isSingle) {
                      tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, state.options.quotes[2]);
                      token.content = replaceAt(token.content, t.index, state.options.quotes[3]);
                    } else {
                      tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, state.options.quotes[0]);
                      token.content = replaceAt(token.content, t.index, state.options.quotes[1]);
                    }
                    stack.length = j;
                    continue OUTER;
                  }
                }
              }
              if (canOpen) {
                stack.push({
                  token: i2,
                  pos: t.index,
                  single: isSingle,
                  level: thisLevel
                });
              } else if (canClose && isSingle) {
                token.content = replaceAt(token.content, t.index, APOSTROPHE);
              }
            }
        }
      }
    }
    var _rules = [["block", block], ["abbr", abbr], ["references", references], ["inline", inline], ["footnote_tail", footnote_block], ["abbr2", abbr2], ["replacements", replace], ["smartquotes", smartquotes]];
    function Core() {
      this.options = {};
      this.ruler = new Ruler();
      for (var i2 = 0; i2 < _rules.length; i2++) {
        this.ruler.push(_rules[i2][0], _rules[i2][1]);
      }
    }
    Core.prototype.process = function(state) {
      var i2, l, rules2;
      rules2 = this.ruler.getRules("");
      for (i2 = 0, l = rules2.length; i2 < l; i2++) {
        rules2[i2](state);
      }
    };
    function StateBlock(src, parser, options, env, tokens) {
      var ch, s, start2, pos, len, indent, indent_found;
      this.src = src;
      this.parser = parser;
      this.options = options;
      this.env = env;
      this.tokens = tokens;
      this.bMarks = [];
      this.eMarks = [];
      this.tShift = [];
      this.blkIndent = 0;
      this.line = 0;
      this.lineMax = 0;
      this.tight = false;
      this.parentType = "root";
      this.ddIndent = -1;
      this.level = 0;
      this.result = "";
      s = this.src;
      indent = 0;
      indent_found = false;
      for (start2 = pos = indent = 0, len = s.length; pos < len; pos++) {
        ch = s.charCodeAt(pos);
        if (!indent_found) {
          if (ch === 32) {
            indent++;
            continue;
          } else {
            indent_found = true;
          }
        }
        if (ch === 10 || pos === len - 1) {
          if (ch !== 10) {
            pos++;
          }
          this.bMarks.push(start2);
          this.eMarks.push(pos);
          this.tShift.push(indent);
          indent_found = false;
          indent = 0;
          start2 = pos + 1;
        }
      }
      this.bMarks.push(s.length);
      this.eMarks.push(s.length);
      this.tShift.push(0);
      this.lineMax = this.bMarks.length - 1;
    }
    StateBlock.prototype.isEmpty = function isEmpty(line) {
      return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
    };
    StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
      for (var max2 = this.lineMax; from < max2; from++) {
        if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
          break;
        }
      }
      return from;
    };
    StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
      for (var max2 = this.src.length; pos < max2; pos++) {
        if (this.src.charCodeAt(pos) !== 32) {
          break;
        }
      }
      return pos;
    };
    StateBlock.prototype.skipChars = function skipChars(pos, code2) {
      for (var max2 = this.src.length; pos < max2; pos++) {
        if (this.src.charCodeAt(pos) !== code2) {
          break;
        }
      }
      return pos;
    };
    StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code2, min2) {
      if (pos <= min2) {
        return pos;
      }
      while (pos > min2) {
        if (code2 !== this.src.charCodeAt(--pos)) {
          return pos + 1;
        }
      }
      return pos;
    };
    StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
      var i2, first, last, queue, shift, line = begin;
      if (begin >= end) {
        return "";
      }
      if (line + 1 === end) {
        first = this.bMarks[line] + Math.min(this.tShift[line], indent);
        last = keepLastLF ? this.eMarks[line] + 1 : this.eMarks[line];
        return this.src.slice(first, last);
      }
      queue = new Array(end - begin);
      for (i2 = 0; line < end; line++, i2++) {
        shift = this.tShift[line];
        if (shift > indent) {
          shift = indent;
        }
        if (shift < 0) {
          shift = 0;
        }
        first = this.bMarks[line] + shift;
        if (line + 1 < end || keepLastLF) {
          last = this.eMarks[line] + 1;
        } else {
          last = this.eMarks[line];
        }
        queue[i2] = this.src.slice(first, last);
      }
      return queue.join("");
    };
    function code(state, startLine, endLine) {
      var nextLine, last;
      if (state.tShift[startLine] - state.blkIndent < 4) {
        return false;
      }
      last = nextLine = startLine + 1;
      while (nextLine < endLine) {
        if (state.isEmpty(nextLine)) {
          nextLine++;
          continue;
        }
        if (state.tShift[nextLine] - state.blkIndent >= 4) {
          nextLine++;
          last = nextLine;
          continue;
        }
        break;
      }
      state.line = nextLine;
      state.tokens.push({
        type: "code",
        content: state.getLines(startLine, last, 4 + state.blkIndent, true),
        block: true,
        lines: [startLine, state.line],
        level: state.level
      });
      return true;
    }
    function fences(state, startLine, endLine, silent) {
      var marker, len, params, nextLine, mem, haveEndMarker = false, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (pos + 3 > max2) {
        return false;
      }
      marker = state.src.charCodeAt(pos);
      if (marker !== 126 && marker !== 96) {
        return false;
      }
      mem = pos;
      pos = state.skipChars(pos, marker);
      len = pos - mem;
      if (len < 3) {
        return false;
      }
      params = state.src.slice(pos, max2).trim();
      if (params.indexOf("`") >= 0) {
        return false;
      }
      if (silent) {
        return true;
      }
      nextLine = startLine;
      for (; ; ) {
        nextLine++;
        if (nextLine >= endLine) {
          break;
        }
        pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
        max2 = state.eMarks[nextLine];
        if (pos < max2 && state.tShift[nextLine] < state.blkIndent) {
          break;
        }
        if (state.src.charCodeAt(pos) !== marker) {
          continue;
        }
        if (state.tShift[nextLine] - state.blkIndent >= 4) {
          continue;
        }
        pos = state.skipChars(pos, marker);
        if (pos - mem < len) {
          continue;
        }
        pos = state.skipSpaces(pos);
        if (pos < max2) {
          continue;
        }
        haveEndMarker = true;
        break;
      }
      len = state.tShift[startLine];
      state.line = nextLine + (haveEndMarker ? 1 : 0);
      state.tokens.push({
        type: "fence",
        params,
        content: state.getLines(startLine + 1, nextLine, len, true),
        lines: [startLine, state.line],
        level: state.level
      });
      return true;
    }
    function blockquote(state, startLine, endLine, silent) {
      var nextLine, lastLineEmpty, oldTShift, oldBMarks, oldIndent, oldParentType, lines, terminatorRules, i2, l, terminate, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (pos > max2) {
        return false;
      }
      if (state.src.charCodeAt(pos++) !== 62) {
        return false;
      }
      if (state.level >= state.options.maxNesting) {
        return false;
      }
      if (silent) {
        return true;
      }
      if (state.src.charCodeAt(pos) === 32) {
        pos++;
      }
      oldIndent = state.blkIndent;
      state.blkIndent = 0;
      oldBMarks = [state.bMarks[startLine]];
      state.bMarks[startLine] = pos;
      pos = pos < max2 ? state.skipSpaces(pos) : pos;
      lastLineEmpty = pos >= max2;
      oldTShift = [state.tShift[startLine]];
      state.tShift[startLine] = pos - state.bMarks[startLine];
      terminatorRules = state.parser.ruler.getRules("blockquote");
      for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
        pos = state.bMarks[nextLine] + state.tShift[nextLine];
        max2 = state.eMarks[nextLine];
        if (pos >= max2) {
          break;
        }
        if (state.src.charCodeAt(pos++) === 62) {
          if (state.src.charCodeAt(pos) === 32) {
            pos++;
          }
          oldBMarks.push(state.bMarks[nextLine]);
          state.bMarks[nextLine] = pos;
          pos = pos < max2 ? state.skipSpaces(pos) : pos;
          lastLineEmpty = pos >= max2;
          oldTShift.push(state.tShift[nextLine]);
          state.tShift[nextLine] = pos - state.bMarks[nextLine];
          continue;
        }
        if (lastLineEmpty) {
          break;
        }
        terminate = false;
        for (i2 = 0, l = terminatorRules.length; i2 < l; i2++) {
          if (terminatorRules[i2](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
        oldBMarks.push(state.bMarks[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        state.tShift[nextLine] = -1337;
      }
      oldParentType = state.parentType;
      state.parentType = "blockquote";
      state.tokens.push({
        type: "blockquote_open",
        lines: lines = [startLine, 0],
        level: state.level++
      });
      state.parser.tokenize(state, startLine, nextLine);
      state.tokens.push({
        type: "blockquote_close",
        level: --state.level
      });
      state.parentType = oldParentType;
      lines[1] = state.line;
      for (i2 = 0; i2 < oldTShift.length; i2++) {
        state.bMarks[i2 + startLine] = oldBMarks[i2];
        state.tShift[i2 + startLine] = oldTShift[i2];
      }
      state.blkIndent = oldIndent;
      return true;
    }
    function hr(state, startLine, endLine, silent) {
      var marker, cnt, ch, pos = state.bMarks[startLine], max2 = state.eMarks[startLine];
      pos += state.tShift[startLine];
      if (pos > max2) {
        return false;
      }
      marker = state.src.charCodeAt(pos++);
      if (marker !== 42 && marker !== 45 && marker !== 95) {
        return false;
      }
      cnt = 1;
      while (pos < max2) {
        ch = state.src.charCodeAt(pos++);
        if (ch !== marker && ch !== 32) {
          return false;
        }
        if (ch === marker) {
          cnt++;
        }
      }
      if (cnt < 3) {
        return false;
      }
      if (silent) {
        return true;
      }
      state.line = startLine + 1;
      state.tokens.push({
        type: "hr",
        lines: [startLine, state.line],
        level: state.level
      });
      return true;
    }
    function skipBulletListMarker(state, startLine) {
      var marker, pos, max2;
      pos = state.bMarks[startLine] + state.tShift[startLine];
      max2 = state.eMarks[startLine];
      if (pos >= max2) {
        return -1;
      }
      marker = state.src.charCodeAt(pos++);
      if (marker !== 42 && marker !== 45 && marker !== 43) {
        return -1;
      }
      if (pos < max2 && state.src.charCodeAt(pos) !== 32) {
        return -1;
      }
      return pos;
    }
    function skipOrderedListMarker(state, startLine) {
      var ch, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (pos + 1 >= max2) {
        return -1;
      }
      ch = state.src.charCodeAt(pos++);
      if (ch < 48 || ch > 57) {
        return -1;
      }
      for (; ; ) {
        if (pos >= max2) {
          return -1;
        }
        ch = state.src.charCodeAt(pos++);
        if (ch >= 48 && ch <= 57) {
          continue;
        }
        if (ch === 41 || ch === 46) {
          break;
        }
        return -1;
      }
      if (pos < max2 && state.src.charCodeAt(pos) !== 32) {
        return -1;
      }
      return pos;
    }
    function markTightParagraphs(state, idx) {
      var i2, l, level = state.level + 2;
      for (i2 = idx + 2, l = state.tokens.length - 2; i2 < l; i2++) {
        if (state.tokens[i2].level === level && state.tokens[i2].type === "paragraph_open") {
          state.tokens[i2 + 2].tight = true;
          state.tokens[i2].tight = true;
          i2 += 2;
        }
      }
    }
    function list(state, startLine, endLine, silent) {
      var nextLine, indent, oldTShift, oldIndent, oldTight, oldParentType, start2, posAfterMarker, max2, indentAfterMarker, markerValue, markerCharCode, isOrdered, contentStart, listTokIdx, prevEmptyEnd, listLines, itemLines, tight = true, terminatorRules, i2, l, terminate;
      if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
        isOrdered = true;
      } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
        isOrdered = false;
      } else {
        return false;
      }
      if (state.level >= state.options.maxNesting) {
        return false;
      }
      markerCharCode = state.src.charCodeAt(posAfterMarker - 1);
      if (silent) {
        return true;
      }
      listTokIdx = state.tokens.length;
      if (isOrdered) {
        start2 = state.bMarks[startLine] + state.tShift[startLine];
        markerValue = Number(state.src.substr(start2, posAfterMarker - start2 - 1));
        state.tokens.push({
          type: "ordered_list_open",
          order: markerValue,
          lines: listLines = [startLine, 0],
          level: state.level++
        });
      } else {
        state.tokens.push({
          type: "bullet_list_open",
          lines: listLines = [startLine, 0],
          level: state.level++
        });
      }
      nextLine = startLine;
      prevEmptyEnd = false;
      terminatorRules = state.parser.ruler.getRules("list");
      while (nextLine < endLine) {
        contentStart = state.skipSpaces(posAfterMarker);
        max2 = state.eMarks[nextLine];
        if (contentStart >= max2) {
          indentAfterMarker = 1;
        } else {
          indentAfterMarker = contentStart - posAfterMarker;
        }
        if (indentAfterMarker > 4) {
          indentAfterMarker = 1;
        }
        if (indentAfterMarker < 1) {
          indentAfterMarker = 1;
        }
        indent = posAfterMarker - state.bMarks[nextLine] + indentAfterMarker;
        state.tokens.push({
          type: "list_item_open",
          lines: itemLines = [startLine, 0],
          level: state.level++
        });
        oldIndent = state.blkIndent;
        oldTight = state.tight;
        oldTShift = state.tShift[startLine];
        oldParentType = state.parentType;
        state.tShift[startLine] = contentStart - state.bMarks[startLine];
        state.blkIndent = indent;
        state.tight = true;
        state.parentType = "list";
        state.parser.tokenize(state, startLine, endLine, true);
        if (!state.tight || prevEmptyEnd) {
          tight = false;
        }
        prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);
        state.blkIndent = oldIndent;
        state.tShift[startLine] = oldTShift;
        state.tight = oldTight;
        state.parentType = oldParentType;
        state.tokens.push({
          type: "list_item_close",
          level: --state.level
        });
        nextLine = startLine = state.line;
        itemLines[1] = nextLine;
        contentStart = state.bMarks[startLine];
        if (nextLine >= endLine) {
          break;
        }
        if (state.isEmpty(nextLine)) {
          break;
        }
        if (state.tShift[nextLine] < state.blkIndent) {
          break;
        }
        terminate = false;
        for (i2 = 0, l = terminatorRules.length; i2 < l; i2++) {
          if (terminatorRules[i2](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
        if (isOrdered) {
          posAfterMarker = skipOrderedListMarker(state, nextLine);
          if (posAfterMarker < 0) {
            break;
          }
        } else {
          posAfterMarker = skipBulletListMarker(state, nextLine);
          if (posAfterMarker < 0) {
            break;
          }
        }
        if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {
          break;
        }
      }
      state.tokens.push({
        type: isOrdered ? "ordered_list_close" : "bullet_list_close",
        level: --state.level
      });
      listLines[1] = nextLine;
      state.line = nextLine;
      if (tight) {
        markTightParagraphs(state, listTokIdx);
      }
      return true;
    }
    function footnote(state, startLine, endLine, silent) {
      var oldBMark, oldTShift, oldParentType, pos, label, start2 = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (start2 + 4 > max2) {
        return false;
      }
      if (state.src.charCodeAt(start2) !== 91) {
        return false;
      }
      if (state.src.charCodeAt(start2 + 1) !== 94) {
        return false;
      }
      if (state.level >= state.options.maxNesting) {
        return false;
      }
      for (pos = start2 + 2; pos < max2; pos++) {
        if (state.src.charCodeAt(pos) === 32) {
          return false;
        }
        if (state.src.charCodeAt(pos) === 93) {
          break;
        }
      }
      if (pos === start2 + 2) {
        return false;
      }
      if (pos + 1 >= max2 || state.src.charCodeAt(++pos) !== 58) {
        return false;
      }
      if (silent) {
        return true;
      }
      pos++;
      if (!state.env.footnotes) {
        state.env.footnotes = {};
      }
      if (!state.env.footnotes.refs) {
        state.env.footnotes.refs = {};
      }
      label = state.src.slice(start2 + 2, pos - 2);
      state.env.footnotes.refs[":" + label] = -1;
      state.tokens.push({
        type: "footnote_reference_open",
        label,
        level: state.level++
      });
      oldBMark = state.bMarks[startLine];
      oldTShift = state.tShift[startLine];
      oldParentType = state.parentType;
      state.tShift[startLine] = state.skipSpaces(pos) - pos;
      state.bMarks[startLine] = pos;
      state.blkIndent += 4;
      state.parentType = "footnote";
      if (state.tShift[startLine] < state.blkIndent) {
        state.tShift[startLine] += state.blkIndent;
        state.bMarks[startLine] -= state.blkIndent;
      }
      state.parser.tokenize(state, startLine, endLine, true);
      state.parentType = oldParentType;
      state.blkIndent -= 4;
      state.tShift[startLine] = oldTShift;
      state.bMarks[startLine] = oldBMark;
      state.tokens.push({
        type: "footnote_reference_close",
        level: --state.level
      });
      return true;
    }
    function heading(state, startLine, endLine, silent) {
      var ch, level, tmp, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (pos >= max2) {
        return false;
      }
      ch = state.src.charCodeAt(pos);
      if (ch !== 35 || pos >= max2) {
        return false;
      }
      level = 1;
      ch = state.src.charCodeAt(++pos);
      while (ch === 35 && pos < max2 && level <= 6) {
        level++;
        ch = state.src.charCodeAt(++pos);
      }
      if (level > 6 || pos < max2 && ch !== 32) {
        return false;
      }
      if (silent) {
        return true;
      }
      max2 = state.skipCharsBack(max2, 32, pos);
      tmp = state.skipCharsBack(max2, 35, pos);
      if (tmp > pos && state.src.charCodeAt(tmp - 1) === 32) {
        max2 = tmp;
      }
      state.line = startLine + 1;
      state.tokens.push({
        type: "heading_open",
        hLevel: level,
        lines: [startLine, state.line],
        level: state.level
      });
      if (pos < max2) {
        state.tokens.push({
          type: "inline",
          content: state.src.slice(pos, max2).trim(),
          level: state.level + 1,
          lines: [startLine, state.line],
          children: []
        });
      }
      state.tokens.push({
        type: "heading_close",
        hLevel: level,
        level: state.level
      });
      return true;
    }
    function lheading(state, startLine, endLine) {
      var marker, pos, max2, next = startLine + 1;
      if (next >= endLine) {
        return false;
      }
      if (state.tShift[next] < state.blkIndent) {
        return false;
      }
      if (state.tShift[next] - state.blkIndent > 3) {
        return false;
      }
      pos = state.bMarks[next] + state.tShift[next];
      max2 = state.eMarks[next];
      if (pos >= max2) {
        return false;
      }
      marker = state.src.charCodeAt(pos);
      if (marker !== 45 && marker !== 61) {
        return false;
      }
      pos = state.skipChars(pos, marker);
      pos = state.skipSpaces(pos);
      if (pos < max2) {
        return false;
      }
      pos = state.bMarks[startLine] + state.tShift[startLine];
      state.line = next + 1;
      state.tokens.push({
        type: "heading_open",
        hLevel: marker === 61 ? 1 : 2,
        lines: [startLine, state.line],
        level: state.level
      });
      state.tokens.push({
        type: "inline",
        content: state.src.slice(pos, state.eMarks[startLine]).trim(),
        level: state.level + 1,
        lines: [startLine, state.line - 1],
        children: []
      });
      state.tokens.push({
        type: "heading_close",
        hLevel: marker === 61 ? 1 : 2,
        level: state.level
      });
      return true;
    }
    var html_blocks = {};
    ["article", "aside", "button", "blockquote", "body", "canvas", "caption", "col", "colgroup", "dd", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "iframe", "li", "map", "object", "ol", "output", "p", "pre", "progress", "script", "section", "style", "table", "tbody", "td", "textarea", "tfoot", "th", "tr", "thead", "ul", "video"].forEach(function(name3) {
      html_blocks[name3] = true;
    });
    var HTML_TAG_OPEN_RE = /^<([a-zA-Z]{1,15})[\s\/>]/;
    var HTML_TAG_CLOSE_RE = /^<\/([a-zA-Z]{1,15})[\s>]/;
    function isLetter$1(ch) {
      var lc = ch | 32;
      return lc >= 97 && lc <= 122;
    }
    function htmlblock(state, startLine, endLine, silent) {
      var ch, match, nextLine, pos = state.bMarks[startLine], max2 = state.eMarks[startLine], shift = state.tShift[startLine];
      pos += shift;
      if (!state.options.html) {
        return false;
      }
      if (shift > 3 || pos + 2 >= max2) {
        return false;
      }
      if (state.src.charCodeAt(pos) !== 60) {
        return false;
      }
      ch = state.src.charCodeAt(pos + 1);
      if (ch === 33 || ch === 63) {
        if (silent) {
          return true;
        }
      } else if (ch === 47 || isLetter$1(ch)) {
        if (ch === 47) {
          match = state.src.slice(pos, max2).match(HTML_TAG_CLOSE_RE);
          if (!match) {
            return false;
          }
        } else {
          match = state.src.slice(pos, max2).match(HTML_TAG_OPEN_RE);
          if (!match) {
            return false;
          }
        }
        if (html_blocks[match[1].toLowerCase()] !== true) {
          return false;
        }
        if (silent) {
          return true;
        }
      } else {
        return false;
      }
      nextLine = startLine + 1;
      while (nextLine < state.lineMax && !state.isEmpty(nextLine)) {
        nextLine++;
      }
      state.line = nextLine;
      state.tokens.push({
        type: "htmlblock",
        level: state.level,
        lines: [startLine, state.line],
        content: state.getLines(startLine, nextLine, 0, true)
      });
      return true;
    }
    function getLine$1(state, line) {
      var pos = state.bMarks[line] + state.blkIndent, max2 = state.eMarks[line];
      return state.src.substr(pos, max2 - pos);
    }
    function table(state, startLine, endLine, silent) {
      var ch, lineText, pos, i2, nextLine, rows, cell, aligns, t, tableLines, tbodyLines;
      if (startLine + 2 > endLine) {
        return false;
      }
      nextLine = startLine + 1;
      if (state.tShift[nextLine] < state.blkIndent) {
        return false;
      }
      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      if (pos >= state.eMarks[nextLine]) {
        return false;
      }
      ch = state.src.charCodeAt(pos);
      if (ch !== 124 && ch !== 45 && ch !== 58) {
        return false;
      }
      lineText = getLine$1(state, startLine + 1);
      if (!/^[-:| ]+$/.test(lineText)) {
        return false;
      }
      rows = lineText.split("|");
      if (rows <= 2) {
        return false;
      }
      aligns = [];
      for (i2 = 0; i2 < rows.length; i2++) {
        t = rows[i2].trim();
        if (!t) {
          if (i2 === 0 || i2 === rows.length - 1) {
            continue;
          } else {
            return false;
          }
        }
        if (!/^:?-+:?$/.test(t)) {
          return false;
        }
        if (t.charCodeAt(t.length - 1) === 58) {
          aligns.push(t.charCodeAt(0) === 58 ? "center" : "right");
        } else if (t.charCodeAt(0) === 58) {
          aligns.push("left");
        } else {
          aligns.push("");
        }
      }
      lineText = getLine$1(state, startLine).trim();
      if (lineText.indexOf("|") === -1) {
        return false;
      }
      rows = lineText.replace(/^\||\|$/g, "").split("|");
      if (aligns.length !== rows.length) {
        return false;
      }
      if (silent) {
        return true;
      }
      state.tokens.push({
        type: "table_open",
        lines: tableLines = [startLine, 0],
        level: state.level++
      });
      state.tokens.push({
        type: "thead_open",
        lines: [startLine, startLine + 1],
        level: state.level++
      });
      state.tokens.push({
        type: "tr_open",
        lines: [startLine, startLine + 1],
        level: state.level++
      });
      for (i2 = 0; i2 < rows.length; i2++) {
        state.tokens.push({
          type: "th_open",
          align: aligns[i2],
          lines: [startLine, startLine + 1],
          level: state.level++
        });
        state.tokens.push({
          type: "inline",
          content: rows[i2].trim(),
          lines: [startLine, startLine + 1],
          level: state.level,
          children: []
        });
        state.tokens.push({
          type: "th_close",
          level: --state.level
        });
      }
      state.tokens.push({
        type: "tr_close",
        level: --state.level
      });
      state.tokens.push({
        type: "thead_close",
        level: --state.level
      });
      state.tokens.push({
        type: "tbody_open",
        lines: tbodyLines = [startLine + 2, 0],
        level: state.level++
      });
      for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
        if (state.tShift[nextLine] < state.blkIndent) {
          break;
        }
        lineText = getLine$1(state, nextLine).trim();
        if (lineText.indexOf("|") === -1) {
          break;
        }
        rows = lineText.replace(/^\||\|$/g, "").split("|");
        state.tokens.push({
          type: "tr_open",
          level: state.level++
        });
        for (i2 = 0; i2 < rows.length; i2++) {
          state.tokens.push({
            type: "td_open",
            align: aligns[i2],
            level: state.level++
          });
          cell = rows[i2].substring(rows[i2].charCodeAt(0) === 124 ? 1 : 0, rows[i2].charCodeAt(rows[i2].length - 1) === 124 ? rows[i2].length - 1 : rows[i2].length).trim();
          state.tokens.push({
            type: "inline",
            content: cell,
            level: state.level,
            children: []
          });
          state.tokens.push({
            type: "td_close",
            level: --state.level
          });
        }
        state.tokens.push({
          type: "tr_close",
          level: --state.level
        });
      }
      state.tokens.push({
        type: "tbody_close",
        level: --state.level
      });
      state.tokens.push({
        type: "table_close",
        level: --state.level
      });
      tableLines[1] = tbodyLines[1] = nextLine;
      state.line = nextLine;
      return true;
    }
    function skipMarker(state, line) {
      var pos, marker, start2 = state.bMarks[line] + state.tShift[line], max2 = state.eMarks[line];
      if (start2 >= max2) {
        return -1;
      }
      marker = state.src.charCodeAt(start2++);
      if (marker !== 126 && marker !== 58) {
        return -1;
      }
      pos = state.skipSpaces(start2);
      if (start2 === pos) {
        return -1;
      }
      if (pos >= max2) {
        return -1;
      }
      return pos;
    }
    function markTightParagraphs$1(state, idx) {
      var i2, l, level = state.level + 2;
      for (i2 = idx + 2, l = state.tokens.length - 2; i2 < l; i2++) {
        if (state.tokens[i2].level === level && state.tokens[i2].type === "paragraph_open") {
          state.tokens[i2 + 2].tight = true;
          state.tokens[i2].tight = true;
          i2 += 2;
        }
      }
    }
    function deflist(state, startLine, endLine, silent) {
      var contentStart, ddLine, dtLine, itemLines, listLines, listTokIdx, nextLine, oldIndent, oldDDIndent, oldParentType, oldTShift, oldTight, prevEmptyEnd, tight;
      if (silent) {
        if (state.ddIndent < 0) {
          return false;
        }
        return skipMarker(state, startLine) >= 0;
      }
      nextLine = startLine + 1;
      if (state.isEmpty(nextLine)) {
        if (++nextLine > endLine) {
          return false;
        }
      }
      if (state.tShift[nextLine] < state.blkIndent) {
        return false;
      }
      contentStart = skipMarker(state, nextLine);
      if (contentStart < 0) {
        return false;
      }
      if (state.level >= state.options.maxNesting) {
        return false;
      }
      listTokIdx = state.tokens.length;
      state.tokens.push({
        type: "dl_open",
        lines: listLines = [startLine, 0],
        level: state.level++
      });
      dtLine = startLine;
      ddLine = nextLine;
      OUTER:
        for (; ; ) {
          tight = true;
          prevEmptyEnd = false;
          state.tokens.push({
            type: "dt_open",
            lines: [dtLine, dtLine],
            level: state.level++
          });
          state.tokens.push({
            type: "inline",
            content: state.getLines(dtLine, dtLine + 1, state.blkIndent, false).trim(),
            level: state.level + 1,
            lines: [dtLine, dtLine],
            children: []
          });
          state.tokens.push({
            type: "dt_close",
            level: --state.level
          });
          for (; ; ) {
            state.tokens.push({
              type: "dd_open",
              lines: itemLines = [nextLine, 0],
              level: state.level++
            });
            oldTight = state.tight;
            oldDDIndent = state.ddIndent;
            oldIndent = state.blkIndent;
            oldTShift = state.tShift[ddLine];
            oldParentType = state.parentType;
            state.blkIndent = state.ddIndent = state.tShift[ddLine] + 2;
            state.tShift[ddLine] = contentStart - state.bMarks[ddLine];
            state.tight = true;
            state.parentType = "deflist";
            state.parser.tokenize(state, ddLine, endLine, true);
            if (!state.tight || prevEmptyEnd) {
              tight = false;
            }
            prevEmptyEnd = state.line - ddLine > 1 && state.isEmpty(state.line - 1);
            state.tShift[ddLine] = oldTShift;
            state.tight = oldTight;
            state.parentType = oldParentType;
            state.blkIndent = oldIndent;
            state.ddIndent = oldDDIndent;
            state.tokens.push({
              type: "dd_close",
              level: --state.level
            });
            itemLines[1] = nextLine = state.line;
            if (nextLine >= endLine) {
              break OUTER;
            }
            if (state.tShift[nextLine] < state.blkIndent) {
              break OUTER;
            }
            contentStart = skipMarker(state, nextLine);
            if (contentStart < 0) {
              break;
            }
            ddLine = nextLine;
          }
          if (nextLine >= endLine) {
            break;
          }
          dtLine = nextLine;
          if (state.isEmpty(dtLine)) {
            break;
          }
          if (state.tShift[dtLine] < state.blkIndent) {
            break;
          }
          ddLine = dtLine + 1;
          if (ddLine >= endLine) {
            break;
          }
          if (state.isEmpty(ddLine)) {
            ddLine++;
          }
          if (ddLine >= endLine) {
            break;
          }
          if (state.tShift[ddLine] < state.blkIndent) {
            break;
          }
          contentStart = skipMarker(state, ddLine);
          if (contentStart < 0) {
            break;
          }
        }
      state.tokens.push({
        type: "dl_close",
        level: --state.level
      });
      listLines[1] = nextLine;
      state.line = nextLine;
      if (tight) {
        markTightParagraphs$1(state, listTokIdx);
      }
      return true;
    }
    function paragraph(state, startLine) {
      var endLine, content, terminate, i2, l, nextLine = startLine + 1, terminatorRules;
      endLine = state.lineMax;
      if (nextLine < endLine && !state.isEmpty(nextLine)) {
        terminatorRules = state.parser.ruler.getRules("paragraph");
        for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
          if (state.tShift[nextLine] - state.blkIndent > 3) {
            continue;
          }
          terminate = false;
          for (i2 = 0, l = terminatorRules.length; i2 < l; i2++) {
            if (terminatorRules[i2](state, nextLine, endLine, true)) {
              terminate = true;
              break;
            }
          }
          if (terminate) {
            break;
          }
        }
      }
      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      state.line = nextLine;
      if (content.length) {
        state.tokens.push({
          type: "paragraph_open",
          tight: false,
          lines: [startLine, state.line],
          level: state.level
        });
        state.tokens.push({
          type: "inline",
          content,
          level: state.level + 1,
          lines: [startLine, state.line],
          children: []
        });
        state.tokens.push({
          type: "paragraph_close",
          tight: false,
          level: state.level
        });
      }
      return true;
    }
    var _rules$1 = [["code", code], ["fences", fences, ["paragraph", "blockquote", "list"]], ["blockquote", blockquote, ["paragraph", "blockquote", "list"]], ["hr", hr, ["paragraph", "blockquote", "list"]], ["list", list, ["paragraph", "blockquote"]], ["footnote", footnote, ["paragraph"]], ["heading", heading, ["paragraph", "blockquote"]], ["lheading", lheading], ["htmlblock", htmlblock, ["paragraph", "blockquote"]], ["table", table, ["paragraph"]], ["deflist", deflist, ["paragraph"]], ["paragraph", paragraph]];
    function ParserBlock() {
      this.ruler = new Ruler();
      for (var i2 = 0; i2 < _rules$1.length; i2++) {
        this.ruler.push(_rules$1[i2][0], _rules$1[i2][1], {
          alt: (_rules$1[i2][2] || []).slice()
        });
      }
    }
    ParserBlock.prototype.tokenize = function(state, startLine, endLine) {
      var rules2 = this.ruler.getRules("");
      var len = rules2.length;
      var line = startLine;
      var hasEmptyLines = false;
      var ok, i2;
      while (line < endLine) {
        state.line = line = state.skipEmptyLines(line);
        if (line >= endLine) {
          break;
        }
        if (state.tShift[line] < state.blkIndent) {
          break;
        }
        for (i2 = 0; i2 < len; i2++) {
          ok = rules2[i2](state, line, endLine, false);
          if (ok) {
            break;
          }
        }
        state.tight = !hasEmptyLines;
        if (state.isEmpty(state.line - 1)) {
          hasEmptyLines = true;
        }
        line = state.line;
        if (line < endLine && state.isEmpty(line)) {
          hasEmptyLines = true;
          line++;
          if (line < endLine && state.parentType === "list" && state.isEmpty(line)) {
            break;
          }
          state.line = line;
        }
      }
    };
    var TABS_SCAN_RE = /[\n\t]/g;
    var NEWLINES_RE = /\r[\n\u0085]|[\u2424\u2028\u0085]/g;
    var SPACES_RE = /\u00a0/g;
    ParserBlock.prototype.parse = function(str2, options, env, outTokens) {
      var state, lineStart = 0, lastTabPos = 0;
      if (!str2) {
        return [];
      }
      str2 = str2.replace(SPACES_RE, " ");
      str2 = str2.replace(NEWLINES_RE, "\n");
      if (str2.indexOf("	") >= 0) {
        str2 = str2.replace(TABS_SCAN_RE, function(match, offset) {
          var result;
          if (str2.charCodeAt(offset) === 10) {
            lineStart = offset + 1;
            lastTabPos = 0;
            return match;
          }
          result = "    ".slice((offset - lineStart - lastTabPos) % 4);
          lastTabPos = offset - lineStart + 1;
          return result;
        });
      }
      state = new StateBlock(str2, this, options, env, outTokens);
      this.tokenize(state, state.line, state.lineMax);
    };
    function isTerminatorChar(ch) {
      switch (ch) {
        case 10:
        case 92:
        case 96:
        case 42:
        case 95:
        case 94:
        case 91:
        case 93:
        case 33:
        case 38:
        case 60:
        case 62:
        case 123:
        case 125:
        case 36:
        case 37:
        case 64:
        case 126:
        case 43:
        case 61:
        case 58:
          return true;
        default:
          return false;
      }
    }
    function text(state, silent) {
      var pos = state.pos;
      while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
        pos++;
      }
      if (pos === state.pos) {
        return false;
      }
      if (!silent) {
        state.pending += state.src.slice(state.pos, pos);
      }
      state.pos = pos;
      return true;
    }
    function newline(state, silent) {
      var pmax, max2, pos = state.pos;
      if (state.src.charCodeAt(pos) !== 10) {
        return false;
      }
      pmax = state.pending.length - 1;
      max2 = state.posMax;
      if (!silent) {
        if (pmax >= 0 && state.pending.charCodeAt(pmax) === 32) {
          if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 32) {
            for (var i2 = pmax - 2; i2 >= 0; i2--) {
              if (state.pending.charCodeAt(i2) !== 32) {
                state.pending = state.pending.substring(0, i2 + 1);
                break;
              }
            }
            state.push({
              type: "hardbreak",
              level: state.level
            });
          } else {
            state.pending = state.pending.slice(0, -1);
            state.push({
              type: "softbreak",
              level: state.level
            });
          }
        } else {
          state.push({
            type: "softbreak",
            level: state.level
          });
        }
      }
      pos++;
      while (pos < max2 && state.src.charCodeAt(pos) === 32) {
        pos++;
      }
      state.pos = pos;
      return true;
    }
    var ESCAPED = [];
    for (var i$1 = 0; i$1 < 256; i$1++) {
      ESCAPED.push(0);
    }
    "\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(ch) {
      ESCAPED[ch.charCodeAt(0)] = 1;
    });
    function escape(state, silent) {
      var ch, pos = state.pos, max2 = state.posMax;
      if (state.src.charCodeAt(pos) !== 92) {
        return false;
      }
      pos++;
      if (pos < max2) {
        ch = state.src.charCodeAt(pos);
        if (ch < 256 && ESCAPED[ch] !== 0) {
          if (!silent) {
            state.pending += state.src[pos];
          }
          state.pos += 2;
          return true;
        }
        if (ch === 10) {
          if (!silent) {
            state.push({
              type: "hardbreak",
              level: state.level
            });
          }
          pos++;
          while (pos < max2 && state.src.charCodeAt(pos) === 32) {
            pos++;
          }
          state.pos = pos;
          return true;
        }
      }
      if (!silent) {
        state.pending += "\\";
      }
      state.pos++;
      return true;
    }
    function backticks(state, silent) {
      var start2, max2, marker, matchStart, matchEnd, pos = state.pos, ch = state.src.charCodeAt(pos);
      if (ch !== 96) {
        return false;
      }
      start2 = pos;
      pos++;
      max2 = state.posMax;
      while (pos < max2 && state.src.charCodeAt(pos) === 96) {
        pos++;
      }
      marker = state.src.slice(start2, pos);
      matchStart = matchEnd = pos;
      while ((matchStart = state.src.indexOf("`", matchEnd)) !== -1) {
        matchEnd = matchStart + 1;
        while (matchEnd < max2 && state.src.charCodeAt(matchEnd) === 96) {
          matchEnd++;
        }
        if (matchEnd - matchStart === marker.length) {
          if (!silent) {
            state.push({
              type: "code",
              content: state.src.slice(pos, matchStart).replace(/[ \n]+/g, " ").trim(),
              block: false,
              level: state.level
            });
          }
          state.pos = matchEnd;
          return true;
        }
      }
      if (!silent) {
        state.pending += marker;
      }
      state.pos += marker.length;
      return true;
    }
    function del(state, silent) {
      var found, pos, stack, max2 = state.posMax, start2 = state.pos, lastChar, nextChar;
      if (state.src.charCodeAt(start2) !== 126) {
        return false;
      }
      if (silent) {
        return false;
      }
      if (start2 + 4 >= max2) {
        return false;
      }
      if (state.src.charCodeAt(start2 + 1) !== 126) {
        return false;
      }
      if (state.level >= state.options.maxNesting) {
        return false;
      }
      lastChar = start2 > 0 ? state.src.charCodeAt(start2 - 1) : -1;
      nextChar = state.src.charCodeAt(start2 + 2);
      if (lastChar === 126) {
        return false;
      }
      if (nextChar === 126) {
        return false;
      }
      if (nextChar === 32 || nextChar === 10) {
        return false;
      }
      pos = start2 + 2;
      while (pos < max2 && state.src.charCodeAt(pos) === 126) {
        pos++;
      }
      if (pos > start2 + 3) {
        state.pos += pos - start2;
        if (!silent) {
          state.pending += state.src.slice(start2, pos);
        }
        return true;
      }
      state.pos = start2 + 2;
      stack = 1;
      while (state.pos + 1 < max2) {
        if (state.src.charCodeAt(state.pos) === 126) {
          if (state.src.charCodeAt(state.pos + 1) === 126) {
            lastChar = state.src.charCodeAt(state.pos - 1);
            nextChar = state.pos + 2 < max2 ? state.src.charCodeAt(state.pos + 2) : -1;
            if (nextChar !== 126 && lastChar !== 126) {
              if (lastChar !== 32 && lastChar !== 10) {
                stack--;
              } else if (nextChar !== 32 && nextChar !== 10) {
                stack++;
              }
              if (stack <= 0) {
                found = true;
                break;
              }
            }
          }
        }
        state.parser.skipToken(state);
      }
      if (!found) {
        state.pos = start2;
        return false;
      }
      state.posMax = state.pos;
      state.pos = start2 + 2;
      if (!silent) {
        state.push({
          type: "del_open",
          level: state.level++
        });
        state.parser.tokenize(state);
        state.push({
          type: "del_close",
          level: --state.level
        });
      }
      state.pos = state.posMax + 2;
      state.posMax = max2;
      return true;
    }
    function ins(state, silent) {
      var found, pos, stack, max2 = state.posMax, start2 = state.pos, lastChar, nextChar;
      if (state.src.charCodeAt(start2) !== 43) {
        return false;
      }
      if (silent) {
        return false;
      }
      if (start2 + 4 >= max2) {
        return false;
      }
      if (state.src.charCodeAt(start2 + 1) !== 43) {
        return false;
      }
      if (state.level >= state.options.maxNesting) {
        return false;
      }
      lastChar = start2 > 0 ? state.src.charCodeAt(start2 - 1) : -1;
      nextChar = state.src.charCodeAt(start2 + 2);
      if (lastChar === 43) {
        return false;
      }
      if (nextChar === 43) {
        return false;
      }
      if (nextChar === 32 || nextChar === 10) {
        return false;
      }
      pos = start2 + 2;
      while (pos < max2 && state.src.charCodeAt(pos) === 43) {
        pos++;
      }
      if (pos !== start2 + 2) {
        state.pos += pos - start2;
        if (!silent) {
          state.pending += state.src.slice(start2, pos);
        }
        return true;
      }
      state.pos = start2 + 2;
      stack = 1;
      while (state.pos + 1 < max2) {
        if (state.src.charCodeAt(state.pos) === 43) {
          if (state.src.charCodeAt(state.pos + 1) === 43) {
            lastChar = state.src.charCodeAt(state.pos - 1);
            nextChar = state.pos + 2 < max2 ? state.src.charCodeAt(state.pos + 2) : -1;
            if (nextChar !== 43 && lastChar !== 43) {
              if (lastChar !== 32 && lastChar !== 10) {
                stack--;
              } else if (nextChar !== 32 && nextChar !== 10) {
                stack++;
              }
              if (stack <= 0) {
                found = true;
                break;
              }
            }
          }
        }
        state.parser.skipToken(state);
      }
      if (!found) {
        state.pos = start2;
        return false;
      }
      state.posMax = state.pos;
      state.pos = start2 + 2;
      if (!silent) {
        state.push({
          type: "ins_open",
          level: state.level++
        });
        state.parser.tokenize(state);
        state.push({
          type: "ins_close",
          level: --state.level
        });
      }
      state.pos = state.posMax + 2;
      state.posMax = max2;
      return true;
    }
    function mark(state, silent) {
      var found, pos, stack, max2 = state.posMax, start2 = state.pos, lastChar, nextChar;
      if (state.src.charCodeAt(start2) !== 61) {
        return false;
      }
      if (silent) {
        return false;
      }
      if (start2 + 4 >= max2) {
        return false;
      }
      if (state.src.charCodeAt(start2 + 1) !== 61) {
        return false;
      }
      if (state.level >= state.options.maxNesting) {
        return false;
      }
      lastChar = start2 > 0 ? state.src.charCodeAt(start2 - 1) : -1;
      nextChar = state.src.charCodeAt(start2 + 2);
      if (lastChar === 61) {
        return false;
      }
      if (nextChar === 61) {
        return false;
      }
      if (nextChar === 32 || nextChar === 10) {
        return false;
      }
      pos = start2 + 2;
      while (pos < max2 && state.src.charCodeAt(pos) === 61) {
        pos++;
      }
      if (pos !== start2 + 2) {
        state.pos += pos - start2;
        if (!silent) {
          state.pending += state.src.slice(start2, pos);
        }
        return true;
      }
      state.pos = start2 + 2;
      stack = 1;
      while (state.pos + 1 < max2) {
        if (state.src.charCodeAt(state.pos) === 61) {
          if (state.src.charCodeAt(state.pos + 1) === 61) {
            lastChar = state.src.charCodeAt(state.pos - 1);
            nextChar = state.pos + 2 < max2 ? state.src.charCodeAt(state.pos + 2) : -1;
            if (nextChar !== 61 && lastChar !== 61) {
              if (lastChar !== 32 && lastChar !== 10) {
                stack--;
              } else if (nextChar !== 32 && nextChar !== 10) {
                stack++;
              }
              if (stack <= 0) {
                found = true;
                break;
              }
            }
          }
        }
        state.parser.skipToken(state);
      }
      if (!found) {
        state.pos = start2;
        return false;
      }
      state.posMax = state.pos;
      state.pos = start2 + 2;
      if (!silent) {
        state.push({
          type: "mark_open",
          level: state.level++
        });
        state.parser.tokenize(state);
        state.push({
          type: "mark_close",
          level: --state.level
        });
      }
      state.pos = state.posMax + 2;
      state.posMax = max2;
      return true;
    }
    function isAlphaNum(code2) {
      return code2 >= 48 && code2 <= 57 || code2 >= 65 && code2 <= 90 || code2 >= 97 && code2 <= 122;
    }
    function scanDelims(state, start2) {
      var pos = start2, lastChar, nextChar, count2, can_open = true, can_close = true, max2 = state.posMax, marker = state.src.charCodeAt(start2);
      lastChar = start2 > 0 ? state.src.charCodeAt(start2 - 1) : -1;
      while (pos < max2 && state.src.charCodeAt(pos) === marker) {
        pos++;
      }
      if (pos >= max2) {
        can_open = false;
      }
      count2 = pos - start2;
      if (count2 >= 4) {
        can_open = can_close = false;
      } else {
        nextChar = pos < max2 ? state.src.charCodeAt(pos) : -1;
        if (nextChar === 32 || nextChar === 10) {
          can_open = false;
        }
        if (lastChar === 32 || lastChar === 10) {
          can_close = false;
        }
        if (marker === 95) {
          if (isAlphaNum(lastChar)) {
            can_open = false;
          }
          if (isAlphaNum(nextChar)) {
            can_close = false;
          }
        }
      }
      return {
        can_open,
        can_close,
        delims: count2
      };
    }
    function emphasis(state, silent) {
      var startCount, count2, found, oldCount, newCount, stack, res, max2 = state.posMax, start2 = state.pos, marker = state.src.charCodeAt(start2);
      if (marker !== 95 && marker !== 42) {
        return false;
      }
      if (silent) {
        return false;
      }
      res = scanDelims(state, start2);
      startCount = res.delims;
      if (!res.can_open) {
        state.pos += startCount;
        if (!silent) {
          state.pending += state.src.slice(start2, state.pos);
        }
        return true;
      }
      if (state.level >= state.options.maxNesting) {
        return false;
      }
      state.pos = start2 + startCount;
      stack = [startCount];
      while (state.pos < max2) {
        if (state.src.charCodeAt(state.pos) === marker) {
          res = scanDelims(state, state.pos);
          count2 = res.delims;
          if (res.can_close) {
            oldCount = stack.pop();
            newCount = count2;
            while (oldCount !== newCount) {
              if (newCount < oldCount) {
                stack.push(oldCount - newCount);
                break;
              }
              newCount -= oldCount;
              if (stack.length === 0) {
                break;
              }
              state.pos += oldCount;
              oldCount = stack.pop();
            }
            if (stack.length === 0) {
              startCount = oldCount;
              found = true;
              break;
            }
            state.pos += count2;
            continue;
          }
          if (res.can_open) {
            stack.push(count2);
          }
          state.pos += count2;
          continue;
        }
        state.parser.skipToken(state);
      }
      if (!found) {
        state.pos = start2;
        return false;
      }
      state.posMax = state.pos;
      state.pos = start2 + startCount;
      if (!silent) {
        if (startCount === 2 || startCount === 3) {
          state.push({
            type: "strong_open",
            level: state.level++
          });
        }
        if (startCount === 1 || startCount === 3) {
          state.push({
            type: "em_open",
            level: state.level++
          });
        }
        state.parser.tokenize(state);
        if (startCount === 1 || startCount === 3) {
          state.push({
            type: "em_close",
            level: --state.level
          });
        }
        if (startCount === 2 || startCount === 3) {
          state.push({
            type: "strong_close",
            level: --state.level
          });
        }
      }
      state.pos = state.posMax + startCount;
      state.posMax = max2;
      return true;
    }
    var UNESCAPE_RE = /\\([ \\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g;
    function sub(state, silent) {
      var found, content, max2 = state.posMax, start2 = state.pos;
      if (state.src.charCodeAt(start2) !== 126) {
        return false;
      }
      if (silent) {
        return false;
      }
      if (start2 + 2 >= max2) {
        return false;
      }
      if (state.level >= state.options.maxNesting) {
        return false;
      }
      state.pos = start2 + 1;
      while (state.pos < max2) {
        if (state.src.charCodeAt(state.pos) === 126) {
          found = true;
          break;
        }
        state.parser.skipToken(state);
      }
      if (!found || start2 + 1 === state.pos) {
        state.pos = start2;
        return false;
      }
      content = state.src.slice(start2 + 1, state.pos);
      if (content.match(/(^|[^\\])(\\\\)*\s/)) {
        state.pos = start2;
        return false;
      }
      state.posMax = state.pos;
      state.pos = start2 + 1;
      if (!silent) {
        state.push({
          type: "sub",
          level: state.level,
          content: content.replace(UNESCAPE_RE, "$1")
        });
      }
      state.pos = state.posMax + 1;
      state.posMax = max2;
      return true;
    }
    var UNESCAPE_RE$1 = /\\([ \\!"#$%&'()*+,.\/:;<=>?@[\]^_`{|}~-])/g;
    function sup(state, silent) {
      var found, content, max2 = state.posMax, start2 = state.pos;
      if (state.src.charCodeAt(start2) !== 94) {
        return false;
      }
      if (silent) {
        return false;
      }
      if (start2 + 2 >= max2) {
        return false;
      }
      if (state.level >= state.options.maxNesting) {
        return false;
      }
      state.pos = start2 + 1;
      while (state.pos < max2) {
        if (state.src.charCodeAt(state.pos) === 94) {
          found = true;
          break;
        }
        state.parser.skipToken(state);
      }
      if (!found || start2 + 1 === state.pos) {
        state.pos = start2;
        return false;
      }
      content = state.src.slice(start2 + 1, state.pos);
      if (content.match(/(^|[^\\])(\\\\)*\s/)) {
        state.pos = start2;
        return false;
      }
      state.posMax = state.pos;
      state.pos = start2 + 1;
      if (!silent) {
        state.push({
          type: "sup",
          level: state.level,
          content: content.replace(UNESCAPE_RE$1, "$1")
        });
      }
      state.pos = state.posMax + 1;
      state.posMax = max2;
      return true;
    }
    function links(state, silent) {
      var labelStart, labelEnd, label, href, title, pos, ref, code2, isImage = false, oldPos = state.pos, max2 = state.posMax, start2 = state.pos, marker = state.src.charCodeAt(start2);
      if (marker === 33) {
        isImage = true;
        marker = state.src.charCodeAt(++start2);
      }
      if (marker !== 91) {
        return false;
      }
      if (state.level >= state.options.maxNesting) {
        return false;
      }
      labelStart = start2 + 1;
      labelEnd = parseLinkLabel(state, start2);
      if (labelEnd < 0) {
        return false;
      }
      pos = labelEnd + 1;
      if (pos < max2 && state.src.charCodeAt(pos) === 40) {
        pos++;
        for (; pos < max2; pos++) {
          code2 = state.src.charCodeAt(pos);
          if (code2 !== 32 && code2 !== 10) {
            break;
          }
        }
        if (pos >= max2) {
          return false;
        }
        start2 = pos;
        if (parseLinkDestination(state, pos)) {
          href = state.linkContent;
          pos = state.pos;
        } else {
          href = "";
        }
        start2 = pos;
        for (; pos < max2; pos++) {
          code2 = state.src.charCodeAt(pos);
          if (code2 !== 32 && code2 !== 10) {
            break;
          }
        }
        if (pos < max2 && start2 !== pos && parseLinkTitle(state, pos)) {
          title = state.linkContent;
          pos = state.pos;
          for (; pos < max2; pos++) {
            code2 = state.src.charCodeAt(pos);
            if (code2 !== 32 && code2 !== 10) {
              break;
            }
          }
        } else {
          title = "";
        }
        if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {
          state.pos = oldPos;
          return false;
        }
        pos++;
      } else {
        if (state.linkLevel > 0) {
          return false;
        }
        for (; pos < max2; pos++) {
          code2 = state.src.charCodeAt(pos);
          if (code2 !== 32 && code2 !== 10) {
            break;
          }
        }
        if (pos < max2 && state.src.charCodeAt(pos) === 91) {
          start2 = pos + 1;
          pos = parseLinkLabel(state, pos);
          if (pos >= 0) {
            label = state.src.slice(start2, pos++);
          } else {
            pos = start2 - 1;
          }
        }
        if (!label) {
          if (typeof label === "undefined") {
            pos = labelEnd + 1;
          }
          label = state.src.slice(labelStart, labelEnd);
        }
        ref = state.env.references[normalizeReference(label)];
        if (!ref) {
          state.pos = oldPos;
          return false;
        }
        href = ref.href;
        title = ref.title;
      }
      if (!silent) {
        state.pos = labelStart;
        state.posMax = labelEnd;
        if (isImage) {
          state.push({
            type: "image",
            src: href,
            title,
            alt: state.src.substr(labelStart, labelEnd - labelStart),
            level: state.level
          });
        } else {
          state.push({
            type: "link_open",
            href,
            title,
            level: state.level++
          });
          state.linkLevel++;
          state.parser.tokenize(state);
          state.linkLevel--;
          state.push({
            type: "link_close",
            level: --state.level
          });
        }
      }
      state.pos = pos;
      state.posMax = max2;
      return true;
    }
    function footnote_inline(state, silent) {
      var labelStart, labelEnd, footnoteId, oldLength, max2 = state.posMax, start2 = state.pos;
      if (start2 + 2 >= max2) {
        return false;
      }
      if (state.src.charCodeAt(start2) !== 94) {
        return false;
      }
      if (state.src.charCodeAt(start2 + 1) !== 91) {
        return false;
      }
      if (state.level >= state.options.maxNesting) {
        return false;
      }
      labelStart = start2 + 2;
      labelEnd = parseLinkLabel(state, start2 + 1);
      if (labelEnd < 0) {
        return false;
      }
      if (!silent) {
        if (!state.env.footnotes) {
          state.env.footnotes = {};
        }
        if (!state.env.footnotes.list) {
          state.env.footnotes.list = [];
        }
        footnoteId = state.env.footnotes.list.length;
        state.pos = labelStart;
        state.posMax = labelEnd;
        state.push({
          type: "footnote_ref",
          id: footnoteId,
          level: state.level
        });
        state.linkLevel++;
        oldLength = state.tokens.length;
        state.parser.tokenize(state);
        state.env.footnotes.list[footnoteId] = {
          tokens: state.tokens.splice(oldLength)
        };
        state.linkLevel--;
      }
      state.pos = labelEnd + 1;
      state.posMax = max2;
      return true;
    }
    function footnote_ref(state, silent) {
      var label, pos, footnoteId, footnoteSubId, max2 = state.posMax, start2 = state.pos;
      if (start2 + 3 > max2) {
        return false;
      }
      if (!state.env.footnotes || !state.env.footnotes.refs) {
        return false;
      }
      if (state.src.charCodeAt(start2) !== 91) {
        return false;
      }
      if (state.src.charCodeAt(start2 + 1) !== 94) {
        return false;
      }
      if (state.level >= state.options.maxNesting) {
        return false;
      }
      for (pos = start2 + 2; pos < max2; pos++) {
        if (state.src.charCodeAt(pos) === 32) {
          return false;
        }
        if (state.src.charCodeAt(pos) === 10) {
          return false;
        }
        if (state.src.charCodeAt(pos) === 93) {
          break;
        }
      }
      if (pos === start2 + 2) {
        return false;
      }
      if (pos >= max2) {
        return false;
      }
      pos++;
      label = state.src.slice(start2 + 2, pos - 1);
      if (typeof state.env.footnotes.refs[":" + label] === "undefined") {
        return false;
      }
      if (!silent) {
        if (!state.env.footnotes.list) {
          state.env.footnotes.list = [];
        }
        if (state.env.footnotes.refs[":" + label] < 0) {
          footnoteId = state.env.footnotes.list.length;
          state.env.footnotes.list[footnoteId] = {
            label,
            count: 0
          };
          state.env.footnotes.refs[":" + label] = footnoteId;
        } else {
          footnoteId = state.env.footnotes.refs[":" + label];
        }
        footnoteSubId = state.env.footnotes.list[footnoteId].count;
        state.env.footnotes.list[footnoteId].count++;
        state.push({
          type: "footnote_ref",
          id: footnoteId,
          subId: footnoteSubId,
          level: state.level
        });
      }
      state.pos = pos;
      state.posMax = max2;
      return true;
    }
    var url_schemas = ["coap", "doi", "javascript", "aaa", "aaas", "about", "acap", "cap", "cid", "crid", "data", "dav", "dict", "dns", "file", "ftp", "geo", "go", "gopher", "h323", "http", "https", "iax", "icap", "im", "imap", "info", "ipp", "iris", "iris.beep", "iris.xpc", "iris.xpcs", "iris.lwz", "ldap", "mailto", "mid", "msrp", "msrps", "mtqp", "mupdate", "news", "nfs", "ni", "nih", "nntp", "opaquelocktoken", "pop", "pres", "rtsp", "service", "session", "shttp", "sieve", "sip", "sips", "sms", "snmp", "soap.beep", "soap.beeps", "tag", "tel", "telnet", "tftp", "thismessage", "tn3270", "tip", "tv", "urn", "vemmi", "ws", "wss", "xcon", "xcon-userid", "xmlrpc.beep", "xmlrpc.beeps", "xmpp", "z39.50r", "z39.50s", "adiumxtra", "afp", "afs", "aim", "apt", "attachment", "aw", "beshare", "bitcoin", "bolo", "callto", "chrome", "chrome-extension", "com-eventbrite-attendee", "content", "cvs", "dlna-playsingle", "dlna-playcontainer", "dtn", "dvb", "ed2k", "facetime", "feed", "finger", "fish", "gg", "git", "gizmoproject", "gtalk", "hcp", "icon", "ipn", "irc", "irc6", "ircs", "itms", "jar", "jms", "keyparc", "lastfm", "ldaps", "magnet", "maps", "market", "message", "mms", "ms-help", "msnim", "mumble", "mvn", "notes", "oid", "palm", "paparazzi", "platform", "proxy", "psyc", "query", "res", "resource", "rmi", "rsync", "rtmp", "secondlife", "sftp", "sgn", "skype", "smb", "soldat", "spotify", "ssh", "steam", "svn", "teamspeak", "things", "udp", "unreal", "ut2004", "ventrilo", "view-source", "webcal", "wtai", "wyciwyg", "xfire", "xri", "ymsgr"];
    var EMAIL_RE = /^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;
    var AUTOLINK_RE = /^<([a-zA-Z.\-]{1,25}):([^<>\x00-\x20]*)>/;
    function autolink(state, silent) {
      var tail, linkMatch, emailMatch, url, fullUrl, pos = state.pos;
      if (state.src.charCodeAt(pos) !== 60) {
        return false;
      }
      tail = state.src.slice(pos);
      if (tail.indexOf(">") < 0) {
        return false;
      }
      linkMatch = tail.match(AUTOLINK_RE);
      if (linkMatch) {
        if (url_schemas.indexOf(linkMatch[1].toLowerCase()) < 0) {
          return false;
        }
        url = linkMatch[0].slice(1, -1);
        fullUrl = normalizeLink(url);
        if (!state.parser.validateLink(url)) {
          return false;
        }
        if (!silent) {
          state.push({
            type: "link_open",
            href: fullUrl,
            level: state.level
          });
          state.push({
            type: "text",
            content: url,
            level: state.level + 1
          });
          state.push({
            type: "link_close",
            level: state.level
          });
        }
        state.pos += linkMatch[0].length;
        return true;
      }
      emailMatch = tail.match(EMAIL_RE);
      if (emailMatch) {
        url = emailMatch[0].slice(1, -1);
        fullUrl = normalizeLink("mailto:" + url);
        if (!state.parser.validateLink(fullUrl)) {
          return false;
        }
        if (!silent) {
          state.push({
            type: "link_open",
            href: fullUrl,
            level: state.level
          });
          state.push({
            type: "text",
            content: url,
            level: state.level + 1
          });
          state.push({
            type: "link_close",
            level: state.level
          });
        }
        state.pos += emailMatch[0].length;
        return true;
      }
      return false;
    }
    function replace$1(regex, options) {
      regex = regex.source;
      options = options || "";
      return function self2(name3, val) {
        if (!name3) {
          return new RegExp(regex, options);
        }
        val = val.source || val;
        regex = regex.replace(name3, val);
        return self2;
      };
    }
    var attr_name = /[a-zA-Z_:][a-zA-Z0-9:._-]*/;
    var unquoted = /[^"'=<>`\x00-\x20]+/;
    var single_quoted = /'[^']*'/;
    var double_quoted = /"[^"]*"/;
    var attr_value = replace$1(/(?:unquoted|single_quoted|double_quoted)/)("unquoted", unquoted)("single_quoted", single_quoted)("double_quoted", double_quoted)();
    var attribute = replace$1(/(?:\s+attr_name(?:\s*=\s*attr_value)?)/)("attr_name", attr_name)("attr_value", attr_value)();
    var open_tag = replace$1(/<[A-Za-z][A-Za-z0-9]*attribute*\s*\/?>/)("attribute", attribute)();
    var close_tag = /<\/[A-Za-z][A-Za-z0-9]*\s*>/;
    var comment = /<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->/;
    var processing = /<[?].*?[?]>/;
    var declaration = /<![A-Z]+\s+[^>]*>/;
    var cdata = /<!\[CDATA\[[\s\S]*?\]\]>/;
    var HTML_TAG_RE = replace$1(/^(?:open_tag|close_tag|comment|processing|declaration|cdata)/)("open_tag", open_tag)("close_tag", close_tag)("comment", comment)("processing", processing)("declaration", declaration)("cdata", cdata)();
    function isLetter$2(ch) {
      var lc = ch | 32;
      return lc >= 97 && lc <= 122;
    }
    function htmltag(state, silent) {
      var ch, match, max2, pos = state.pos;
      if (!state.options.html) {
        return false;
      }
      max2 = state.posMax;
      if (state.src.charCodeAt(pos) !== 60 || pos + 2 >= max2) {
        return false;
      }
      ch = state.src.charCodeAt(pos + 1);
      if (ch !== 33 && ch !== 63 && ch !== 47 && !isLetter$2(ch)) {
        return false;
      }
      match = state.src.slice(pos).match(HTML_TAG_RE);
      if (!match) {
        return false;
      }
      if (!silent) {
        state.push({
          type: "htmltag",
          content: state.src.slice(pos, pos + match[0].length),
          level: state.level
        });
      }
      state.pos += match[0].length;
      return true;
    }
    var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,8}|[0-9]{1,8}));/i;
    var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;
    function entity(state, silent) {
      var ch, code2, match, pos = state.pos, max2 = state.posMax;
      if (state.src.charCodeAt(pos) !== 38) {
        return false;
      }
      if (pos + 1 < max2) {
        ch = state.src.charCodeAt(pos + 1);
        if (ch === 35) {
          match = state.src.slice(pos).match(DIGITAL_RE);
          if (match) {
            if (!silent) {
              code2 = match[1][0].toLowerCase() === "x" ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
              state.pending += isValidEntityCode(code2) ? fromCodePoint(code2) : fromCodePoint(65533);
            }
            state.pos += match[0].length;
            return true;
          }
        } else {
          match = state.src.slice(pos).match(NAMED_RE);
          if (match) {
            var decoded = decodeEntity(match[1]);
            if (match[1] !== decoded) {
              if (!silent) {
                state.pending += decoded;
              }
              state.pos += match[0].length;
              return true;
            }
          }
        }
      }
      if (!silent) {
        state.pending += "&";
      }
      state.pos++;
      return true;
    }
    var _rules$2 = [["text", text], ["newline", newline], ["escape", escape], ["backticks", backticks], ["del", del], ["ins", ins], ["mark", mark], ["emphasis", emphasis], ["sub", sub], ["sup", sup], ["links", links], ["footnote_inline", footnote_inline], ["footnote_ref", footnote_ref], ["autolink", autolink], ["htmltag", htmltag], ["entity", entity]];
    function ParserInline() {
      this.ruler = new Ruler();
      for (var i2 = 0; i2 < _rules$2.length; i2++) {
        this.ruler.push(_rules$2[i2][0], _rules$2[i2][1]);
      }
      this.validateLink = validateLink;
    }
    ParserInline.prototype.skipToken = function(state) {
      var rules2 = this.ruler.getRules("");
      var len = rules2.length;
      var pos = state.pos;
      var i2, cached_pos;
      if ((cached_pos = state.cacheGet(pos)) > 0) {
        state.pos = cached_pos;
        return;
      }
      for (i2 = 0; i2 < len; i2++) {
        if (rules2[i2](state, true)) {
          state.cacheSet(pos, state.pos);
          return;
        }
      }
      state.pos++;
      state.cacheSet(pos, state.pos);
    };
    ParserInline.prototype.tokenize = function(state) {
      var rules2 = this.ruler.getRules("");
      var len = rules2.length;
      var end = state.posMax;
      var ok, i2;
      while (state.pos < end) {
        for (i2 = 0; i2 < len; i2++) {
          ok = rules2[i2](state, false);
          if (ok) {
            break;
          }
        }
        if (ok) {
          if (state.pos >= end) {
            break;
          }
          continue;
        }
        state.pending += state.src[state.pos++];
      }
      if (state.pending) {
        state.pushPending();
      }
    };
    ParserInline.prototype.parse = function(str2, options, env, outTokens) {
      var state = new StateInline(str2, this, options, env, outTokens);
      this.tokenize(state);
    };
    function validateLink(url) {
      var BAD_PROTOCOLS = ["vbscript", "javascript", "file", "data"];
      var str2 = url.trim().toLowerCase();
      str2 = replaceEntities(str2);
      if (str2.indexOf(":") !== -1 && BAD_PROTOCOLS.indexOf(str2.split(":")[0]) !== -1) {
        return false;
      }
      return true;
    }
    var defaultConfig = {
      options: {
        html: false,
        // Enable HTML tags in source
        xhtmlOut: false,
        // Use '/' to close single tags (<br />)
        breaks: false,
        // Convert '\n' in paragraphs into <br>
        langPrefix: "language-",
        // CSS language prefix for fenced blocks
        linkTarget: "",
        // set target to open link in
        // Enable some language-neutral replacements + quotes beautification
        typographer: false,
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.
        quotes: "“”‘’",
        // Highlighter function. Should return escaped HTML,
        // or '' if input not changed
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
        maxNesting: 20
        // Internal protection, recursion limit
      },
      components: {
        core: {
          rules: ["block", "inline", "references", "replacements", "smartquotes", "references", "abbr2", "footnote_tail"]
        },
        block: {
          rules: ["blockquote", "code", "fences", "footnote", "heading", "hr", "htmlblock", "lheading", "list", "paragraph", "table"]
        },
        inline: {
          rules: ["autolink", "backticks", "del", "emphasis", "entity", "escape", "footnote_ref", "htmltag", "links", "newline", "text"]
        }
      }
    };
    var fullConfig = {
      options: {
        html: false,
        // Enable HTML tags in source
        xhtmlOut: false,
        // Use '/' to close single tags (<br />)
        breaks: false,
        // Convert '\n' in paragraphs into <br>
        langPrefix: "language-",
        // CSS language prefix for fenced blocks
        linkTarget: "",
        // set target to open link in
        // Enable some language-neutral replacements + quotes beautification
        typographer: false,
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.
        quotes: "“”‘’",
        // Highlighter function. Should return escaped HTML,
        // or '' if input not changed
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
        maxNesting: 20
        // Internal protection, recursion limit
      },
      components: {
        // Don't restrict core/block/inline rules
        core: {},
        block: {},
        inline: {}
      }
    };
    var commonmarkConfig = {
      options: {
        html: true,
        // Enable HTML tags in source
        xhtmlOut: true,
        // Use '/' to close single tags (<br />)
        breaks: false,
        // Convert '\n' in paragraphs into <br>
        langPrefix: "language-",
        // CSS language prefix for fenced blocks
        linkTarget: "",
        // set target to open link in
        // Enable some language-neutral replacements + quotes beautification
        typographer: false,
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.
        quotes: "“”‘’",
        // Highlighter function. Should return escaped HTML,
        // or '' if input not changed
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
        maxNesting: 20
        // Internal protection, recursion limit
      },
      components: {
        core: {
          rules: ["block", "inline", "references", "abbr2"]
        },
        block: {
          rules: ["blockquote", "code", "fences", "heading", "hr", "htmlblock", "lheading", "list", "paragraph"]
        },
        inline: {
          rules: ["autolink", "backticks", "emphasis", "entity", "escape", "htmltag", "links", "newline", "text"]
        }
      }
    };
    var config$2 = {
      "default": defaultConfig,
      "full": fullConfig,
      "commonmark": commonmarkConfig
    };
    function StateCore(instance, str2, env) {
      this.src = str2;
      this.env = env;
      this.options = instance.options;
      this.tokens = [];
      this.inlineMode = false;
      this.inline = instance.inline;
      this.block = instance.block;
      this.renderer = instance.renderer;
      this.typographer = instance.typographer;
    }
    function Remarkable(preset, options) {
      if (typeof preset !== "string") {
        options = preset;
        preset = "default";
      }
      if (options && options.linkify != null) {
        console.warn("linkify option is removed. Use linkify plugin instead:\n\nimport Remarkable from 'remarkable';\nimport linkify from 'remarkable/linkify';\nnew Remarkable().use(linkify)\n");
      }
      this.inline = new ParserInline();
      this.block = new ParserBlock();
      this.core = new Core();
      this.renderer = new Renderer();
      this.ruler = new Ruler();
      this.options = {};
      this.configure(config$2[preset]);
      this.set(options || {});
    }
    Remarkable.prototype.set = function(options) {
      assign(this.options, options);
    };
    Remarkable.prototype.configure = function(presets) {
      var self2 = this;
      if (!presets) {
        throw new Error("Wrong `remarkable` preset, check name/content");
      }
      if (presets.options) {
        self2.set(presets.options);
      }
      if (presets.components) {
        Object.keys(presets.components).forEach(function(name3) {
          if (presets.components[name3].rules) {
            self2[name3].ruler.enable(presets.components[name3].rules, true);
          }
        });
      }
    };
    Remarkable.prototype.use = function(plugin, options) {
      plugin(this, options);
      return this;
    };
    Remarkable.prototype.parse = function(str2, env) {
      var state = new StateCore(this, str2, env);
      this.core.process(state);
      return state.tokens;
    };
    Remarkable.prototype.render = function(str2, env) {
      env = env || {};
      return this.renderer.render(this.parse(str2, env), this.options, env);
    };
    Remarkable.prototype.parseInline = function(str2, env) {
      var state = new StateCore(this, str2, env);
      state.inlineMode = true;
      this.core.process(state);
      return state.tokens;
    };
    Remarkable.prototype.renderInline = function(str2, env) {
      env = env || {};
      return this.renderer.render(this.parseInline(str2, env), this.options, env);
    };
    const rkatex = (md, options) => {
      const backslash = "\\";
      const dollar = "$";
      const opts = options || {};
      const delimiter = opts.delimiter || dollar;
      if (delimiter.length !== 1) {
        throw new Error("invalid delimiter");
      }
      const katex3 = require$$0__default;
      const renderKatex = (source, displayMode) => katex3.renderToString(source, {
        displayMode,
        throwOnError: false
      });
      const parseBlockKatex = (state, startLine, endLine) => {
        let haveEndMarker = false;
        let pos = state.bMarks[startLine] + state.tShift[startLine];
        let max2 = state.eMarks[startLine];
        if (pos + 1 > max2) {
          return false;
        }
        const marker = state.src.charAt(pos);
        if (marker !== delimiter) {
          return false;
        }
        let mem = pos;
        pos = state.skipChars(pos, marker);
        let len = pos - mem;
        if (len !== 2) {
          return false;
        }
        let nextLine = startLine;
        for (; ; ) {
          ++nextLine;
          if (nextLine >= endLine) {
            break;
          }
          pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
          max2 = state.eMarks[nextLine];
          if (pos < max2 && state.tShift[nextLine] < state.blkIndent) {
            break;
          }
          if (state.src.charAt(pos) !== delimiter) {
            continue;
          }
          if (state.tShift[nextLine] - state.blkIndent >= 4) {
            continue;
          }
          pos = state.skipChars(pos, marker);
          if (pos - mem < len) {
            continue;
          }
          pos = state.skipSpaces(pos);
          if (pos < max2) {
            continue;
          }
          haveEndMarker = true;
          break;
        }
        len = state.tShift[startLine];
        state.line = nextLine + (haveEndMarker ? 1 : 0);
        const content = state.getLines(startLine + 1, nextLine, len, true).replace(/[ \n]+/g, " ").trim();
        state.tokens.push({
          type: "katex",
          params: null,
          content,
          lines: [startLine, state.line],
          level: state.level,
          block: true
        });
        return true;
      };
      const parseInlineKatex = (state, silent) => {
        const start2 = state.pos;
        const max2 = state.posMax;
        let pos = start2;
        if (state.src.charAt(pos) !== delimiter) {
          return false;
        }
        ++pos;
        while (pos < max2 && state.src.charAt(pos) === delimiter) {
          ++pos;
        }
        const marker = state.src.slice(start2, pos);
        if (marker.length > 2) {
          return false;
        }
        const spanStart = pos;
        let escapedDepth = 0;
        while (pos < max2) {
          const char = state.src.charAt(pos);
          if (char === "{" && (pos == 0 || state.src.charAt(pos - 1) != backslash)) {
            escapedDepth += 1;
          } else if (char === "}" && (pos == 0 || state.src.charAt(pos - 1) != backslash)) {
            escapedDepth -= 1;
            if (escapedDepth < 0) {
              return false;
            }
          } else if (char === delimiter && escapedDepth === 0) {
            const matchStart = pos;
            let matchEnd = pos + 1;
            while (matchEnd < max2 && state.src.charAt(matchEnd) === delimiter) {
              ++matchEnd;
            }
            if (matchEnd - matchStart === marker.length) {
              if (!silent) {
                const content = state.src.slice(spanStart, matchStart).replace(/[ \n]+/g, " ").trim();
                state.push({
                  type: "katex",
                  content,
                  block: marker.length > 1,
                  level: state.level
                });
              }
              state.pos = matchEnd;
              return true;
            }
          }
          pos += 1;
        }
        if (!silent) {
          state.pending += marker;
        }
        state.pos += marker.length;
        return true;
      };
      md.inline.ruler.push("katex", parseInlineKatex, options);
      md.block.ruler.push("katex", parseBlockKatex, options);
      md.renderer.rules.katex = (tokens, idx) => renderKatex(tokens[idx].content, tokens[idx].block);
      md.renderer.rules.katex.delimiter = delimiter;
    };
    var remarkableKatex = rkatex;
    var config$1 = {
      versions: {
        katex: "0.16.0",
        webfontloader: "1.6.28"
      },
      preloadScripts: [{
        type: "script",
        data: {
          src: `https://cdn.jsdelivr.net/npm/katex@${"0.16.0"}/dist/katex.min.js`
        }
      }],
      scripts: [{
        type: "iife",
        data: {
          fn: (getMarkmap) => {
            window.WebFontConfig = {
              custom: {
                families: ["KaTeX_AMS", "KaTeX_Caligraphic:n4,n7", "KaTeX_Fraktur:n4,n7", "KaTeX_Main:n4,n7,i4,i7", "KaTeX_Math:i4,i7", "KaTeX_Script", "KaTeX_SansSerif:n4,n7,i4", "KaTeX_Size1", "KaTeX_Size2", "KaTeX_Size3", "KaTeX_Size4", "KaTeX_Typewriter"]
              },
              active: () => {
                getMarkmap().refreshHook.call();
              }
            };
          },
          getParams({
            getMarkmap
          }) {
            return [getMarkmap];
          }
        }
      }, {
        type: "script",
        data: {
          src: `https://cdn.jsdelivr.net/npm/webfontloader@${"1.6.28"}/webfontloader.js`,
          defer: true
        }
      }],
      styles: [{
        type: "stylesheet",
        data: {
          href: `https://cdn.jsdelivr.net/npm/katex@${"0.16.0"}/dist/katex.min.css`
        }
      }]
    };
    const npmPrefix = "https://cdn.jsdelivr.net/npm/";
    function resolveNpmPaths(paths, name3, version2) {
      return paths.map((path2) => {
        if (typeof path2 === "string") {
          if (path2.startsWith(`${name3}/`)) {
            path2 = `${npmPrefix}${name3}@${version2}${path2.slice(name3.length)}`;
          } else if (path2.startsWith(`${name3}@`)) {
            path2 = `${npmPrefix}${path2}`;
          }
        }
        return path2;
      });
    }
    function createTransformHooks() {
      return {
        parser: new Hook2(),
        beforeParse: new Hook2(),
        afterParse: new Hook2(),
        htmltag: new Hook2(),
        retransform: new Hook2()
      };
    }
    function definePlugin(plugin) {
      return plugin;
    }
    let loading$1;
    const autoload$1 = () => {
      loading$1 || (loading$1 = loadJS(config$1.preloadScripts));
      return loading$1;
    };
    const name$2 = "katex";
    var katex2 = definePlugin({
      name: name$2,
      config: config$1,
      transform(transformHooks) {
        const renderKatex = (source, displayMode) => {
          const {
            katex: katex3
          } = window;
          if (katex3) {
            return katex3.renderToString(source, {
              displayMode,
              throwOnError: false
            });
          }
          autoload$1().then(() => {
            transformHooks.retransform.call();
          });
          return source;
        };
        let enableFeature = () => {
        };
        transformHooks.parser.tap((md) => {
          md.use(remarkableKatex);
          md.renderer.rules.katex = (tokens, idx) => {
            enableFeature();
            const result = renderKatex(tokens[idx].content, tokens[idx].block);
            return result;
          };
        });
        transformHooks.beforeParse.tap((_, context) => {
          enableFeature = () => {
            context.features[name$2] = true;
          };
        });
        transformHooks.afterParse.tap((_, context) => {
          const {
            frontmatter: frontmatter2
          } = context;
          if (frontmatter2 != null && frontmatter2.markmap) {
            ["extraJs", "extraCss"].forEach((key) => {
              if (frontmatter2.markmap[key]) {
                frontmatter2.markmap[key] = resolveNpmPaths(frontmatter2.markmap[key], name$2, config$1.versions.katex);
              }
            });
          }
        });
        return {
          styles: config$1.styles,
          scripts: config$1.scripts
        };
      }
    });
    var config = {
      versions: {
        prismjs: "1.28.0"
      },
      preloadScripts: [{
        type: "script",
        data: {
          src: `https://cdn.jsdelivr.net/npm/prismjs@${"1.28.0"}/components/prism-core.min.js`
        }
      }, {
        type: "script",
        data: {
          src: `https://cdn.jsdelivr.net/npm/prismjs@${"1.28.0"}/plugins/autoloader/prism-autoloader.min.js`
        }
      }],
      styles: [{
        type: "stylesheet",
        data: {
          href: `https://cdn.jsdelivr.net/npm/prismjs@${"1.28.0"}/themes/prism.css`
        }
      }]
    };
    let loading;
    const autoload = () => {
      loading || (loading = loadJS(config.preloadScripts));
      return loading;
    };
    function loadLanguageAndRefresh(lang, transformHooks) {
      autoload().then(() => {
        window.Prism.plugins.autoloader.loadLanguages([lang], () => {
          transformHooks.retransform.call();
        });
      });
    }
    const name$1 = "prism";
    var prism = definePlugin({
      name: name$1,
      config,
      transform(transformHooks) {
        let enableFeature = () => {
        };
        transformHooks.parser.tap((md) => {
          md.set({
            highlight: (str2, lang) => {
              var _Prism$languages;
              enableFeature();
              const {
                Prism
              } = window;
              const grammar = Prism == null ? void 0 : (_Prism$languages = Prism.languages) == null ? void 0 : _Prism$languages[lang];
              if (!grammar) {
                loadLanguageAndRefresh(lang, transformHooks);
                return "";
              }
              return Prism.highlight(str2, grammar, lang);
            }
          });
        });
        transformHooks.beforeParse.tap((_, context) => {
          enableFeature = () => {
            context.features[name$1] = true;
          };
        });
        return {
          styles: config.styles
        };
      }
    });
    /*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */
    function isNothing(subject) {
      return typeof subject === "undefined" || subject === null;
    }
    function isObject(subject) {
      return typeof subject === "object" && subject !== null;
    }
    function toArray(sequence) {
      if (Array.isArray(sequence))
        return sequence;
      else if (isNothing(sequence))
        return [];
      return [sequence];
    }
    function extend2(target, source) {
      var index, length, key, sourceKeys;
      if (source) {
        sourceKeys = Object.keys(source);
        for (index = 0, length = sourceKeys.length; index < length; index += 1) {
          key = sourceKeys[index];
          target[key] = source[key];
        }
      }
      return target;
    }
    function repeat(string, count2) {
      var result = "", cycle;
      for (cycle = 0; cycle < count2; cycle += 1) {
        result += string;
      }
      return result;
    }
    function isNegativeZero(number) {
      return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
    }
    var isNothing_1 = isNothing;
    var isObject_1 = isObject;
    var toArray_1 = toArray;
    var repeat_1 = repeat;
    var isNegativeZero_1 = isNegativeZero;
    var extend_1 = extend2;
    var common = {
      isNothing: isNothing_1,
      isObject: isObject_1,
      toArray: toArray_1,
      repeat: repeat_1,
      isNegativeZero: isNegativeZero_1,
      extend: extend_1
    };
    function formatError(exception2, compact) {
      var where = "", message = exception2.reason || "(unknown reason)";
      if (!exception2.mark)
        return message;
      if (exception2.mark.name) {
        where += 'in "' + exception2.mark.name + '" ';
      }
      where += "(" + (exception2.mark.line + 1) + ":" + (exception2.mark.column + 1) + ")";
      if (!compact && exception2.mark.snippet) {
        where += "\n\n" + exception2.mark.snippet;
      }
      return message + " " + where;
    }
    function YAMLException$1(reason, mark2) {
      Error.call(this);
      this.name = "YAMLException";
      this.reason = reason;
      this.mark = mark2;
      this.message = formatError(this, false);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack || "";
      }
    }
    YAMLException$1.prototype = Object.create(Error.prototype);
    YAMLException$1.prototype.constructor = YAMLException$1;
    YAMLException$1.prototype.toString = function toString(compact) {
      return this.name + ": " + formatError(this, compact);
    };
    var exception = YAMLException$1;
    function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
      var head = "";
      var tail = "";
      var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
      if (position - lineStart > maxHalfLength) {
        head = " ... ";
        lineStart = position - maxHalfLength + head.length;
      }
      if (lineEnd - position > maxHalfLength) {
        tail = " ...";
        lineEnd = position + maxHalfLength - tail.length;
      }
      return {
        str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "→") + tail,
        pos: position - lineStart + head.length
        // relative position
      };
    }
    function padStart(string, max2) {
      return common.repeat(" ", max2 - string.length) + string;
    }
    function makeSnippet(mark2, options) {
      options = Object.create(options || null);
      if (!mark2.buffer)
        return null;
      if (!options.maxLength)
        options.maxLength = 79;
      if (typeof options.indent !== "number")
        options.indent = 1;
      if (typeof options.linesBefore !== "number")
        options.linesBefore = 3;
      if (typeof options.linesAfter !== "number")
        options.linesAfter = 2;
      var re = /\r?\n|\r|\0/g;
      var lineStarts = [0];
      var lineEnds = [];
      var match;
      var foundLineNo = -1;
      while (match = re.exec(mark2.buffer)) {
        lineEnds.push(match.index);
        lineStarts.push(match.index + match[0].length);
        if (mark2.position <= match.index && foundLineNo < 0) {
          foundLineNo = lineStarts.length - 2;
        }
      }
      if (foundLineNo < 0)
        foundLineNo = lineStarts.length - 1;
      var result = "", i2, line;
      var lineNoLength = Math.min(mark2.line + options.linesAfter, lineEnds.length).toString().length;
      var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
      for (i2 = 1; i2 <= options.linesBefore; i2++) {
        if (foundLineNo - i2 < 0)
          break;
        line = getLine(mark2.buffer, lineStarts[foundLineNo - i2], lineEnds[foundLineNo - i2], mark2.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i2]), maxLineLength);
        result = common.repeat(" ", options.indent) + padStart((mark2.line - i2 + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
      }
      line = getLine(mark2.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark2.position, maxLineLength);
      result += common.repeat(" ", options.indent) + padStart((mark2.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
      for (i2 = 1; i2 <= options.linesAfter; i2++) {
        if (foundLineNo + i2 >= lineEnds.length)
          break;
        line = getLine(mark2.buffer, lineStarts[foundLineNo + i2], lineEnds[foundLineNo + i2], mark2.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i2]), maxLineLength);
        result += common.repeat(" ", options.indent) + padStart((mark2.line + i2 + 1).toString(), lineNoLength) + " | " + line.str + "\n";
      }
      return result.replace(/\n$/, "");
    }
    var snippet = makeSnippet;
    var TYPE_CONSTRUCTOR_OPTIONS = ["kind", "multi", "resolve", "construct", "instanceOf", "predicate", "represent", "representName", "defaultStyle", "styleAliases"];
    var YAML_NODE_KINDS = ["scalar", "sequence", "mapping"];
    function compileStyleAliases(map2) {
      var result = {};
      if (map2 !== null) {
        Object.keys(map2).forEach(function(style) {
          map2[style].forEach(function(alias) {
            result[String(alias)] = style;
          });
        });
      }
      return result;
    }
    function Type$1(tag, options) {
      options = options || {};
      Object.keys(options).forEach(function(name3) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name3) === -1) {
          throw new exception('Unknown option "' + name3 + '" is met in definition of "' + tag + '" YAML type.');
        }
      });
      this.options = options;
      this.tag = tag;
      this.kind = options["kind"] || null;
      this.resolve = options["resolve"] || function() {
        return true;
      };
      this.construct = options["construct"] || function(data) {
        return data;
      };
      this.instanceOf = options["instanceOf"] || null;
      this.predicate = options["predicate"] || null;
      this.represent = options["represent"] || null;
      this.representName = options["representName"] || null;
      this.defaultStyle = options["defaultStyle"] || null;
      this.multi = options["multi"] || false;
      this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
      if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
        throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
      }
    }
    var type = Type$1;
    function compileList(schema2, name3) {
      var result = [];
      schema2[name3].forEach(function(currentType) {
        var newIndex = result.length;
        result.forEach(function(previousType, previousIndex) {
          if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
            newIndex = previousIndex;
          }
        });
        result[newIndex] = currentType;
      });
      return result;
    }
    function compileMap() {
      var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {},
        multi: {
          scalar: [],
          sequence: [],
          mapping: [],
          fallback: []
        }
      }, index, length;
      function collectType(type2) {
        if (type2.multi) {
          result.multi[type2.kind].push(type2);
          result.multi["fallback"].push(type2);
        } else {
          result[type2.kind][type2.tag] = result["fallback"][type2.tag] = type2;
        }
      }
      for (index = 0, length = arguments.length; index < length; index += 1) {
        arguments[index].forEach(collectType);
      }
      return result;
    }
    function Schema$1(definition) {
      return this.extend(definition);
    }
    Schema$1.prototype.extend = function extend3(definition) {
      var implicit2 = [];
      var explicit = [];
      if (definition instanceof type) {
        explicit.push(definition);
      } else if (Array.isArray(definition)) {
        explicit = explicit.concat(definition);
      } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
        if (definition.implicit)
          implicit2 = implicit2.concat(definition.implicit);
        if (definition.explicit)
          explicit = explicit.concat(definition.explicit);
      } else {
        throw new exception("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
      }
      implicit2.forEach(function(type$1) {
        if (!(type$1 instanceof type)) {
          throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
        if (type$1.loadKind && type$1.loadKind !== "scalar") {
          throw new exception("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
        }
        if (type$1.multi) {
          throw new exception("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
        }
      });
      explicit.forEach(function(type$1) {
        if (!(type$1 instanceof type)) {
          throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
      });
      var result = Object.create(Schema$1.prototype);
      result.implicit = (this.implicit || []).concat(implicit2);
      result.explicit = (this.explicit || []).concat(explicit);
      result.compiledImplicit = compileList(result, "implicit");
      result.compiledExplicit = compileList(result, "explicit");
      result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
      return result;
    };
    var schema = Schema$1;
    var str = new type("tag:yaml.org,2002:str", {
      kind: "scalar",
      construct: function(data) {
        return data !== null ? data : "";
      }
    });
    var seq = new type("tag:yaml.org,2002:seq", {
      kind: "sequence",
      construct: function(data) {
        return data !== null ? data : [];
      }
    });
    var map = new type("tag:yaml.org,2002:map", {
      kind: "mapping",
      construct: function(data) {
        return data !== null ? data : {};
      }
    });
    var failsafe = new schema({
      explicit: [str, seq, map]
    });
    function resolveYamlNull(data) {
      if (data === null)
        return true;
      var max2 = data.length;
      return max2 === 1 && data === "~" || max2 === 4 && (data === "null" || data === "Null" || data === "NULL");
    }
    function constructYamlNull() {
      return null;
    }
    function isNull(object) {
      return object === null;
    }
    var _null = new type("tag:yaml.org,2002:null", {
      kind: "scalar",
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function() {
          return "~";
        },
        lowercase: function() {
          return "null";
        },
        uppercase: function() {
          return "NULL";
        },
        camelcase: function() {
          return "Null";
        },
        empty: function() {
          return "";
        }
      },
      defaultStyle: "lowercase"
    });
    function resolveYamlBoolean(data) {
      if (data === null)
        return false;
      var max2 = data.length;
      return max2 === 4 && (data === "true" || data === "True" || data === "TRUE") || max2 === 5 && (data === "false" || data === "False" || data === "FALSE");
    }
    function constructYamlBoolean(data) {
      return data === "true" || data === "True" || data === "TRUE";
    }
    function isBoolean(object) {
      return Object.prototype.toString.call(object) === "[object Boolean]";
    }
    var bool = new type("tag:yaml.org,2002:bool", {
      kind: "scalar",
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function(object) {
          return object ? "true" : "false";
        },
        uppercase: function(object) {
          return object ? "TRUE" : "FALSE";
        },
        camelcase: function(object) {
          return object ? "True" : "False";
        }
      },
      defaultStyle: "lowercase"
    });
    function isHexCode(c) {
      return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
    }
    function isOctCode(c) {
      return 48 <= c && c <= 55;
    }
    function isDecCode(c) {
      return 48 <= c && c <= 57;
    }
    function resolveYamlInteger(data) {
      if (data === null)
        return false;
      var max2 = data.length, index = 0, hasDigits = false, ch;
      if (!max2)
        return false;
      ch = data[index];
      if (ch === "-" || ch === "+") {
        ch = data[++index];
      }
      if (ch === "0") {
        if (index + 1 === max2)
          return true;
        ch = data[++index];
        if (ch === "b") {
          index++;
          for (; index < max2; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (ch !== "0" && ch !== "1")
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "x") {
          index++;
          for (; index < max2; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (!isHexCode(data.charCodeAt(index)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "o") {
          index++;
          for (; index < max2; index++) {
            ch = data[index];
            if (ch === "_")
              continue;
            if (!isOctCode(data.charCodeAt(index)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
      }
      if (ch === "_")
        return false;
      for (; index < max2; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isDecCode(data.charCodeAt(index))) {
          return false;
        }
        hasDigits = true;
      }
      if (!hasDigits || ch === "_")
        return false;
      return true;
    }
    function constructYamlInteger(data) {
      var value = data, sign = 1, ch;
      if (value.indexOf("_") !== -1) {
        value = value.replace(/_/g, "");
      }
      ch = value[0];
      if (ch === "-" || ch === "+") {
        if (ch === "-")
          sign = -1;
        value = value.slice(1);
        ch = value[0];
      }
      if (value === "0")
        return 0;
      if (ch === "0") {
        if (value[1] === "b")
          return sign * parseInt(value.slice(2), 2);
        if (value[1] === "x")
          return sign * parseInt(value.slice(2), 16);
        if (value[1] === "o")
          return sign * parseInt(value.slice(2), 8);
      }
      return sign * parseInt(value, 10);
    }
    function isInteger(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && object % 1 === 0 && !common.isNegativeZero(object);
    }
    var int = new type("tag:yaml.org,2002:int", {
      kind: "scalar",
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary: function(obj) {
          return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
        },
        octal: function(obj) {
          return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
          return obj.toString(10);
        },
        /* eslint-disable max-len */
        hexadecimal: function(obj) {
          return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: "decimal",
      styleAliases: {
        binary: [2, "bin"],
        octal: [8, "oct"],
        decimal: [10, "dec"],
        hexadecimal: [16, "hex"]
      }
    });
    var YAML_FLOAT_PATTERN = new RegExp(
      // 2.5e4, 2.5 and integers
      "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
    );
    function resolveYamlFloat(data) {
      if (data === null)
        return false;
      if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === "_") {
        return false;
      }
      return true;
    }
    function constructYamlFloat(data) {
      var value, sign;
      value = data.replace(/_/g, "").toLowerCase();
      sign = value[0] === "-" ? -1 : 1;
      if ("+-".indexOf(value[0]) >= 0) {
        value = value.slice(1);
      }
      if (value === ".inf") {
        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
      } else if (value === ".nan") {
        return NaN;
      }
      return sign * parseFloat(value, 10);
    }
    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
    function representYamlFloat(object, style) {
      var res;
      if (isNaN(object)) {
        switch (style) {
          case "lowercase":
            return ".nan";
          case "uppercase":
            return ".NAN";
          case "camelcase":
            return ".NaN";
        }
      } else if (Number.POSITIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return ".inf";
          case "uppercase":
            return ".INF";
          case "camelcase":
            return ".Inf";
        }
      } else if (Number.NEGATIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return "-.inf";
          case "uppercase":
            return "-.INF";
          case "camelcase":
            return "-.Inf";
        }
      } else if (common.isNegativeZero(object)) {
        return "-0.0";
      }
      res = object.toString(10);
      return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
    }
    function isFloat(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
    }
    var float = new type("tag:yaml.org,2002:float", {
      kind: "scalar",
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: "lowercase"
    });
    var json = failsafe.extend({
      implicit: [_null, bool, int, float]
    });
    var core = json;
    var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$");
    var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
    function resolveYamlTimestamp(data) {
      if (data === null)
        return false;
      if (YAML_DATE_REGEXP.exec(data) !== null)
        return true;
      if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
        return true;
      return false;
    }
    function constructYamlTimestamp(data) {
      var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
      match = YAML_DATE_REGEXP.exec(data);
      if (match === null)
        match = YAML_TIMESTAMP_REGEXP.exec(data);
      if (match === null)
        throw new Error("Date resolve error");
      year = +match[1];
      month = +match[2] - 1;
      day = +match[3];
      if (!match[4]) {
        return new Date(Date.UTC(year, month, day));
      }
      hour = +match[4];
      minute = +match[5];
      second = +match[6];
      if (match[7]) {
        fraction = match[7].slice(0, 3);
        while (fraction.length < 3) {
          fraction += "0";
        }
        fraction = +fraction;
      }
      if (match[9]) {
        tz_hour = +match[10];
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 6e4;
        if (match[9] === "-")
          delta = -delta;
      }
      date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
      if (delta)
        date.setTime(date.getTime() - delta);
      return date;
    }
    function representYamlTimestamp(object) {
      return object.toISOString();
    }
    var timestamp = new type("tag:yaml.org,2002:timestamp", {
      kind: "scalar",
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
    function resolveYamlMerge(data) {
      return data === "<<" || data === null;
    }
    var merge = new type("tag:yaml.org,2002:merge", {
      kind: "scalar",
      resolve: resolveYamlMerge
    });
    var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
    function resolveYamlBinary(data) {
      if (data === null)
        return false;
      var code2, idx, bitlen = 0, max2 = data.length, map2 = BASE64_MAP;
      for (idx = 0; idx < max2; idx++) {
        code2 = map2.indexOf(data.charAt(idx));
        if (code2 > 64)
          continue;
        if (code2 < 0)
          return false;
        bitlen += 6;
      }
      return bitlen % 8 === 0;
    }
    function constructYamlBinary(data) {
      var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max2 = input.length, map2 = BASE64_MAP, bits = 0, result = [];
      for (idx = 0; idx < max2; idx++) {
        if (idx % 4 === 0 && idx) {
          result.push(bits >> 16 & 255);
          result.push(bits >> 8 & 255);
          result.push(bits & 255);
        }
        bits = bits << 6 | map2.indexOf(input.charAt(idx));
      }
      tailbits = max2 % 4 * 6;
      if (tailbits === 0) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      } else if (tailbits === 18) {
        result.push(bits >> 10 & 255);
        result.push(bits >> 2 & 255);
      } else if (tailbits === 12) {
        result.push(bits >> 4 & 255);
      }
      return new Uint8Array(result);
    }
    function representYamlBinary(object) {
      var result = "", bits = 0, idx, tail, max2 = object.length, map2 = BASE64_MAP;
      for (idx = 0; idx < max2; idx++) {
        if (idx % 3 === 0 && idx) {
          result += map2[bits >> 18 & 63];
          result += map2[bits >> 12 & 63];
          result += map2[bits >> 6 & 63];
          result += map2[bits & 63];
        }
        bits = (bits << 8) + object[idx];
      }
      tail = max2 % 3;
      if (tail === 0) {
        result += map2[bits >> 18 & 63];
        result += map2[bits >> 12 & 63];
        result += map2[bits >> 6 & 63];
        result += map2[bits & 63];
      } else if (tail === 2) {
        result += map2[bits >> 10 & 63];
        result += map2[bits >> 4 & 63];
        result += map2[bits << 2 & 63];
        result += map2[64];
      } else if (tail === 1) {
        result += map2[bits >> 2 & 63];
        result += map2[bits << 4 & 63];
        result += map2[64];
        result += map2[64];
      }
      return result;
    }
    function isBinary(obj) {
      return Object.prototype.toString.call(obj) === "[object Uint8Array]";
    }
    var binary = new type("tag:yaml.org,2002:binary", {
      kind: "scalar",
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
    var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
    var _toString$2 = Object.prototype.toString;
    function resolveYamlOmap(data) {
      if (data === null)
        return true;
      var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        pairHasKey = false;
        if (_toString$2.call(pair) !== "[object Object]")
          return false;
        for (pairKey in pair) {
          if (_hasOwnProperty$3.call(pair, pairKey)) {
            if (!pairHasKey)
              pairHasKey = true;
            else
              return false;
          }
        }
        if (!pairHasKey)
          return false;
        if (objectKeys.indexOf(pairKey) === -1)
          objectKeys.push(pairKey);
        else
          return false;
      }
      return true;
    }
    function constructYamlOmap(data) {
      return data !== null ? data : [];
    }
    var omap = new type("tag:yaml.org,2002:omap", {
      kind: "sequence",
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
    var _toString$1 = Object.prototype.toString;
    function resolveYamlPairs(data) {
      if (data === null)
        return true;
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        if (_toString$1.call(pair) !== "[object Object]")
          return false;
        keys = Object.keys(pair);
        if (keys.length !== 1)
          return false;
        result[index] = [keys[0], pair[keys[0]]];
      }
      return true;
    }
    function constructYamlPairs(data) {
      if (data === null)
        return [];
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        keys = Object.keys(pair);
        result[index] = [keys[0], pair[keys[0]]];
      }
      return result;
    }
    var pairs = new type("tag:yaml.org,2002:pairs", {
      kind: "sequence",
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
    var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    function resolveYamlSet(data) {
      if (data === null)
        return true;
      var key, object = data;
      for (key in object) {
        if (_hasOwnProperty$2.call(object, key)) {
          if (object[key] !== null)
            return false;
        }
      }
      return true;
    }
    function constructYamlSet(data) {
      return data !== null ? data : {};
    }
    var set2 = new type("tag:yaml.org,2002:set", {
      kind: "mapping",
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
    var _default = core.extend({
      implicit: [timestamp, merge],
      explicit: [binary, omap, pairs, set2]
    });
    var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    var CONTEXT_FLOW_IN = 1;
    var CONTEXT_FLOW_OUT = 2;
    var CONTEXT_BLOCK_IN = 3;
    var CONTEXT_BLOCK_OUT = 4;
    var CHOMPING_CLIP = 1;
    var CHOMPING_STRIP = 2;
    var CHOMPING_KEEP = 3;
    var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function is_EOL(c) {
      return c === 10 || c === 13;
    }
    function is_WHITE_SPACE(c) {
      return c === 9 || c === 32;
    }
    function is_WS_OR_EOL(c) {
      return c === 9 || c === 32 || c === 10 || c === 13;
    }
    function is_FLOW_INDICATOR(c) {
      return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
    }
    function fromHexCode(c) {
      var lc;
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      lc = c | 32;
      if (97 <= lc && lc <= 102) {
        return lc - 97 + 10;
      }
      return -1;
    }
    function escapedHexLen(c) {
      if (c === 120) {
        return 2;
      }
      if (c === 117) {
        return 4;
      }
      if (c === 85) {
        return 8;
      }
      return 0;
    }
    function fromDecimalCode(c) {
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      return -1;
    }
    function simpleEscapeSequence(c) {
      return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "" : c === 95 ? " " : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
    }
    function charFromCodepoint(c) {
      if (c <= 65535) {
        return String.fromCharCode(c);
      }
      return String.fromCharCode((c - 65536 >> 10) + 55296, (c - 65536 & 1023) + 56320);
    }
    var simpleEscapeCheck = new Array(256);
    var simpleEscapeMap = new Array(256);
    for (var i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }
    function State$1(input, options) {
      this.input = input;
      this.filename = options["filename"] || null;
      this.schema = options["schema"] || _default;
      this.onWarning = options["onWarning"] || null;
      this.legacy = options["legacy"] || false;
      this.json = options["json"] || false;
      this.listener = options["listener"] || null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.typeMap = this.schema.compiledTypeMap;
      this.length = input.length;
      this.position = 0;
      this.line = 0;
      this.lineStart = 0;
      this.lineIndent = 0;
      this.firstTabInLine = -1;
      this.documents = [];
    }
    function generateError(state, message) {
      var mark2 = {
        name: state.filename,
        buffer: state.input.slice(0, -1),
        // omit trailing \0
        position: state.position,
        line: state.line,
        column: state.position - state.lineStart
      };
      mark2.snippet = snippet(mark2);
      return new exception(message, mark2);
    }
    function throwError(state, message) {
      throw generateError(state, message);
    }
    function throwWarning(state, message) {
      if (state.onWarning) {
        state.onWarning.call(null, generateError(state, message));
      }
    }
    var directiveHandlers = {
      YAML: function handleYamlDirective(state, name3, args) {
        var match, major, minor;
        if (state.version !== null) {
          throwError(state, "duplication of %YAML directive");
        }
        if (args.length !== 1) {
          throwError(state, "YAML directive accepts exactly one argument");
        }
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match === null) {
          throwError(state, "ill-formed argument of the YAML directive");
        }
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (major !== 1) {
          throwError(state, "unacceptable YAML version of the document");
        }
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) {
          throwWarning(state, "unsupported YAML version of the document");
        }
      },
      TAG: function handleTagDirective(state, name3, args) {
        var handle, prefix;
        if (args.length !== 2) {
          throwError(state, "TAG directive accepts exactly two arguments");
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (_hasOwnProperty$1.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        try {
          prefix = decodeURIComponent(prefix);
        } catch (err) {
          throwError(state, "tag prefix is malformed: " + prefix);
        }
        state.tagMap[handle] = prefix;
      }
    };
    function captureSegment(state, start2, end, checkJson) {
      var _position, _length, _character, _result;
      if (start2 < end) {
        _result = state.input.slice(start2, end);
        if (checkJson) {
          for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
            _character = _result.charCodeAt(_position);
            if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
              throwError(state, "expected valid JSON character");
            }
          }
        } else if (PATTERN_NON_PRINTABLE.test(_result)) {
          throwError(state, "the stream contains non-printable characters");
        }
        state.result += _result;
      }
    }
    function mergeMappings(state, destination, source, overridableKeys) {
      var sourceKeys, key, index, quantity;
      if (!common.isObject(source)) {
        throwError(state, "cannot merge mappings; the provided source object is unacceptable");
      }
      sourceKeys = Object.keys(source);
      for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
        key = sourceKeys[index];
        if (!_hasOwnProperty$1.call(destination, key)) {
          destination[key] = source[key];
          overridableKeys[key] = true;
        }
      }
    }
    function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
      var index, quantity;
      if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);
        for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
          if (Array.isArray(keyNode[index])) {
            throwError(state, "nested arrays are not supported inside keys");
          }
          if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
            keyNode[index] = "[object Object]";
          }
        }
      }
      if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
        keyNode = "[object Object]";
      }
      keyNode = String(keyNode);
      if (_result === null) {
        _result = {};
      }
      if (keyTag === "tag:yaml.org,2002:merge") {
        if (Array.isArray(valueNode)) {
          for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
            mergeMappings(state, _result, valueNode[index], overridableKeys);
          }
        } else {
          mergeMappings(state, _result, valueNode, overridableKeys);
        }
      } else {
        if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
          state.line = startLine || state.line;
          state.lineStart = startLineStart || state.lineStart;
          state.position = startPos || state.position;
          throwError(state, "duplicated mapping key");
        }
        if (keyNode === "__proto__") {
          Object.defineProperty(_result, keyNode, {
            configurable: true,
            enumerable: true,
            writable: true,
            value: valueNode
          });
        } else {
          _result[keyNode] = valueNode;
        }
        delete overridableKeys[keyNode];
      }
      return _result;
    }
    function readLineBreak(state) {
      var ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 10) {
        state.position++;
      } else if (ch === 13) {
        state.position++;
        if (state.input.charCodeAt(state.position) === 10) {
          state.position++;
        }
      } else {
        throwError(state, "a line break is expected");
      }
      state.line += 1;
      state.lineStart = state.position;
      state.firstTabInLine = -1;
    }
    function skipSeparationSpace(state, allowComments, checkIndent) {
      var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          if (ch === 9 && state.firstTabInLine === -1) {
            state.firstTabInLine = state.position;
          }
          ch = state.input.charCodeAt(++state.position);
        }
        if (allowComments && ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 10 && ch !== 13 && ch !== 0);
        }
        if (is_EOL(ch)) {
          readLineBreak(state);
          ch = state.input.charCodeAt(state.position);
          lineBreaks++;
          state.lineIndent = 0;
          while (ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
        } else {
          break;
        }
      }
      if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
        throwWarning(state, "deficient indentation");
      }
      return lineBreaks;
    }
    function testDocumentSeparator(state) {
      var _position = state.position, ch;
      ch = state.input.charCodeAt(_position);
      if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
        _position += 3;
        ch = state.input.charCodeAt(_position);
        if (ch === 0 || is_WS_OR_EOL(ch)) {
          return true;
        }
      }
      return false;
    }
    function writeFoldedLines(state, count2) {
      if (count2 === 1) {
        state.result += " ";
      } else if (count2 > 1) {
        state.result += common.repeat("\n", count2 - 1);
      }
    }
    function readPlainScalar(state, nodeIndent, withinFlowCollection) {
      var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
      ch = state.input.charCodeAt(state.position);
      if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
        return false;
      }
      if (ch === 63 || ch === 45) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          return false;
        }
      }
      state.kind = "scalar";
      state.result = "";
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
      while (ch !== 0) {
        if (ch === 58) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            break;
          }
        } else if (ch === 35) {
          preceding = state.input.charCodeAt(state.position - 1);
          if (is_WS_OR_EOL(preceding)) {
            break;
          }
        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
          break;
        } else if (is_EOL(ch)) {
          _line = state.line;
          _lineStart = state.lineStart;
          _lineIndent = state.lineIndent;
          skipSeparationSpace(state, false, -1);
          if (state.lineIndent >= nodeIndent) {
            hasPendingContent = true;
            ch = state.input.charCodeAt(state.position);
            continue;
          } else {
            state.position = captureEnd;
            state.line = _line;
            state.lineStart = _lineStart;
            state.lineIndent = _lineIndent;
            break;
          }
        }
        if (hasPendingContent) {
          captureSegment(state, captureStart, captureEnd, false);
          writeFoldedLines(state, state.line - _line);
          captureStart = captureEnd = state.position;
          hasPendingContent = false;
        }
        if (!is_WHITE_SPACE(ch)) {
          captureEnd = state.position + 1;
        }
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment(state, captureStart, captureEnd, false);
      if (state.result) {
        return true;
      }
      state.kind = _kind;
      state.result = _result;
      return false;
    }
    function readSingleQuotedScalar(state, nodeIndent) {
      var ch, captureStart, captureEnd;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 39) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 39) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (ch === 39) {
            captureStart = state.position;
            state.position++;
            captureEnd = state.position;
          } else {
            return true;
          }
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a single quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a single quoted scalar");
    }
    function readDoubleQuotedScalar(state, nodeIndent) {
      var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 34) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 34) {
          captureSegment(state, captureStart, state.position, true);
          state.position++;
          return true;
        } else if (ch === 92) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (is_EOL(ch)) {
            skipSeparationSpace(state, false, nodeIndent);
          } else if (ch < 256 && simpleEscapeCheck[ch]) {
            state.result += simpleEscapeMap[ch];
            state.position++;
          } else if ((tmp = escapedHexLen(ch)) > 0) {
            hexLength = tmp;
            hexResult = 0;
            for (; hexLength > 0; hexLength--) {
              ch = state.input.charCodeAt(++state.position);
              if ((tmp = fromHexCode(ch)) >= 0) {
                hexResult = (hexResult << 4) + tmp;
              } else {
                throwError(state, "expected hexadecimal character");
              }
            }
            state.result += charFromCodepoint(hexResult);
            state.position++;
          } else {
            throwError(state, "unknown escape sequence");
          }
          captureStart = captureEnd = state.position;
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a double quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a double quoted scalar");
    }
    function readFlowCollection(state, nodeIndent) {
      var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 91) {
        terminator = 93;
        isMapping = false;
        _result = [];
      } else if (ch === 123) {
        terminator = 125;
        isMapping = true;
        _result = {};
      } else {
        return false;
      }
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(++state.position);
      while (ch !== 0) {
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === terminator) {
          state.position++;
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = isMapping ? "mapping" : "sequence";
          state.result = _result;
          return true;
        } else if (!readNext) {
          throwError(state, "missed comma between flow collection entries");
        } else if (ch === 44) {
          throwError(state, "expected the node content, but found ','");
        }
        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;
        if (ch === 63) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following)) {
            isPair = isExplicitPair = true;
            state.position++;
            skipSeparationSpace(state, true, nodeIndent);
          }
        }
        _line = state.line;
        _lineStart = state.lineStart;
        _pos = state.position;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if ((isExplicitPair || state.line === _line) && ch === 58) {
          isPair = true;
          ch = state.input.charCodeAt(++state.position);
          skipSeparationSpace(state, true, nodeIndent);
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          valueNode = state.result;
        }
        if (isMapping) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
        } else if (isPair) {
          _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
        } else {
          _result.push(keyNode);
        }
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === 44) {
          readNext = true;
          ch = state.input.charCodeAt(++state.position);
        } else {
          readNext = false;
        }
      }
      throwError(state, "unexpected end of the stream within a flow collection");
    }
    function readBlockScalar(state, nodeIndent) {
      var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 124) {
        folding = false;
      } else if (ch === 62) {
        folding = true;
      } else {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      while (ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
        if (ch === 43 || ch === 45) {
          if (CHOMPING_CLIP === chomping) {
            chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
          } else {
            throwError(state, "repeat of a chomping mode identifier");
          }
        } else if ((tmp = fromDecimalCode(ch)) >= 0) {
          if (tmp === 0) {
            throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
          } else if (!detectedIndent) {
            textIndent = nodeIndent + tmp - 1;
            detectedIndent = true;
          } else {
            throwError(state, "repeat of an indentation width identifier");
          }
        } else {
          break;
        }
      }
      if (is_WHITE_SPACE(ch)) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (is_WHITE_SPACE(ch));
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (!is_EOL(ch) && ch !== 0);
        }
      }
      while (ch !== 0) {
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);
        while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
        if (!detectedIndent && state.lineIndent > textIndent) {
          textIndent = state.lineIndent;
        }
        if (is_EOL(ch)) {
          emptyLines++;
          continue;
        }
        if (state.lineIndent < textIndent) {
          if (chomping === CHOMPING_KEEP) {
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (chomping === CHOMPING_CLIP) {
            if (didReadContent) {
              state.result += "\n";
            }
          }
          break;
        }
        if (folding) {
          if (is_WHITE_SPACE(ch)) {
            atMoreIndented = true;
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (atMoreIndented) {
            atMoreIndented = false;
            state.result += common.repeat("\n", emptyLines + 1);
          } else if (emptyLines === 0) {
            if (didReadContent) {
              state.result += " ";
            }
          } else {
            state.result += common.repeat("\n", emptyLines);
          }
        } else {
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        }
        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;
        while (!is_EOL(ch) && ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, state.position, false);
      }
      return true;
    }
    function readBlockSequence(state, nodeIndent) {
      var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
      if (state.firstTabInLine !== -1)
        return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError(state, "tab characters must not be used in indentation");
        }
        if (ch !== 45) {
          break;
        }
        following = state.input.charCodeAt(state.position + 1);
        if (!is_WS_OR_EOL(following)) {
          break;
        }
        detected = true;
        state.position++;
        if (skipSeparationSpace(state, true, -1)) {
          if (state.lineIndent <= nodeIndent) {
            _result.push(null);
            ch = state.input.charCodeAt(state.position);
            continue;
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        _result.push(state.result);
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a sequence entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "sequence";
        state.result = _result;
        return true;
      }
      return false;
    }
    function readBlockMapping(state, nodeIndent, flowIndent) {
      var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
      if (state.firstTabInLine !== -1)
        return false;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (!atExplicitKey && state.firstTabInLine !== -1) {
          state.position = state.firstTabInLine;
          throwError(state, "tab characters must not be used in indentation");
        }
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line;
        if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
          if (ch === 63) {
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = true;
            allowCompact = true;
          } else if (atExplicitKey) {
            atExplicitKey = false;
            allowCompact = true;
          } else {
            throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
          }
          state.position += 1;
          ch = following;
        } else {
          _keyLine = state.line;
          _keyLineStart = state.lineStart;
          _keyPos = state.position;
          if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
            break;
          }
          if (state.line === _line) {
            ch = state.input.charCodeAt(state.position);
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 58) {
              ch = state.input.charCodeAt(++state.position);
              if (!is_WS_OR_EOL(ch)) {
                throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
              }
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = false;
              allowCompact = false;
              keyTag = state.tag;
              keyNode = state.result;
            } else if (detected) {
              throwError(state, "can not read an implicit mapping pair; a colon is missed");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else if (detected) {
            throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        }
        if (state.line === _line || state.lineIndent > nodeIndent) {
          if (atExplicitKey) {
            _keyLine = state.line;
            _keyLineStart = state.lineStart;
            _keyPos = state.position;
          }
          if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
            if (atExplicitKey) {
              keyNode = state.result;
            } else {
              valueNode = state.result;
            }
          }
          if (!atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
        }
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a mapping entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "mapping";
        state.result = _result;
      }
      return detected;
    }
    function readTagProperty(state) {
      var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 33)
        return false;
      if (state.tag !== null) {
        throwError(state, "duplication of a tag property");
      }
      ch = state.input.charCodeAt(++state.position);
      if (ch === 60) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);
      } else if (ch === 33) {
        isNamed = true;
        tagHandle = "!!";
        ch = state.input.charCodeAt(++state.position);
      } else {
        tagHandle = "!";
      }
      _position = state.position;
      if (isVerbatim) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && ch !== 62);
        if (state.position < state.length) {
          tagName = state.input.slice(_position, state.position);
          ch = state.input.charCodeAt(++state.position);
        } else {
          throwError(state, "unexpected end of the stream within a verbatim tag");
        }
      } else {
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          if (ch === 33) {
            if (!isNamed) {
              tagHandle = state.input.slice(_position - 1, state.position + 1);
              if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                throwError(state, "named tag handle cannot contain such characters");
              }
              isNamed = true;
              _position = state.position + 1;
            } else {
              throwError(state, "tag suffix cannot contain exclamation marks");
            }
          }
          ch = state.input.charCodeAt(++state.position);
        }
        tagName = state.input.slice(_position, state.position);
        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
          throwError(state, "tag suffix cannot contain flow indicator characters");
        }
      }
      if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError(state, "tag name cannot contain such characters: " + tagName);
      }
      try {
        tagName = decodeURIComponent(tagName);
      } catch (err) {
        throwError(state, "tag name is malformed: " + tagName);
      }
      if (isVerbatim) {
        state.tag = tagName;
      } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;
      } else if (tagHandle === "!") {
        state.tag = "!" + tagName;
      } else if (tagHandle === "!!") {
        state.tag = "tag:yaml.org,2002:" + tagName;
      } else {
        throwError(state, 'undeclared tag handle "' + tagHandle + '"');
      }
      return true;
    }
    function readAnchorProperty(state) {
      var _position, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 38)
        return false;
      if (state.anchor !== null) {
        throwError(state, "duplication of an anchor property");
      }
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an anchor node must contain at least one character");
      }
      state.anchor = state.input.slice(_position, state.position);
      return true;
    }
    function readAlias(state) {
      var _position, alias, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 42)
        return false;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an alias node must contain at least one character");
      }
      alias = state.input.slice(_position, state.position);
      if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
        throwError(state, 'unidentified alias "' + alias + '"');
      }
      state.result = state.anchorMap[alias];
      skipSeparationSpace(state, true, -1);
      return true;
    }
    function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
      var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type2, flowIndent, blockIndent;
      if (state.listener !== null) {
        state.listener("open", state);
      }
      state.tag = null;
      state.anchor = null;
      state.kind = null;
      state.result = null;
      allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
      if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        }
      }
      if (indentStatus === 1) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          } else {
            allowBlockCollections = false;
          }
        }
      }
      if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
      }
      if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
          flowIndent = parentIndent;
        } else {
          flowIndent = parentIndent + 1;
        }
        blockIndent = state.position - state.lineStart;
        if (indentStatus === 1) {
          if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
            hasContent = true;
          } else {
            if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
              hasContent = true;
            } else if (readAlias(state)) {
              hasContent = true;
              if (state.tag !== null || state.anchor !== null) {
                throwError(state, "alias node should not have any properties");
              }
            } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
              hasContent = true;
              if (state.tag === null) {
                state.tag = "?";
              }
            }
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else if (indentStatus === 0) {
          hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
      }
      if (state.tag === null) {
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      } else if (state.tag === "?") {
        if (state.result !== null && state.kind !== "scalar") {
          throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
        }
        for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
          type2 = state.implicitTypes[typeIndex];
          if (type2.resolve(state.result)) {
            state.result = type2.construct(state.result);
            state.tag = type2.tag;
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
            break;
          }
        }
      } else if (state.tag !== "!") {
        if (_hasOwnProperty$1.call(state.typeMap[state.kind || "fallback"], state.tag)) {
          type2 = state.typeMap[state.kind || "fallback"][state.tag];
        } else {
          type2 = null;
          typeList = state.typeMap.multi[state.kind || "fallback"];
          for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
            if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
              type2 = typeList[typeIndex];
              break;
            }
          }
        }
        if (!type2) {
          throwError(state, "unknown tag !<" + state.tag + ">");
        }
        if (state.result !== null && type2.kind !== state.kind) {
          throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type2.kind + '", not "' + state.kind + '"');
        }
        if (!type2.resolve(state.result, state.tag)) {
          throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
        } else {
          state.result = type2.construct(state.result, state.tag);
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
        }
      }
      if (state.listener !== null) {
        state.listener("close", state);
      }
      return state.tag !== null || state.anchor !== null || hasContent;
    }
    function readDocument(state) {
      var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
      state.version = null;
      state.checkLineBreaks = state.legacy;
      state.tagMap = /* @__PURE__ */ Object.create(null);
      state.anchorMap = /* @__PURE__ */ Object.create(null);
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if (state.lineIndent > 0 || ch !== 37) {
          break;
        }
        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];
        if (directiveName.length < 1) {
          throwError(state, "directive name must not be less than one character in length");
        }
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 0 && !is_EOL(ch));
            break;
          }
          if (is_EOL(ch))
            break;
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveArgs.push(state.input.slice(_position, state.position));
        }
        if (ch !== 0)
          readLineBreak(state);
        if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
          directiveHandlers[directiveName](state, directiveName, directiveArgs);
        } else {
          throwWarning(state, 'unknown document directive "' + directiveName + '"');
        }
      }
      skipSeparationSpace(state, true, -1);
      if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      } else if (hasDirectives) {
        throwError(state, "directives end mark is expected");
      }
      composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
      skipSeparationSpace(state, true, -1);
      if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, "non-ASCII line breaks are interpreted as content");
      }
      state.documents.push(state.result);
      if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (state.input.charCodeAt(state.position) === 46) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        }
        return;
      }
      if (state.position < state.length - 1) {
        throwError(state, "end of the stream or a document separator is expected");
      } else {
        return;
      }
    }
    function loadDocuments(input, options) {
      input = String(input);
      options = options || {};
      if (input.length !== 0) {
        if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
          input += "\n";
        }
        if (input.charCodeAt(0) === 65279) {
          input = input.slice(1);
        }
      }
      var state = new State$1(input, options);
      var nullpos = input.indexOf("\0");
      if (nullpos !== -1) {
        state.position = nullpos;
        throwError(state, "null byte is not allowed in input");
      }
      state.input += "\0";
      while (state.input.charCodeAt(state.position) === 32) {
        state.lineIndent += 1;
        state.position += 1;
      }
      while (state.position < state.length - 1) {
        readDocument(state);
      }
      return state.documents;
    }
    function loadAll$1(input, iterator, options) {
      if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
        options = iterator;
        iterator = null;
      }
      var documents = loadDocuments(input, options);
      if (typeof iterator !== "function") {
        return documents;
      }
      for (var index = 0, length = documents.length; index < length; index += 1) {
        iterator(documents[index]);
      }
    }
    function load$1(input, options) {
      var documents = loadDocuments(input, options);
      if (documents.length === 0) {
        return void 0;
      } else if (documents.length === 1) {
        return documents[0];
      }
      throw new exception("expected a single document in the stream, but found more");
    }
    var loadAll_1 = loadAll$1;
    var load_1 = load$1;
    var loader = {
      loadAll: loadAll_1,
      load: load_1
    };
    var _toString = Object.prototype.toString;
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CHAR_BOM = 65279;
    var CHAR_TAB = 9;
    var CHAR_LINE_FEED = 10;
    var CHAR_CARRIAGE_RETURN = 13;
    var CHAR_SPACE = 32;
    var CHAR_EXCLAMATION = 33;
    var CHAR_DOUBLE_QUOTE = 34;
    var CHAR_SHARP = 35;
    var CHAR_PERCENT = 37;
    var CHAR_AMPERSAND = 38;
    var CHAR_SINGLE_QUOTE = 39;
    var CHAR_ASTERISK = 42;
    var CHAR_COMMA = 44;
    var CHAR_MINUS = 45;
    var CHAR_COLON = 58;
    var CHAR_EQUALS = 61;
    var CHAR_GREATER_THAN = 62;
    var CHAR_QUESTION = 63;
    var CHAR_COMMERCIAL_AT = 64;
    var CHAR_LEFT_SQUARE_BRACKET = 91;
    var CHAR_RIGHT_SQUARE_BRACKET = 93;
    var CHAR_GRAVE_ACCENT = 96;
    var CHAR_LEFT_CURLY_BRACKET = 123;
    var CHAR_VERTICAL_LINE = 124;
    var CHAR_RIGHT_CURLY_BRACKET = 125;
    var ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0] = "\\0";
    ESCAPE_SEQUENCES[7] = "\\a";
    ESCAPE_SEQUENCES[8] = "\\b";
    ESCAPE_SEQUENCES[9] = "\\t";
    ESCAPE_SEQUENCES[10] = "\\n";
    ESCAPE_SEQUENCES[11] = "\\v";
    ESCAPE_SEQUENCES[12] = "\\f";
    ESCAPE_SEQUENCES[13] = "\\r";
    ESCAPE_SEQUENCES[27] = "\\e";
    ESCAPE_SEQUENCES[34] = '\\"';
    ESCAPE_SEQUENCES[92] = "\\\\";
    ESCAPE_SEQUENCES[133] = "\\N";
    ESCAPE_SEQUENCES[160] = "\\_";
    ESCAPE_SEQUENCES[8232] = "\\L";
    ESCAPE_SEQUENCES[8233] = "\\P";
    var DEPRECATED_BOOLEANS_SYNTAX = ["y", "Y", "yes", "Yes", "YES", "on", "On", "ON", "n", "N", "no", "No", "NO", "off", "Off", "OFF"];
    var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
    function compileStyleMap(schema2, map2) {
      var result, keys, index, length, tag, style, type2;
      if (map2 === null)
        return {};
      result = {};
      keys = Object.keys(map2);
      for (index = 0, length = keys.length; index < length; index += 1) {
        tag = keys[index];
        style = String(map2[tag]);
        if (tag.slice(0, 2) === "!!") {
          tag = "tag:yaml.org,2002:" + tag.slice(2);
        }
        type2 = schema2.compiledTypeMap["fallback"][tag];
        if (type2 && _hasOwnProperty.call(type2.styleAliases, style)) {
          style = type2.styleAliases[style];
        }
        result[tag] = style;
      }
      return result;
    }
    function encodeHex(character) {
      var string, handle, length;
      string = character.toString(16).toUpperCase();
      if (character <= 255) {
        handle = "x";
        length = 2;
      } else if (character <= 65535) {
        handle = "u";
        length = 4;
      } else if (character <= 4294967295) {
        handle = "U";
        length = 8;
      } else {
        throw new exception("code point within a string may not be greater than 0xFFFFFFFF");
      }
      return "\\" + handle + common.repeat("0", length - string.length) + string;
    }
    var QUOTING_TYPE_SINGLE = 1, QUOTING_TYPE_DOUBLE = 2;
    function State(options) {
      this.schema = options["schema"] || _default;
      this.indent = Math.max(1, options["indent"] || 2);
      this.noArrayIndent = options["noArrayIndent"] || false;
      this.skipInvalid = options["skipInvalid"] || false;
      this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
      this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
      this.sortKeys = options["sortKeys"] || false;
      this.lineWidth = options["lineWidth"] || 80;
      this.noRefs = options["noRefs"] || false;
      this.noCompatMode = options["noCompatMode"] || false;
      this.condenseFlow = options["condenseFlow"] || false;
      this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
      this.forceQuotes = options["forceQuotes"] || false;
      this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.explicitTypes = this.schema.compiledExplicit;
      this.tag = null;
      this.result = "";
      this.duplicates = [];
      this.usedDuplicates = null;
    }
    function indentString(string, spaces) {
      var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
      while (position < length) {
        next = string.indexOf("\n", position);
        if (next === -1) {
          line = string.slice(position);
          position = length;
        } else {
          line = string.slice(position, next + 1);
          position = next + 1;
        }
        if (line.length && line !== "\n")
          result += ind;
        result += line;
      }
      return result;
    }
    function generateNextLine(state, level) {
      return "\n" + common.repeat(" ", state.indent * level);
    }
    function testImplicitResolving(state, str2) {
      var index, length, type2;
      for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
        type2 = state.implicitTypes[index];
        if (type2.resolve(str2)) {
          return true;
        }
      }
      return false;
    }
    function isWhitespace(c) {
      return c === CHAR_SPACE || c === CHAR_TAB;
    }
    function isPrintable(c) {
      return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
    }
    function isNsCharOrWhitespace(c) {
      return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
    }
    function isPlainSafe(c, prev, inblock) {
      var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
      var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
      return (
        // ns-plain-safe
        (inblock ? (
          // c = flow-in
          cIsNsCharOrWhitespace
        ) : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar
      );
    }
    function isPlainSafeFirst(c) {
      return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
    }
    function isPlainSafeLast(c) {
      return !isWhitespace(c) && c !== CHAR_COLON;
    }
    function codePointAt(string, pos) {
      var first = string.charCodeAt(pos), second;
      if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
        second = string.charCodeAt(pos + 1);
        if (second >= 56320 && second <= 57343) {
          return (first - 55296) * 1024 + second - 56320 + 65536;
        }
      }
      return first;
    }
    function needIndentIndicator(string) {
      var leadingSpaceRe = /^\n* /;
      return leadingSpaceRe.test(string);
    }
    var STYLE_PLAIN = 1, STYLE_SINGLE = 2, STYLE_LITERAL = 3, STYLE_FOLDED = 4, STYLE_DOUBLE = 5;
    function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
      var i2;
      var char = 0;
      var prevChar = null;
      var hasLineBreak = false;
      var hasFoldableLine = false;
      var shouldTrackWidth = lineWidth !== -1;
      var previousLineBreak = -1;
      var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
      if (singleLineOnly || forceQuotes) {
        for (i2 = 0; i2 < string.length; char >= 65536 ? i2 += 2 : i2++) {
          char = codePointAt(string, i2);
          if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
      } else {
        for (i2 = 0; i2 < string.length; char >= 65536 ? i2 += 2 : i2++) {
          char = codePointAt(string, i2);
          if (char === CHAR_LINE_FEED) {
            hasLineBreak = true;
            if (shouldTrackWidth) {
              hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
              i2 - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
              previousLineBreak = i2;
            }
          } else if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          plain = plain && isPlainSafe(char, prevChar, inblock);
          prevChar = char;
        }
        hasFoldableLine = hasFoldableLine || shouldTrackWidth && i2 - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
      }
      if (!hasLineBreak && !hasFoldableLine) {
        if (plain && !forceQuotes && !testAmbiguousType(string)) {
          return STYLE_PLAIN;
        }
        return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
      }
      if (indentPerLevel > 9 && needIndentIndicator(string)) {
        return STYLE_DOUBLE;
      }
      if (!forceQuotes) {
        return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
      }
      return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
    }
    function writeScalar(state, string, level, iskey, inblock) {
      state.dump = function() {
        if (string.length === 0) {
          return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
        }
        if (!state.noCompatMode) {
          if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
            return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
          }
        }
        var indent = state.indent * Math.max(1, level);
        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
        function testAmbiguity(string2) {
          return testImplicitResolving(state, string2);
        }
        switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {
          case STYLE_PLAIN:
            return string;
          case STYLE_SINGLE:
            return "'" + string.replace(/'/g, "''") + "'";
          case STYLE_LITERAL:
            return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
          case STYLE_FOLDED:
            return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
          case STYLE_DOUBLE:
            return '"' + escapeString(string) + '"';
          default:
            throw new exception("impossible error: invalid scalar style");
        }
      }();
    }
    function blockHeader(string, indentPerLevel) {
      var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
      var clip = string[string.length - 1] === "\n";
      var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
      var chomp = keep ? "+" : clip ? "" : "-";
      return indentIndicator + chomp + "\n";
    }
    function dropEndingNewline(string) {
      return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
    }
    function foldString(string, width) {
      var lineRe = /(\n+)([^\n]*)/g;
      var result = function() {
        var nextLF = string.indexOf("\n");
        nextLF = nextLF !== -1 ? nextLF : string.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string.slice(0, nextLF), width);
      }();
      var prevMoreIndented = string[0] === "\n" || string[0] === " ";
      var moreIndented;
      var match;
      while (match = lineRe.exec(string)) {
        var prefix = match[1], line = match[2];
        moreIndented = line[0] === " ";
        result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
        prevMoreIndented = moreIndented;
      }
      return result;
    }
    function foldLine(line, width) {
      if (line === "" || line[0] === " ")
        return line;
      var breakRe = / [^ ]/g;
      var match;
      var start2 = 0, end, curr = 0, next = 0;
      var result = "";
      while (match = breakRe.exec(line)) {
        next = match.index;
        if (next - start2 > width) {
          end = curr > start2 ? curr : next;
          result += "\n" + line.slice(start2, end);
          start2 = end + 1;
        }
        curr = next;
      }
      result += "\n";
      if (line.length - start2 > width && curr > start2) {
        result += line.slice(start2, curr) + "\n" + line.slice(curr + 1);
      } else {
        result += line.slice(start2);
      }
      return result.slice(1);
    }
    function escapeString(string) {
      var result = "";
      var char = 0;
      var escapeSeq;
      for (var i2 = 0; i2 < string.length; char >= 65536 ? i2 += 2 : i2++) {
        char = codePointAt(string, i2);
        escapeSeq = ESCAPE_SEQUENCES[char];
        if (!escapeSeq && isPrintable(char)) {
          result += string[i2];
          if (char >= 65536)
            result += string[i2 + 1];
        } else {
          result += escapeSeq || encodeHex(char);
        }
      }
      return result;
    }
    function writeFlowSequence(state, level, object) {
      var _result = "", _tag = state.tag, index, length, value;
      for (index = 0, length = object.length; index < length; index += 1) {
        value = object[index];
        if (state.replacer) {
          value = state.replacer.call(object, String(index), value);
        }
        if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
          if (_result !== "")
            _result += "," + (!state.condenseFlow ? " " : "");
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = "[" + _result + "]";
    }
    function writeBlockSequence(state, level, object, compact) {
      var _result = "", _tag = state.tag, index, length, value;
      for (index = 0, length = object.length; index < length; index += 1) {
        value = object[index];
        if (state.replacer) {
          value = state.replacer.call(object, String(index), value);
        }
        if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
          if (!compact || _result !== "") {
            _result += generateNextLine(state, level);
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            _result += "-";
          } else {
            _result += "- ";
          }
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = _result || "[]";
    }
    function writeFlowMapping(state, level, object) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (_result !== "")
          pairBuffer += ", ";
        if (state.condenseFlow)
          pairBuffer += '"';
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object, objectKey, objectValue);
        }
        if (!writeNode(state, level, objectKey, false, false)) {
          continue;
        }
        if (state.dump.length > 1024)
          pairBuffer += "? ";
        pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
        if (!writeNode(state, level, objectValue, false, false)) {
          continue;
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = "{" + _result + "}";
    }
    function writeBlockMapping(state, level, object, compact) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
      if (state.sortKeys === true) {
        objectKeyList.sort();
      } else if (typeof state.sortKeys === "function") {
        objectKeyList.sort(state.sortKeys);
      } else if (state.sortKeys) {
        throw new exception("sortKeys must be a boolean or a function");
      }
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (!compact || _result !== "") {
          pairBuffer += generateNextLine(state, level);
        }
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) {
          objectValue = state.replacer.call(object, objectKey, objectValue);
        }
        if (!writeNode(state, level + 1, objectKey, true, true, true)) {
          continue;
        }
        explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
        if (explicitPair) {
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += "?";
          } else {
            pairBuffer += "? ";
          }
        }
        pairBuffer += state.dump;
        if (explicitPair) {
          pairBuffer += generateNextLine(state, level);
        }
        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
          continue;
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += ":";
        } else {
          pairBuffer += ": ";
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = _result || "{}";
    }
    function detectType(state, object, explicit) {
      var _result, typeList, index, length, type2, style;
      typeList = explicit ? state.explicitTypes : state.implicitTypes;
      for (index = 0, length = typeList.length; index < length; index += 1) {
        type2 = typeList[index];
        if ((type2.instanceOf || type2.predicate) && (!type2.instanceOf || typeof object === "object" && object instanceof type2.instanceOf) && (!type2.predicate || type2.predicate(object))) {
          if (explicit) {
            if (type2.multi && type2.representName) {
              state.tag = type2.representName(object);
            } else {
              state.tag = type2.tag;
            }
          } else {
            state.tag = "?";
          }
          if (type2.represent) {
            style = state.styleMap[type2.tag] || type2.defaultStyle;
            if (_toString.call(type2.represent) === "[object Function]") {
              _result = type2.represent(object, style);
            } else if (_hasOwnProperty.call(type2.represent, style)) {
              _result = type2.represent[style](object, style);
            } else {
              throw new exception("!<" + type2.tag + '> tag resolver accepts not "' + style + '" style');
            }
            state.dump = _result;
          }
          return true;
        }
      }
      return false;
    }
    function writeNode(state, level, object, block2, compact, iskey, isblockseq) {
      state.tag = null;
      state.dump = object;
      if (!detectType(state, object, false)) {
        detectType(state, object, true);
      }
      var type2 = _toString.call(state.dump);
      var inblock = block2;
      var tagStr;
      if (block2) {
        block2 = state.flowLevel < 0 || state.flowLevel > level;
      }
      var objectOrArray = type2 === "[object Object]" || type2 === "[object Array]", duplicateIndex, duplicate;
      if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
      }
      if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
        compact = false;
      }
      if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = "*ref_" + duplicateIndex;
      } else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
          state.usedDuplicates[duplicateIndex] = true;
        }
        if (type2 === "[object Object]") {
          if (block2 && Object.keys(state.dump).length !== 0) {
            writeBlockMapping(state, level, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowMapping(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type2 === "[object Array]") {
          if (block2 && state.dump.length !== 0) {
            if (state.noArrayIndent && !isblockseq && level > 0) {
              writeBlockSequence(state, level - 1, state.dump, compact);
            } else {
              writeBlockSequence(state, level, state.dump, compact);
            }
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowSequence(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type2 === "[object String]") {
          if (state.tag !== "?") {
            writeScalar(state, state.dump, level, iskey, inblock);
          }
        } else if (type2 === "[object Undefined]") {
          return false;
        } else {
          if (state.skipInvalid)
            return false;
          throw new exception("unacceptable kind of an object to dump " + type2);
        }
        if (state.tag !== null && state.tag !== "?") {
          tagStr = encodeURI(state.tag[0] === "!" ? state.tag.slice(1) : state.tag).replace(/!/g, "%21");
          if (state.tag[0] === "!") {
            tagStr = "!" + tagStr;
          } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
            tagStr = "!!" + tagStr.slice(18);
          } else {
            tagStr = "!<" + tagStr + ">";
          }
          state.dump = tagStr + " " + state.dump;
        }
      }
      return true;
    }
    function getDuplicateReferences(object, state) {
      var objects = [], duplicatesIndexes = [], index, length;
      inspectNode(object, objects, duplicatesIndexes);
      for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index]]);
      }
      state.usedDuplicates = new Array(length);
    }
    function inspectNode(object, objects, duplicatesIndexes) {
      var objectKeyList, index, length;
      if (object !== null && typeof object === "object") {
        index = objects.indexOf(object);
        if (index !== -1) {
          if (duplicatesIndexes.indexOf(index) === -1) {
            duplicatesIndexes.push(index);
          }
        } else {
          objects.push(object);
          if (Array.isArray(object)) {
            for (index = 0, length = object.length; index < length; index += 1) {
              inspectNode(object[index], objects, duplicatesIndexes);
            }
          } else {
            objectKeyList = Object.keys(object);
            for (index = 0, length = objectKeyList.length; index < length; index += 1) {
              inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
            }
          }
        }
      }
    }
    function dump$1(input, options) {
      options = options || {};
      var state = new State(options);
      if (!state.noRefs)
        getDuplicateReferences(input, state);
      var value = input;
      if (state.replacer) {
        value = state.replacer.call({
          "": value
        }, "", value);
      }
      if (writeNode(state, 0, value, true, true))
        return state.dump + "\n";
      return "";
    }
    var dump_1 = dump$1;
    var dumper = {
      dump: dump_1
    };
    function renamed(from, to) {
      return function() {
        throw new Error("Function yaml." + from + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
      };
    }
    var Type = type;
    var Schema = schema;
    var FAILSAFE_SCHEMA = failsafe;
    var JSON_SCHEMA = json;
    var CORE_SCHEMA = core;
    var DEFAULT_SCHEMA = _default;
    var load2 = loader.load;
    var loadAll = loader.loadAll;
    var dump = dumper.dump;
    var YAMLException = exception;
    var types = {
      binary,
      float,
      map,
      null: _null,
      pairs,
      set: set2,
      timestamp,
      bool,
      int,
      merge,
      omap,
      seq,
      str
    };
    var safeLoad = renamed("safeLoad", "load");
    var safeLoadAll = renamed("safeLoadAll", "loadAll");
    var safeDump = renamed("safeDump", "dump");
    var jsYaml = {
      Type,
      Schema,
      FAILSAFE_SCHEMA,
      JSON_SCHEMA,
      CORE_SCHEMA,
      DEFAULT_SCHEMA,
      load: load2,
      loadAll,
      dump,
      YAMLException,
      types,
      safeLoad,
      safeLoadAll,
      safeDump
    };
    const name2 = "frontmatter";
    var frontmatter = definePlugin({
      name: name2,
      transform(transformHooks) {
        transformHooks.beforeParse.tap((md, context) => {
          const origParse = md.parse;
          md.parse = wrapFunction(origParse, {
            before(ctx) {
              const [content] = ctx.args;
              if (!content.startsWith("---\n"))
                return;
              const endOffset = content.indexOf("\n---\n");
              if (endOffset < 0)
                return;
              const raw = content.slice(4, endOffset);
              let frontmatter2;
              try {
                var _frontmatter;
                frontmatter2 = jsYaml.load(raw);
                if ((_frontmatter = frontmatter2) != null && _frontmatter.markmap) {
                  frontmatter2.markmap = normalizeMarkmapJsonOptions(frontmatter2.markmap);
                }
              } catch (_unused) {
                return;
              }
              context.frontmatter = frontmatter2;
              const offset = endOffset + 5;
              ctx.args[0] = content.slice(offset);
            },
            after() {
              md.parse = origParse;
            }
          });
        });
        return {};
      }
    });
    function normalizeMarkmapJsonOptions(options) {
      if (!options)
        return;
      ["color", "extraJs", "extraCss"].forEach((key) => {
        if (options[key] != null)
          options[key] = normalizeStringArray(options[key]);
      });
      ["duration", "maxWidth", "initialExpandLevel"].forEach((key) => {
        if (options[key] != null)
          options[key] = normalizeNumber(options[key]);
      });
      return options;
    }
    function normalizeStringArray(value) {
      var _result;
      let result;
      if (typeof value === "string")
        result = [value];
      else if (Array.isArray(value))
        result = value.filter((item) => item && typeof item === "string");
      return (_result = result) != null && _result.length ? result : void 0;
    }
    function normalizeNumber(value) {
      if (isNaN(+value))
        return;
      return +value;
    }
    const plugins = [frontmatter, katex2, prism];
    function cleanNode(node) {
      if (node.type === "heading") {
        node.children = node.children.filter((item) => item.type !== "paragraph");
      } else if (node.type === "list_item") {
        var _node$payload;
        node.children = node.children.filter((item) => {
          if (["paragraph", "fence"].includes(item.type)) {
            if (!node.content) {
              node.content = item.content;
              node.payload = _extends$1({}, node.payload, item.payload);
            }
            return false;
          }
          return true;
        });
        if (((_node$payload = node.payload) == null ? void 0 : _node$payload.index) != null) {
          node.content = `${node.payload.index}. ${node.content}`;
        }
      } else if (node.type === "ordered_list") {
        var _node$payload$startIn, _node$payload2;
        let index = (_node$payload$startIn = (_node$payload2 = node.payload) == null ? void 0 : _node$payload2.startIndex) != null ? _node$payload$startIn : 1;
        node.children.forEach((item) => {
          if (item.type === "list_item") {
            item.payload = _extends$1({}, item.payload, {
              index
            });
            index += 1;
          }
        });
      }
      if (node.children.length === 0) {
        delete node.children;
      } else {
        node.children.forEach((child) => cleanNode(child));
        if (node.children.length === 1 && !node.children[0].content) {
          node.children = node.children[0].children;
        }
      }
    }
    function resetDepth(node, depth = 0) {
      var _node$children;
      node.depth = depth;
      (_node$children = node.children) == null ? void 0 : _node$children.forEach((child) => {
        resetDepth(child, depth + 1);
      });
    }
    class Transformer {
      constructor(plugins$1 = plugins) {
        this.assetsMap = {};
        this.plugins = plugins$1;
        this.hooks = createTransformHooks();
        const assetsMap = {};
        for (const {
          name: name3,
          transform: transform2
        } of plugins$1) {
          assetsMap[name3] = transform2(this.hooks);
        }
        this.assetsMap = assetsMap;
        const md = new Remarkable("full", {
          html: true,
          breaks: true,
          maxNesting: Infinity
        });
        md.renderer.rules.htmltag = wrapFunction(md.renderer.rules.htmltag, {
          after: (ctx) => {
            this.hooks.htmltag.call(ctx);
          }
        });
        this.md = md;
        this.hooks.parser.call(md);
      }
      buildTree(tokens) {
        const {
          md
        } = this;
        const root2 = {
          type: "root",
          depth: 0,
          content: "",
          children: [],
          payload: {}
        };
        const stack = [root2];
        let depth = 0;
        for (const token of tokens) {
          let current = stack[stack.length - 1];
          if (token.type.endsWith("_open")) {
            const type2 = token.type.slice(0, -5);
            const payload = {};
            if (token.lines) {
              payload.lines = token.lines;
            }
            if (type2 === "heading") {
              depth = token.hLevel;
              while (((_current = current) == null ? void 0 : _current.depth) >= depth) {
                var _current;
                stack.pop();
                current = stack[stack.length - 1];
              }
            } else {
              var _current2;
              depth = Math.max(depth, ((_current2 = current) == null ? void 0 : _current2.depth) || 0) + 1;
              if (type2 === "ordered_list") {
                payload.startIndex = token.order;
              }
            }
            const item = {
              type: type2,
              depth,
              payload,
              content: "",
              children: []
            };
            current.children.push(item);
            stack.push(item);
          } else if (!current) {
            continue;
          } else if (token.type === `${current.type}_close`) {
            if (current.type === "heading") {
              depth = current.depth;
            } else {
              stack.pop();
              depth = 0;
            }
          } else if (token.type === "inline") {
            const revoke = this.hooks.htmltag.tap((ctx) => {
              const comment2 = ctx.result.match(/^<!--([\s\S]*?)-->$/);
              const data = comment2 == null ? void 0 : comment2[1].trim().split(" ");
              if (data[0] === "fold") {
                current.payload.fold = ["all", "recursively"].includes(data[1]) ? 2 : 1;
                ctx.result = "";
              }
            });
            const text2 = md.renderer.render([token], md.options, {});
            revoke();
            current.content = `${current.content || ""}${text2}`;
          } else if (token.type === "fence") {
            let result = md.renderer.render([token], md.options, {});
            const matches = result.match(/<code( class="[^"]*")>/);
            if (matches)
              result = result.replace("<pre>", `<pre${matches[1]}>`);
            current.children.push({
              type: token.type,
              depth: depth + 1,
              content: result,
              children: []
            });
          } else
            ;
        }
        return root2;
      }
      transform(content) {
        var _root$children;
        const context = {
          features: {}
        };
        this.hooks.beforeParse.call(this.md, context);
        const tokens = this.md.parse(content, {});
        this.hooks.afterParse.call(this.md, context);
        let root2 = this.buildTree(tokens);
        cleanNode(root2);
        if (((_root$children = root2.children) == null ? void 0 : _root$children.length) === 1)
          root2 = root2.children[0];
        resetDepth(root2);
        return _extends$1({}, context, {
          root: root2
        });
      }
      /**
       * Get all assets from enabled plugins or filter them by plugin names as keys.
       */
      getAssets(keys) {
        var _keys;
        const styles = [];
        const scripts2 = [];
        (_keys = keys) != null ? _keys : keys = this.plugins.map((plugin) => plugin.name);
        for (const assets of keys.map((key) => this.assetsMap[key])) {
          if (assets) {
            if (assets.styles)
              styles.push(...assets.styles);
            if (assets.scripts)
              scripts2.push(...assets.scripts);
          }
        }
        return {
          styles,
          scripts: scripts2
        };
      }
      /**
       * Get used assets by features object returned by `transform`.
       */
      getUsedAssets(features) {
        const keys = this.plugins.map((plugin) => plugin.name).filter((name3) => features[name3]);
        return this.getAssets(keys);
      }
    }
    const transformerVersions = {
      "markmap-lib": "0.14.4",
      d3: "6.7.0"
    };
    exports2.Transformer = Transformer;
    exports2.builtInPlugins = plugins;
    exports2.fillTemplate = fillTemplate;
    exports2.transformerVersions = transformerVersions;
  });
})(browser, browser.exports);
var browserExports = browser.exports;
/*! markmap-common v0.14.2 | MIT License */
class Hook {
  constructor() {
    this.listeners = [];
  }
  tap(fn) {
    this.listeners.push(fn);
    return () => this.revoke(fn);
  }
  revoke(fn) {
    const i = this.listeners.indexOf(fn);
    if (i >= 0)
      this.listeners.splice(i, 1);
  }
  revokeAll() {
    this.listeners.splice(0);
  }
  call(...args) {
    for (const fn of this.listeners) {
      fn(...args);
    }
  }
}
const uniqId = Math.random().toString(36).slice(2, 8);
let globalIndex = 0;
function getId() {
  globalIndex += 1;
  return `mm-${uniqId}-${globalIndex}`;
}
function noop$1() {
}
function walkTree(tree, callback, key = "children") {
  const walk = (item, parent) => callback(item, () => {
    var _item$key;
    (_item$key = item[key]) == null ? void 0 : _item$key.forEach((child) => {
      walk(child, item);
    });
  }, parent);
  walk(tree);
}
function arrayFrom(arrayLike) {
  if (Array.from)
    return Array.from(arrayLike);
  const array2 = [];
  for (let i = 0; i < arrayLike.length; i += 1) {
    array2.push(arrayLike[i]);
  }
  return array2;
}
function addClass(className, ...rest) {
  const classList2 = (className || "").split(" ").filter(Boolean);
  rest.forEach((item) => {
    if (item && classList2.indexOf(item) < 0)
      classList2.push(item);
  });
  return classList2.join(" ");
}
function childSelector(filter2) {
  if (typeof filter2 === "string") {
    const tagName = filter2;
    filter2 = (el) => el.tagName === tagName;
  }
  const filterFn = filter2;
  return function selector2() {
    let nodes = arrayFrom(this.childNodes);
    if (filterFn)
      nodes = nodes.filter((node) => filterFn(node));
    return nodes;
  };
}
function max(values, valueof) {
  let max2;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (max2 < value || max2 === void 0 && value >= value)) {
        max2 = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (max2 < value || max2 === void 0 && value >= value)) {
        max2 = value;
      }
    }
  }
  return max2;
}
function min(values, valueof) {
  let min2;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (min2 > value || min2 === void 0 && value >= value)) {
        min2 = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (min2 > value || min2 === void 0 && value >= value)) {
        min2 = value;
      }
    }
  }
  return min2;
}
function minIndex(values, valueof) {
  let min2;
  let minIndex2 = -1;
  let index = -1;
  if (valueof === void 0) {
    for (const value of values) {
      ++index;
      if (value != null && (min2 > value || min2 === void 0 && value >= value)) {
        min2 = value, minIndex2 = index;
      }
    }
  } else {
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (min2 > value || min2 === void 0 && value >= value)) {
        min2 = value, minIndex2 = index;
      }
    }
  }
  return minIndex2;
}
var noop = { value: () => {
} };
function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
      throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}
function Dispatch(_) {
  this._ = _;
}
function parseTypenames$1(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name2 = "", i = t.indexOf(".");
    if (i >= 0)
      name2 = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t))
      throw new Error("unknown type: " + t);
    return { type: t, name: name2 };
  });
}
Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._, T = parseTypenames$1(typename + "", _), t, i = -1, n = T.length;
    if (arguments.length < 2) {
      while (++i < n)
        if ((t = (typename = T[i]).type) && (t = get$1(_[t], typename.name)))
          return t;
      return;
    }
    if (callback != null && typeof callback !== "function")
      throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type)
        _[t] = set$1(_[t], typename.name, callback);
      else if (callback == null)
        for (t in _)
          _[t] = set$1(_[t], typename.name, null);
    }
    return this;
  },
  copy: function() {
    var copy = {}, _ = this._;
    for (var t in _)
      copy[t] = _[t].slice();
    return new Dispatch(copy);
  },
  call: function(type, that) {
    if ((n = arguments.length - 2) > 0)
      for (var args = new Array(n), i = 0, n, t; i < n; ++i)
        args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type))
      throw new Error("unknown type: " + type);
    for (t = this._[type], i = 0, n = t.length; i < n; ++i)
      t[i].value.apply(that, args);
  },
  apply: function(type, that, args) {
    if (!this._.hasOwnProperty(type))
      throw new Error("unknown type: " + type);
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i)
      t[i].value.apply(that, args);
  }
};
function get$1(type, name2) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name2) {
      return c.value;
    }
  }
}
function set$1(type, name2, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name2) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }
  if (callback != null)
    type.push({ name: name2, value: callback });
  return type;
}
var xhtml = "http://www.w3.org/1999/xhtml";
const namespaces = {
  svg: "http://www.w3.org/2000/svg",
  xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};
function namespace(name2) {
  var prefix = name2 += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name2.slice(0, i)) !== "xmlns")
    name2 = name2.slice(i + 1);
  return namespaces.hasOwnProperty(prefix) ? { space: namespaces[prefix], local: name2 } : name2;
}
function creatorInherit(name2) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name2) : document2.createElementNS(uri, name2);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator(name2) {
  var fullname = namespace(name2);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
function none() {
}
function selector(selector2) {
  return selector2 == null ? none : function() {
    return this.querySelector(selector2);
  };
}
function selection_select(select2) {
  if (typeof select2 !== "function")
    select2 = selector(select2);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select2.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }
  return new Selection$1(subgroups, this._parents);
}
function array(x2) {
  return typeof x2 === "object" && "length" in x2 ? x2 : Array.from(x2);
}
function empty() {
  return [];
}
function selectorAll(selector2) {
  return selector2 == null ? empty : function() {
    return this.querySelectorAll(selector2);
  };
}
function arrayAll(select2) {
  return function() {
    var group = select2.apply(this, arguments);
    return group == null ? [] : array(group);
  };
}
function selection_selectAll(select2) {
  if (typeof select2 === "function")
    select2 = arrayAll(select2);
  else
    select2 = selectorAll(select2);
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select2.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }
  return new Selection$1(subgroups, parents);
}
function matcher(selector2) {
  return function() {
    return this.matches(selector2);
  };
}
function childMatcher(selector2) {
  return function(node) {
    return node.matches(selector2);
  };
}
var find = Array.prototype.find;
function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selection_selectChild(match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}
var filter = Array.prototype.filter;
function children() {
  return this.children;
}
function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}
function selection_selectChildren(match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}
function selection_filter(match) {
  if (typeof match !== "function")
    match = matcher(match);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection$1(subgroups, this._parents);
}
function sparse(update) {
  return new Array(update.length);
}
function selection_enter() {
  return new Selection$1(this._enter || this._groups.map(sparse), this._parents);
}
function EnterNode(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function(selector2) {
    return this._parent.querySelector(selector2);
  },
  querySelectorAll: function(selector2) {
    return this._parent.querySelectorAll(selector2);
  }
};
function constant$3(x2) {
  return function() {
    return x2;
  };
}
function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0, node, groupLength = group.length, dataLength = data.length;
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}
function bindKey(parent, group, enter, update, exit, data, key) {
  var i, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
      exit[i] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function selection_data(value, key) {
  if (!arguments.length)
    return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
  if (typeof value !== "function")
    value = constant$3(value);
  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j], group = groups[j], groupLength = group.length, data = array(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection$1(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
function selection_exit() {
  return new Selection$1(this._exit || this._groups.map(sparse), this._parents);
}
function selection_join(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null)
    update = onupdate(update);
  if (onexit == null)
    exit.remove();
  else
    onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}
function selection_merge(selection2) {
  if (!(selection2 instanceof Selection$1))
    throw new Error("invalid merge");
  for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Selection$1(merges, this._parents);
}
function selection_order() {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m; ) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}
function selection_sort(compare) {
  if (!compare)
    compare = ascending;
  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }
  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection$1(sortgroups, this._parents).order();
}
function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
function selection_call() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
function selection_nodes() {
  return Array.from(this);
}
function selection_node() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node)
        return node;
    }
  }
  return null;
}
function selection_size() {
  let size = 0;
  for (const node of this)
    ++size;
  return size;
}
function selection_empty() {
  return !this.node();
}
function selection_each(callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        callback.call(node, node.__data__, i, group);
    }
  }
  return this;
}
function attrRemove$1(name2) {
  return function() {
    this.removeAttribute(name2);
  };
}
function attrRemoveNS$1(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant$1(name2, value) {
  return function() {
    this.setAttribute(name2, value);
  };
}
function attrConstantNS$1(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction$1(name2, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttribute(name2);
    else
      this.setAttribute(name2, v);
  };
}
function attrFunctionNS$1(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v);
  };
}
function selection_attr(name2, value) {
  var fullname = namespace(name2);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS$1 : attrRemove$1 : typeof value === "function" ? fullname.local ? attrFunctionNS$1 : attrFunction$1 : fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, value));
}
function defaultView(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}
function styleRemove$1(name2) {
  return function() {
    this.style.removeProperty(name2);
  };
}
function styleConstant$1(name2, value, priority) {
  return function() {
    this.style.setProperty(name2, value, priority);
  };
}
function styleFunction$1(name2, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.style.removeProperty(name2);
    else
      this.style.setProperty(name2, v, priority);
  };
}
function selection_style(name2, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove$1 : typeof value === "function" ? styleFunction$1 : styleConstant$1)(name2, value, priority == null ? "" : priority)) : styleValue(this.node(), name2);
}
function styleValue(node, name2) {
  return node.style.getPropertyValue(name2) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name2);
}
function propertyRemove(name2) {
  return function() {
    delete this[name2];
  };
}
function propertyConstant(name2, value) {
  return function() {
    this[name2] = value;
  };
}
function propertyFunction(name2, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      delete this[name2];
    else
      this[name2] = v;
  };
}
function selection_property(name2, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name2, value)) : this.node()[name2];
}
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
  add: function(name2) {
    var i = this._names.indexOf(name2);
    if (i < 0) {
      this._names.push(name2);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name2) {
    var i = this._names.indexOf(name2);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name2) {
    return this._names.indexOf(name2) >= 0;
  }
};
function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.add(names[i]);
}
function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.remove(names[i]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function selection_classed(name2, value) {
  var names = classArray(name2 + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n)
      if (!list.contains(names[i]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}
function textRemove() {
  this.textContent = "";
}
function textConstant$1(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction$1(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}
function selection_text(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction$1 : textConstant$1)(value)) : this.node().textContent;
}
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}
function selection_html(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}
function raise() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function selection_raise() {
  return this.each(raise);
}
function lower() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function selection_lower() {
  return this.each(lower);
}
function selection_append(name2) {
  var create2 = typeof name2 === "function" ? name2 : creator(name2);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}
function constantNull() {
  return null;
}
function selection_insert(name2, before) {
  var create2 = typeof name2 === "function" ? name2 : creator(name2), select2 = before == null ? constantNull : typeof before === "function" ? before : selector(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select2.apply(this, arguments) || null);
  });
}
function remove() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function selection_remove() {
  return this.each(remove);
}
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_clone(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}
function selection_datum(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}
function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name2 = "", i = t.indexOf(".");
    if (i >= 0)
      name2 = t.slice(i + 1), t = t.slice(0, i);
    return { type: t, name: name2 };
  });
}
function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on)
      return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }
    if (++i)
      on.length = i;
    else
      delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o, listener = contextListener(value);
    if (on)
      for (var j = 0, m = on.length; j < m; ++j) {
        if ((o = on[j]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
          this.addEventListener(o.type, o.listener = listener, o.options = options);
          o.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, options);
    o = { type: typename.type, name: typename.name, value, listener, options };
    if (!on)
      this.__on = [o];
    else
      on.push(o);
  };
}
function selection_on(typename, value, options) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;
  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on)
      for (var j = 0, m = on.length, o; j < m; ++j) {
        for (i = 0, o = on[j]; i < n; ++i) {
          if ((t = typenames[i]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
    return;
  }
  on = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i)
    this.each(on(typenames[i], value, options));
  return this;
}
function dispatchEvent(node, type, params) {
  var window2 = defaultView(node), event = window2.CustomEvent;
  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window2.document.createEvent("Event");
    if (params)
      event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else
      event.initEvent(type, false, false);
  }
  node.dispatchEvent(event);
}
function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}
function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}
function selection_dispatch(type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}
function* selection_iterator() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        yield node;
    }
  }
}
var root = [null];
function Selection$1(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}
function selection() {
  return new Selection$1([[document.documentElement]], root);
}
function selection_selection() {
  return this;
}
Selection$1.prototype = selection.prototype = {
  constructor: Selection$1,
  select: selection_select,
  selectAll: selection_selectAll,
  selectChild: selection_selectChild,
  selectChildren: selection_selectChildren,
  filter: selection_filter,
  data: selection_data,
  enter: selection_enter,
  exit: selection_exit,
  join: selection_join,
  merge: selection_merge,
  selection: selection_selection,
  order: selection_order,
  sort: selection_sort,
  call: selection_call,
  nodes: selection_nodes,
  node: selection_node,
  size: selection_size,
  empty: selection_empty,
  each: selection_each,
  attr: selection_attr,
  style: selection_style,
  property: selection_property,
  classed: selection_classed,
  text: selection_text,
  html: selection_html,
  raise: selection_raise,
  lower: selection_lower,
  append: selection_append,
  insert: selection_insert,
  remove: selection_remove,
  clone: selection_clone,
  datum: selection_datum,
  on: selection_on,
  dispatch: selection_dispatch,
  [Symbol.iterator]: selection_iterator
};
function select(selector2) {
  return typeof selector2 === "string" ? new Selection$1([[document.querySelector(selector2)]], [document.documentElement]) : new Selection$1([[selector2]], root);
}
function sourceEvent(event) {
  let sourceEvent2;
  while (sourceEvent2 = event.sourceEvent)
    event = sourceEvent2;
  return event;
}
function pointer(event, node) {
  event = sourceEvent(event);
  if (node === void 0)
    node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}
function noevent$1(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}
function dragDisable(view) {
  var root2 = view.document.documentElement, selection2 = select(view).on("dragstart.drag", noevent$1, true);
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", noevent$1, true);
  } else {
    root2.__noselect = root2.style.MozUserSelect;
    root2.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root2 = view.document.documentElement, selection2 = select(view).on("dragstart.drag", null);
  if (noclick) {
    selection2.on("click.drag", noevent$1, true);
    setTimeout(function() {
      selection2.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", null);
  } else {
    root2.style.MozUserSelect = root2.__noselect;
    delete root2.__noselect;
  }
}
function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"), reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"), reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"), reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"), reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"), reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define(Color, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a) {
  if (a <= 0)
    r = g = b = NaN;
  return new Rgb(r, g, b, a);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define(Rgb, rgb, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}
function rgb_formatRgb() {
  var a = this.opacity;
  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
}
function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a) {
  if (a <= 0)
    h = s = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s = NaN;
  else if (s <= 0)
    h = NaN;
  return new Hsl(h, s, l, a);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min2 = Math.min(r, g, b), max2 = Math.max(r, g, b), h = NaN, s = max2 - min2, l = (max2 + min2) / 2;
  if (s) {
    if (r === max2)
      h = (g - b) / s + (g < b) * 6;
    else if (g === max2)
      h = (b - r) / s + 2;
    else
      h = (r - g) / s + 4;
    s /= l < 0.5 ? max2 + min2 : 2 - max2 - min2;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define(Hsl, hsl, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
  }
}));
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
const constant$2 = (x2) => () => x2;
function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}
function exponential(a, b, y2) {
  return a = Math.pow(a, y2), b = Math.pow(b, y2) - a, y2 = 1 / y2, function(t) {
    return Math.pow(a + t * b, y2);
  };
}
function gamma(y2) {
  return (y2 = +y2) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y2) : constant$2(isNaN(a) ? b : a);
  };
}
function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant$2(isNaN(a) ? b : a);
}
const interpolateRgb = function rgbGamma(y2) {
  var color2 = gamma(y2);
  function rgb$1(start2, end) {
    var r = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g = color2(start2.g, end.g), b = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
    return function(t) {
      start2.r = r(t);
      start2.g = g(t);
      start2.b = b(t);
      start2.opacity = opacity(t);
      return start2 + "";
    };
  }
  rgb$1.gamma = rgbGamma;
  return rgb$1;
}(1);
function interpolateNumber(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, reB = new RegExp(reA.source, "g");
function zero(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function interpolateString(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
  a = a + "", b = b + "";
  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s[i])
        s[i] += bs;
      else
        s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s[i])
        s[i] += bm;
      else
        s[++i] = bm;
    } else {
      s[++i] = null;
      q.push({ i, x: interpolateNumber(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i])
      s[i] += bs;
    else
      s[++i] = bs;
  }
  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2)
      s[(o = q[i2]).i] = o.x(t);
    return s.join("");
  });
}
var degrees = 180 / Math.PI;
var identity$1 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b))
    a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d)
    c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d))
    c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c)
    a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX,
    scaleY
  };
}
var svgNode;
function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? identity$1 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
  if (value == null)
    return identity$1;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity$1;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: interpolateNumber(xa, xb) }, { i: i - 2, x: interpolateNumber(ya, yb) });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180)
        b += 360;
      else if (b - a > 180)
        a += 360;
      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: interpolateNumber(a, b) });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }
  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: interpolateNumber(a, b) });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: interpolateNumber(xa, xb) }, { i: i - 2, x: interpolateNumber(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a, b) {
    var s = [], q = [];
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n)
        s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
var epsilon2 = 1e-12;
function cosh(x2) {
  return ((x2 = Math.exp(x2)) + 1 / x2) / 2;
}
function sinh(x2) {
  return ((x2 = Math.exp(x2)) - 1 / x2) / 2;
}
function tanh(x2) {
  return ((x2 = Math.exp(2 * x2)) - 1) / (x2 + 1);
}
const interpolateZoom = function zoomRho(rho, rho2, rho4) {
  function zoom2(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;
      i = function(t) {
        return [
          ux0 + t * dx,
          uy0 + t * dy,
          w0 * Math.exp(rho * t * S)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function(t) {
        var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [
          ux0 + u * dx,
          uy0 + u * dy,
          w0 * coshr0 / cosh(rho * s + r0)
        ];
      };
    }
    i.duration = S * 1e3 * rho / Math.SQRT2;
    return i;
  }
  zoom2.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho(_1, _2, _4);
  };
  return zoom2;
}(Math.SQRT2, 2, 4);
var frame = 0, timeout$1 = 0, interval = 0, pokeDelay = 1e3, taskHead, taskTail, clockLast = 0, clockNow = 0, clockSkew = 0, clock = typeof performance === "object" && performance.now ? performance : Date, setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function")
      throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail)
        taskTail._next = this;
      else
        taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}
function timerFlush() {
  now();
  ++frame;
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0)
      t._call.call(null, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout$1 = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time)
        time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}
function sleep(time) {
  if (frame)
    return;
  if (timeout$1)
    timeout$1 = clearTimeout(timeout$1);
  var delay = time - clockNow;
  if (delay > 24) {
    if (time < Infinity)
      timeout$1 = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}
function timeout(callback, delay, time) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart((elapsed) => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}
var emptyOn = dispatch("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function schedule(node, name2, id2, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules)
    node.__transition = {};
  else if (id2 in schedules)
    return;
  create(node, id2, {
    name: name2,
    index,
    // For context during callback.
    group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id2) {
  var schedule2 = get(node, id2);
  if (schedule2.state > CREATED)
    throw new Error("too late; already scheduled");
  return schedule2;
}
function set(node, id2) {
  var schedule2 = get(node, id2);
  if (schedule2.state > STARTED)
    throw new Error("too late; already running");
  return schedule2;
}
function get(node, id2) {
  var schedule2 = node.__transition;
  if (!schedule2 || !(schedule2 = schedule2[id2]))
    throw new Error("transition not found");
  return schedule2;
}
function create(node, id2, self2) {
  var schedules = node.__transition, tween;
  schedules[id2] = self2;
  self2.timer = timer(schedule2, 0, self2.time);
  function schedule2(elapsed) {
    self2.state = SCHEDULED;
    self2.timer.restart(start2, self2.delay, self2.time);
    if (self2.delay <= elapsed)
      start2(elapsed - self2.delay);
  }
  function start2(elapsed) {
    var i, j, n, o;
    if (self2.state !== SCHEDULED)
      return stop();
    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self2.name)
        continue;
      if (o.state === STARTED)
        return timeout(start2);
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } else if (+i < id2) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }
    timeout(function() {
      if (self2.state === STARTED) {
        self2.state = RUNNING;
        self2.timer.restart(tick, self2.delay, self2.time);
        tick(elapsed);
      }
    });
    self2.state = STARTING;
    self2.on.call("start", node, node.__data__, self2.index, self2.group);
    if (self2.state !== STARTING)
      return;
    self2.state = STARTED;
    tween = new Array(n = self2.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self2.tween[i].value.call(node, node.__data__, self2.index, self2.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }
  function tick(elapsed) {
    var t = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i = -1, n = tween.length;
    while (++i < n) {
      tween[i].call(node, t);
    }
    if (self2.state === ENDING) {
      self2.on.call("end", node, node.__data__, self2.index, self2.group);
      stop();
    }
  }
  function stop() {
    self2.state = ENDED;
    self2.timer.stop();
    delete schedules[id2];
    for (var i in schedules)
      return;
    delete node.__transition;
  }
}
function interrupt(node, name2) {
  var schedules = node.__transition, schedule2, active, empty2 = true, i;
  if (!schedules)
    return;
  name2 = name2 == null ? null : name2 + "";
  for (i in schedules) {
    if ((schedule2 = schedules[i]).name !== name2) {
      empty2 = false;
      continue;
    }
    active = schedule2.state > STARTING && schedule2.state < ENDING;
    schedule2.state = ENDED;
    schedule2.timer.stop();
    schedule2.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule2.index, schedule2.group);
    delete schedules[i];
  }
  if (empty2)
    delete node.__transition;
}
function selection_interrupt(name2) {
  return this.each(function() {
    interrupt(this, name2);
  });
}
function tweenRemove(id2, name2) {
  var tween0, tween1;
  return function() {
    var schedule2 = set(this, id2), tween = schedule2.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name2) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }
    schedule2.tween = tween1;
  };
}
function tweenFunction(id2, name2, value) {
  var tween0, tween1;
  if (typeof value !== "function")
    throw new Error();
  return function() {
    var schedule2 = set(this, id2), tween = schedule2.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = { name: name2, value }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name2) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n)
        tween1.push(t);
    }
    schedule2.tween = tween1;
  };
}
function transition_tween(name2, value) {
  var id2 = this._id;
  name2 += "";
  if (arguments.length < 2) {
    var tween = get(this.node(), id2).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name2) {
        return t.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id2, name2, value));
}
function tweenValue(transition, name2, value) {
  var id2 = transition._id;
  transition.each(function() {
    var schedule2 = set(this, id2);
    (schedule2.value || (schedule2.value = {}))[name2] = value.apply(this, arguments);
  });
  return function(node) {
    return get(node, id2).value[name2];
  };
}
function interpolate(a, b) {
  var c;
  return (typeof b === "number" ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b);
}
function attrRemove(name2) {
  return function() {
    this.removeAttribute(name2);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name2, interpolate2, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name2);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, value1);
  };
}
function attrConstantNS(fullname, interpolate2, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, value1);
  };
}
function attrFunction(name2, interpolate2, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttribute(name2);
    string0 = this.getAttribute(name2);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate2(string00 = string0, value1));
  };
}
function attrFunctionNS(fullname, interpolate2, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate2(string00 = string0, value1));
  };
}
function transition_attr(name2, value) {
  var fullname = namespace(name2), i = fullname === "transform" ? interpolateTransformSvg : interpolate;
  return this.attrTween(name2, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name2, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
}
function attrInterpolate(name2, i) {
  return function(t) {
    this.setAttribute(name2, i.call(this, t));
  };
}
function attrInterpolateNS(fullname, i) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}
function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween(name2, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolate(name2, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function transition_attrTween(name2, value) {
  var key = "attr." + name2;
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  var fullname = namespace(name2);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}
function delayFunction(id2, value) {
  return function() {
    init(this, id2).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id2, value) {
  return value = +value, function() {
    init(this, id2).delay = value;
  };
}
function transition_delay(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get(this.node(), id2).delay;
}
function durationFunction(id2, value) {
  return function() {
    set(this, id2).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id2, value) {
  return value = +value, function() {
    set(this, id2).duration = value;
  };
}
function transition_duration(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get(this.node(), id2).duration;
}
function easeConstant(id2, value) {
  if (typeof value !== "function")
    throw new Error();
  return function() {
    set(this, id2).ease = value;
  };
}
function transition_ease(value) {
  var id2 = this._id;
  return arguments.length ? this.each(easeConstant(id2, value)) : get(this.node(), id2).ease;
}
function easeVarying(id2, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (typeof v !== "function")
      throw new Error();
    set(this, id2).ease = v;
  };
}
function transition_easeVarying(value) {
  if (typeof value !== "function")
    throw new Error();
  return this.each(easeVarying(this._id, value));
}
function transition_filter(match) {
  if (typeof match !== "function")
    match = matcher(match);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}
function transition_merge(transition) {
  if (transition._id !== this._id)
    throw new Error();
  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}
function start(name2) {
  return (name2 + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0)
      t = t.slice(0, i);
    return !t || t === "start";
  });
}
function onFunction(id2, name2, listener) {
  var on0, on1, sit = start(name2) ? init : set;
  return function() {
    var schedule2 = sit(this, id2), on = schedule2.on;
    if (on !== on0)
      (on1 = (on0 = on).copy()).on(name2, listener);
    schedule2.on = on1;
  };
}
function transition_on(name2, listener) {
  var id2 = this._id;
  return arguments.length < 2 ? get(this.node(), id2).on.on(name2) : this.each(onFunction(id2, name2, listener));
}
function removeFunction(id2) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition)
      if (+i !== id2)
        return;
    if (parent)
      parent.removeChild(this);
  };
}
function transition_remove() {
  return this.on("end.remove", removeFunction(this._id));
}
function transition_select(select2) {
  var name2 = this._name, id2 = this._id;
  if (typeof select2 !== "function")
    select2 = selector(select2);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select2.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule(subgroup[i], name2, id2, i, subgroup, get(node, id2));
      }
    }
  }
  return new Transition(subgroups, this._parents, name2, id2);
}
function transition_selectAll(select2) {
  var name2 = this._name, id2 = this._id;
  if (typeof select2 !== "function")
    select2 = selectorAll(select2);
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children2 = select2.call(node, node.__data__, i, group), child, inherit2 = get(node, id2), k = 0, l = children2.length; k < l; ++k) {
          if (child = children2[k]) {
            schedule(child, name2, id2, k, children2, inherit2);
          }
        }
        subgroups.push(children2);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name2, id2);
}
var Selection = selection.prototype.constructor;
function transition_selection() {
  return new Selection(this._groups, this._parents);
}
function styleNull(name2, interpolate2) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name2), string1 = (this.style.removeProperty(name2), styleValue(this, name2));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, string10 = string1);
  };
}
function styleRemove(name2) {
  return function() {
    this.style.removeProperty(name2);
  };
}
function styleConstant(name2, interpolate2, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name2);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, value1);
  };
}
function styleFunction(name2, interpolate2, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name2), value1 = value(this), string1 = value1 + "";
    if (value1 == null)
      string1 = value1 = (this.style.removeProperty(name2), styleValue(this, name2));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate2(string00 = string0, value1));
  };
}
function styleMaybeRemove(id2, name2) {
  var on0, on1, listener0, key = "style." + name2, event = "end." + key, remove2;
  return function() {
    var schedule2 = set(this, id2), on = schedule2.on, listener = schedule2.value[key] == null ? remove2 || (remove2 = styleRemove(name2)) : void 0;
    if (on !== on0 || listener0 !== listener)
      (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule2.on = on1;
  };
}
function transition_style(name2, value, priority) {
  var i = (name2 += "") === "transform" ? interpolateTransformCss : interpolate;
  return value == null ? this.styleTween(name2, styleNull(name2, i)).on("end.style." + name2, styleRemove(name2)) : typeof value === "function" ? this.styleTween(name2, styleFunction(name2, i, tweenValue(this, "style." + name2, value))).each(styleMaybeRemove(this._id, name2)) : this.styleTween(name2, styleConstant(name2, i, value), priority).on("end.style." + name2, null);
}
function styleInterpolate(name2, i, priority) {
  return function(t) {
    this.style.setProperty(name2, i.call(this, t), priority);
  };
}
function styleTween(name2, value, priority) {
  var t, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t = (i0 = i) && styleInterpolate(name2, i, priority);
    return t;
  }
  tween._value = value;
  return tween;
}
function transition_styleTween(name2, value, priority) {
  var key = "style." + (name2 += "");
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, styleTween(name2, value, priority == null ? "" : priority));
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function transition_text(value) {
  return this.tween("text", typeof value === "function" ? textFunction(tweenValue(this, "text", value)) : textConstant(value == null ? "" : value + ""));
}
function textInterpolate(i) {
  return function(t) {
    this.textContent = i.call(this, t);
  };
}
function textTween(value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function transition_textTween(value) {
  var key = "text";
  if (arguments.length < 1)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, textTween(value));
}
function transition_transition() {
  var name2 = this._name, id0 = this._id, id1 = newId();
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit2 = get(node, id0);
        schedule(node, name2, id1, i, group, {
          time: inherit2.time + inherit2.delay + inherit2.duration,
          delay: 0,
          duration: inherit2.duration,
          ease: inherit2.ease
        });
      }
    }
  }
  return new Transition(groups, this._parents, name2, id1);
}
function transition_end() {
  var on0, on1, that = this, id2 = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end = { value: function() {
      if (--size === 0)
        resolve();
    } };
    that.each(function() {
      var schedule2 = set(this, id2), on = schedule2.on;
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule2.on = on1;
    });
    if (size === 0)
      resolve();
  });
}
var id = 0;
function Transition(groups, parents, name2, id2) {
  this._groups = groups;
  this._parents = parents;
  this._name = name2;
  this._id = id2;
}
function newId() {
  return ++id;
}
var selection_prototype = selection.prototype;
Transition.prototype = {
  constructor: Transition,
  select: transition_select,
  selectAll: transition_selectAll,
  filter: transition_filter,
  merge: transition_merge,
  selection: transition_selection,
  transition: transition_transition,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: transition_on,
  attr: transition_attr,
  attrTween: transition_attrTween,
  style: transition_style,
  styleTween: transition_styleTween,
  text: transition_text,
  textTween: transition_textTween,
  remove: transition_remove,
  tween: transition_tween,
  delay: transition_delay,
  duration: transition_duration,
  ease: transition_ease,
  easeVarying: transition_easeVarying,
  end: transition_end,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};
function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}
var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};
function inherit(node, id2) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id2])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id2} not found`);
    }
  }
  return timing;
}
function selection_transition(name2) {
  var id2, timing;
  if (name2 instanceof Transition) {
    id2 = name2._id, name2 = name2._name;
  } else {
    id2 = newId(), (timing = defaultTiming).time = now(), name2 = name2 == null ? null : name2 + "";
  }
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule(node, name2, id2, i, group, timing || inherit(node, id2));
      }
    }
  }
  return new Transition(groups, this._parents, name2, id2);
}
selection.prototype.interrupt = selection_interrupt;
selection.prototype.transition = selection_transition;
const pi = Math.PI, tau = 2 * pi, epsilon = 1e-6, tauEpsilon = tau - epsilon;
function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null;
  this._ = "";
}
function path() {
  return new Path();
}
Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x2, y2) {
    this._ += "M" + (this._x0 = this._x1 = +x2) + "," + (this._y0 = this._y1 = +y2);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x2, y2) {
    this._ += "L" + (this._x1 = +x2) + "," + (this._y1 = +y2);
  },
  quadraticCurveTo: function(x1, y1, x2, y2) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x2) + "," + (this._y1 = +y2);
  },
  bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x3) + "," + (this._y1 = +y3);
  },
  arcTo: function(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
    if (r < 0)
      throw new Error("negative radius: " + r);
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else if (!(l01_2 > epsilon))
      ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else {
      var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
      if (Math.abs(t01 - 1) > epsilon) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }
      this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function(x2, y2, r, a0, a1, ccw) {
    x2 = +x2, y2 = +y2, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x2 + dx, y0 = y2 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
    if (r < 0)
      throw new Error("negative radius: " + r);
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._ += "L" + x0 + "," + y0;
    }
    if (!r)
      return;
    if (da < 0)
      da = da % tau + tau;
    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x2 - dx) + "," + (y2 - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } else if (da > epsilon) {
      this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x2 + r * Math.cos(a1)) + "," + (this._y1 = y2 + r * Math.sin(a1));
    }
  },
  rect: function(x2, y2, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x2) + "," + (this._y0 = this._y1 = +y2) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function() {
    return this._;
  }
};
function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range).domain(domain);
      break;
  }
  return this;
}
const implicit = Symbol("implicit");
function ordinal() {
  var index = /* @__PURE__ */ new Map(), domain = [], range = [], unknown = implicit;
  function scale(d) {
    var key = d + "", i = index.get(key);
    if (!i) {
      if (unknown !== implicit)
        return unknown;
      index.set(key, i = domain.push(d));
    }
    return range[(i - 1) % range.length];
  }
  scale.domain = function(_) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index = /* @__PURE__ */ new Map();
    for (const value of _) {
      const key = value + "";
      if (index.has(key))
        continue;
      index.set(key, domain.push(value));
    }
    return scale;
  };
  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}
function colors(specifier) {
  var n = specifier.length / 6 | 0, colors2 = new Array(n), i = 0;
  while (i < n)
    colors2[i] = "#" + specifier.slice(i * 6, ++i * 6);
  return colors2;
}
const category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");
function constant$1(x2) {
  return function constant2() {
    return x2;
  };
}
var slice = Array.prototype.slice;
function x(p) {
  return p[0];
}
function y(p) {
  return p[1];
}
function linkSource(d) {
  return d.source;
}
function linkTarget(d) {
  return d.target;
}
function link(curve) {
  var source = linkSource, target = linkTarget, x$1 = x, y$1 = y, context = null;
  function link2() {
    var buffer, argv = slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);
    if (!context)
      context = buffer = path();
    curve(context, +x$1.apply(this, (argv[0] = s, argv)), +y$1.apply(this, argv), +x$1.apply(this, (argv[0] = t, argv)), +y$1.apply(this, argv));
    if (buffer)
      return context = null, buffer + "" || null;
  }
  link2.source = function(_) {
    return arguments.length ? (source = _, link2) : source;
  };
  link2.target = function(_) {
    return arguments.length ? (target = _, link2) : target;
  };
  link2.x = function(_) {
    return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant$1(+_), link2) : x$1;
  };
  link2.y = function(_) {
    return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$1(+_), link2) : y$1;
  };
  link2.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, link2) : context;
  };
  return link2;
}
function curveHorizontal(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}
function linkHorizontal() {
  return link(curveHorizontal);
}
const constant = (x2) => () => x2;
function ZoomEvent(type, {
  sourceEvent: sourceEvent2,
  target,
  transform: transform2,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent2, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    transform: { value: transform2, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}
function Transform(k, x2, y2) {
  this.k = k;
  this.x = x2;
  this.y = y2;
}
Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x2, y2) {
    return x2 === 0 & y2 === 0 ? this : new Transform(this.k, this.x + this.k * x2, this.y + this.k * y2);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x2) {
    return x2 * this.k + this.x;
  },
  applyY: function(y2) {
    return y2 * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x2) {
    return (x2 - this.x) / this.k;
  },
  invertY: function(y2) {
    return (y2 - this.y) / this.k;
  },
  rescaleX: function(x2) {
    return x2.copy().domain(x2.range().map(this.invertX, this).map(x2.invert, x2));
  },
  rescaleY: function(y2) {
    return y2.copy().domain(y2.range().map(this.invertY, this).map(y2.invert, y2));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity = new Transform(1, 0, 0);
transform.prototype = Transform.prototype;
function transform(node) {
  while (!node.__zoom)
    if (!(node = node.parentNode))
      return identity;
  return node.__zoom;
}
function nopropagation(event) {
  event.stopImmediatePropagation();
}
function noevent(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}
function defaultFilter(event) {
  return (!event.ctrlKey || event.type === "wheel") && !event.button;
}
function defaultExtent() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}
function defaultTransform() {
  return this.__zoom || identity;
}
function defaultWheelDelta(event) {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform2, extent, translateExtent) {
  var dx0 = transform2.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent[1][1]) - translateExtent[1][1];
  return transform2.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}
function zoom() {
  var filter2 = defaultFilter, extent = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate2 = interpolateZoom, listeners = dispatch("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
  function zoom2(selection2) {
    selection2.property("__zoom", defaultTransform).on("wheel.zoom", wheeled).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  zoom2.transform = function(collection, transform2, point, event) {
    var selection2 = collection.selection ? collection.selection() : collection;
    selection2.property("__zoom", defaultTransform);
    if (collection !== selection2) {
      schedule2(collection, transform2, point, event);
    } else {
      selection2.interrupt().each(function() {
        gesture(this, arguments).event(event).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
      });
    }
  };
  zoom2.scaleBy = function(selection2, k, p, event) {
    zoom2.scaleTo(selection2, function() {
      var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p, event);
  };
  zoom2.scaleTo = function(selection2, k, p, event) {
    zoom2.transform(selection2, function() {
      var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p, event);
  };
  zoom2.translateBy = function(selection2, x2, y2, event) {
    zoom2.transform(selection2, function() {
      return constrain(this.__zoom.translate(
        typeof x2 === "function" ? x2.apply(this, arguments) : x2,
        typeof y2 === "function" ? y2.apply(this, arguments) : y2
      ), extent.apply(this, arguments), translateExtent);
    }, null, event);
  };
  zoom2.translateTo = function(selection2, x2, y2, p, event) {
    zoom2.transform(selection2, function() {
      var e = extent.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(identity.translate(p0[0], p0[1]).scale(t.k).translate(
        typeof x2 === "function" ? -x2.apply(this, arguments) : -x2,
        typeof y2 === "function" ? -y2.apply(this, arguments) : -y2
      ), e, translateExtent);
    }, p, event);
  };
  function scale(transform2, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform2.k ? transform2 : new Transform(k, transform2.x, transform2.y);
  }
  function translate(transform2, p0, p1) {
    var x2 = p0[0] - p1[0] * transform2.k, y2 = p0[1] - p1[1] * transform2.k;
    return x2 === transform2.x && y2 === transform2.y ? transform2 : new Transform(transform2.k, x2, y2);
  }
  function centroid(extent2) {
    return [(+extent2[0][0] + +extent2[1][0]) / 2, (+extent2[0][1] + +extent2[1][1]) / 2];
  }
  function schedule2(transition, transform2, point, event) {
    transition.on("start.zoom", function() {
      gesture(this, arguments).event(event).start();
    }).on("interrupt.zoom end.zoom", function() {
      gesture(this, arguments).event(event).end();
    }).tween("zoom", function() {
      var that = this, args = arguments, g = gesture(that, args).event(event), e = extent.apply(that, args), p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a = that.__zoom, b = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i = interpolate2(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
      return function(t) {
        if (t === 1)
          t = b;
        else {
          var l = i(t), k = w / l[2];
          t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
        }
        g.zoom(null, t);
      };
    });
  }
  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }
  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }
  Gesture.prototype = {
    event: function(event) {
      if (event)
        this.sourceEvent = event;
      return this;
    },
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform2) {
      if (this.mouse && key !== "mouse")
        this.mouse[1] = transform2.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch")
        this.touch0[1] = transform2.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch")
        this.touch1[1] = transform2.invert(this.touch1[0]);
      this.that.__zoom = transform2;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type) {
      var d = select(this.that).datum();
      listeners.call(
        type,
        this.that,
        new ZoomEvent(type, {
          sourceEvent: this.sourceEvent,
          target: zoom2,
          type,
          transform: this.that.__zoom,
          dispatch: listeners
        }),
        d
      );
    }
  };
  function wheeled(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var g = gesture(this, args).event(event), t = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = pointer(event);
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    } else if (t.k === k)
      return;
    else {
      g.mouse = [p, t.invert(p)];
      interrupt(this);
      g.start();
    }
    noevent(event);
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }
  function mousedowned(event, ...args) {
    if (touchending || !filter2.apply(this, arguments))
      return;
    var g = gesture(this, args, true).event(event), v = select(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = pointer(event, currentTarget), currentTarget = event.currentTarget, x0 = event.clientX, y0 = event.clientY;
    dragDisable(event.view);
    nopropagation(event);
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt(this);
    g.start();
    function mousemoved(event2) {
      noevent(event2);
      if (!g.moved) {
        var dx = event2.clientX - x0, dy = event2.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.event(event2).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event2, currentTarget), g.mouse[1]), g.extent, translateExtent));
    }
    function mouseupped(event2) {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event2.view, g.moved);
      noevent(event2);
      g.event(event2).end();
    }
  }
  function dblclicked(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var t0 = this.__zoom, p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
    noevent(event);
    if (duration > 0)
      select(this).transition().duration(duration).call(schedule2, t1, p0, event);
    else
      select(this).call(zoom2.transform, t1, p0, event);
  }
  function touchstarted(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t, p;
    nopropagation(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer(t, this);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0)
        g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
      else if (!g.touch1 && g.touch0[2] !== p[2])
        g.touch1 = p, g.taps = 0;
    }
    if (touchstarting)
      touchstarting = clearTimeout(touchstarting);
    if (started) {
      if (g.taps < 2)
        touchfirst = p[0], touchstarting = setTimeout(function() {
          touchstarting = null;
        }, touchDelay);
      interrupt(this);
      g.start();
    }
  }
  function touchmoved(event, ...args) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
    noevent(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer(t, this);
      if (g.touch0 && g.touch0[2] === t.identifier)
        g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier)
        g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0)
      p = g.touch0[0], l = g.touch0[1];
    else
      return;
    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }
  function touchended(event, ...args) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t;
    nopropagation(event);
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier)
        delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier)
        delete g.touch1;
    }
    if (g.touch1 && !g.touch0)
      g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0)
      g.touch0[1] = this.__zoom.invert(g.touch0[0]);
    else {
      g.end();
      if (g.taps === 2) {
        t = pointer(t, this);
        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
          var p = select(this).on("dblclick.zoom");
          if (p)
            p.apply(this, arguments);
        }
      }
    }
  }
  zoom2.wheelDelta = function(_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom2) : wheelDelta;
  };
  zoom2.filter = function(_) {
    return arguments.length ? (filter2 = typeof _ === "function" ? _ : constant(!!_), zoom2) : filter2;
  };
  zoom2.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom2) : touchable;
  };
  zoom2.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom2) : extent;
  };
  zoom2.scaleExtent = function(_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom2) : [scaleExtent[0], scaleExtent[1]];
  };
  zoom2.translateExtent = function(_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom2) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };
  zoom2.constrain = function(_) {
    return arguments.length ? (constrain = _, zoom2) : constrain;
  };
  zoom2.duration = function(_) {
    return arguments.length ? (duration = +_, zoom2) : duration;
  };
  zoom2.interpolate = function(_) {
    return arguments.length ? (interpolate2 = _, zoom2) : interpolate2;
  };
  zoom2.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom2 : value;
  };
  zoom2.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom2) : Math.sqrt(clickDistance2);
  };
  zoom2.tapDistance = function(_) {
    return arguments.length ? (tapDistance = +_, zoom2) : tapDistance;
  };
  return zoom2;
}
/*! markmap-view v0.14.4 | MIT License */
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function count(node) {
  var sum = 0, children2 = node.children, i = children2 && children2.length;
  if (!i)
    sum = 1;
  else
    while (--i >= 0)
      sum += children2[i].value;
  node.value = sum;
}
function node_count() {
  return this.eachAfter(count);
}
function node_each(callback) {
  var node = this, current, next = [node], children2, i, n;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      callback(node), children2 = node.children;
      if (children2)
        for (i = 0, n = children2.length; i < n; ++i) {
          next.push(children2[i]);
        }
    }
  } while (next.length);
  return this;
}
function node_eachBefore(callback) {
  var node = this, nodes = [node], children2, i;
  while (node = nodes.pop()) {
    callback(node), children2 = node.children;
    if (children2)
      for (i = children2.length - 1; i >= 0; --i) {
        nodes.push(children2[i]);
      }
  }
  return this;
}
function node_eachAfter(callback) {
  var node = this, nodes = [node], next = [], children2, i, n;
  while (node = nodes.pop()) {
    next.push(node), children2 = node.children;
    if (children2)
      for (i = 0, n = children2.length; i < n; ++i) {
        nodes.push(children2[i]);
      }
  }
  while (node = next.pop()) {
    callback(node);
  }
  return this;
}
function node_sum(value) {
  return this.eachAfter(function(node) {
    var sum = +value(node.data) || 0, children2 = node.children, i = children2 && children2.length;
    while (--i >= 0)
      sum += children2[i].value;
    node.value = sum;
  });
}
function node_sort(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}
function node_path(end) {
  var start2 = this, ancestor = leastCommonAncestor(start2, end), nodes = [start2];
  while (start2 !== ancestor) {
    start2 = start2.parent;
    nodes.push(start2);
  }
  var k = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }
  return nodes;
}
function leastCommonAncestor(a, b) {
  if (a === b)
    return a;
  var aNodes = a.ancestors(), bNodes = b.ancestors(), c = null;
  a = aNodes.pop();
  b = bNodes.pop();
  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }
  return c;
}
function node_ancestors() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
}
function node_descendants() {
  var nodes = [];
  this.each(function(node) {
    nodes.push(node);
  });
  return nodes;
}
function node_leaves() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}
function node_links() {
  var root2 = this, links = [];
  root2.each(function(node) {
    if (node !== root2) {
      links.push({
        source: node.parent,
        target: node
      });
    }
  });
  return links;
}
function hierarchy(data, children2) {
  var root2 = new Node$1(data), valued = +data.value && (root2.value = data.value), node, nodes = [root2], child, childs, i, n;
  if (children2 == null)
    children2 = defaultChildren;
  while (node = nodes.pop()) {
    if (valued)
      node.value = +node.data.value;
    if ((childs = children2(node.data)) && (n = childs.length)) {
      node.children = new Array(n);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new Node$1(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }
  return root2.eachBefore(computeHeight);
}
function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}
function defaultChildren(d) {
  return d.children;
}
function copyData(node) {
  node.data = node.data.data;
}
function computeHeight(node) {
  var height = 0;
  do
    node.height = height;
  while ((node = node.parent) && node.height < ++height);
}
function Node$1(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}
Node$1.prototype = hierarchy.prototype = {
  constructor: Node$1,
  count: node_count,
  each: node_each,
  eachAfter: node_eachAfter,
  eachBefore: node_eachBefore,
  sum: node_sum,
  sort: node_sort,
  path: node_path,
  ancestors: node_ancestors,
  descendants: node_descendants,
  leaves: node_leaves,
  links: node_links,
  copy: node_copy
};
var name = "d3-flextree";
var version$1 = "2.1.2";
var main = "build/d3-flextree.js";
var module = "index";
var author = {
  name: "Chris Maloney",
  url: "http://chrismaloney.org"
};
var description = "Flexible tree layout algorithm that allows for variable node sizes.";
var keywords = [
  "d3",
  "d3-module",
  "layout",
  "tree",
  "hierarchy",
  "d3-hierarchy",
  "plugin",
  "d3-plugin",
  "infovis",
  "visualization",
  "2d"
];
var homepage = "https://github.com/klortho/d3-flextree";
var license = "WTFPL";
var repository = {
  type: "git",
  url: "https://github.com/klortho/d3-flextree.git"
};
var scripts = {
  clean: "rm -rf build demo test",
  "build:demo": "rollup -c --environment BUILD:demo",
  "build:dev": "rollup -c --environment BUILD:dev",
  "build:prod": "rollup -c --environment BUILD:prod",
  "build:test": "rollup -c --environment BUILD:test",
  build: "rollup -c",
  lint: "eslint index.js src",
  "test:main": "node test/bundle.js",
  "test:browser": "node test/browser-tests.js",
  test: "npm-run-all test:*",
  prepare: "npm-run-all clean build lint test"
};
var dependencies = {
  "d3-hierarchy": "^1.1.5"
};
var devDependencies = {
  "babel-plugin-external-helpers": "^6.22.0",
  "babel-preset-es2015-rollup": "^3.0.0",
  d3: "^4.13.0",
  "d3-selection-multi": "^1.0.1",
  eslint: "^4.19.1",
  jsdom: "^11.6.2",
  "npm-run-all": "^4.1.2",
  rollup: "^0.55.3",
  "rollup-plugin-babel": "^2.7.1",
  "rollup-plugin-commonjs": "^8.0.2",
  "rollup-plugin-copy": "^0.2.3",
  "rollup-plugin-json": "^2.3.0",
  "rollup-plugin-node-resolve": "^3.0.2",
  "rollup-plugin-uglify": "^3.0.0",
  "uglify-es": "^3.3.9"
};
var packageInfo = {
  name,
  version: version$1,
  main,
  module,
  "jsnext:main": "index",
  author,
  description,
  keywords,
  homepage,
  license,
  repository,
  scripts,
  dependencies,
  devDependencies
};
const {
  version
} = packageInfo;
const defaults = Object.freeze({
  children: (data) => data.children,
  nodeSize: (node) => node.data.size,
  spacing: 0
});
function flextree(options) {
  const opts = Object.assign({}, defaults, options);
  function accessor(name2) {
    const opt = opts[name2];
    return typeof opt === "function" ? opt : () => opt;
  }
  function layout(tree) {
    const wtree = wrap(getWrapper(), tree, (node) => node.children);
    wtree.update();
    return wtree.data;
  }
  function getFlexNode() {
    const nodeSize = accessor("nodeSize");
    const spacing = accessor("spacing");
    return class FlexNode extends hierarchy.prototype.constructor {
      constructor(data) {
        super(data);
      }
      copy() {
        const c = wrap(this.constructor, this, (node) => node.children);
        c.each((node) => node.data = node.data.data);
        return c;
      }
      get size() {
        return nodeSize(this);
      }
      spacing(oNode) {
        return spacing(this, oNode);
      }
      get nodes() {
        return this.descendants();
      }
      get xSize() {
        return this.size[0];
      }
      get ySize() {
        return this.size[1];
      }
      get top() {
        return this.y;
      }
      get bottom() {
        return this.y + this.ySize;
      }
      get left() {
        return this.x - this.xSize / 2;
      }
      get right() {
        return this.x + this.xSize / 2;
      }
      get root() {
        const ancs = this.ancestors();
        return ancs[ancs.length - 1];
      }
      get numChildren() {
        return this.hasChildren ? this.children.length : 0;
      }
      get hasChildren() {
        return !this.noChildren;
      }
      get noChildren() {
        return this.children === null;
      }
      get firstChild() {
        return this.hasChildren ? this.children[0] : null;
      }
      get lastChild() {
        return this.hasChildren ? this.children[this.numChildren - 1] : null;
      }
      get extents() {
        return (this.children || []).reduce((acc, kid) => FlexNode.maxExtents(acc, kid.extents), this.nodeExtents);
      }
      get nodeExtents() {
        return {
          top: this.top,
          bottom: this.bottom,
          left: this.left,
          right: this.right
        };
      }
      static maxExtents(e0, e1) {
        return {
          top: Math.min(e0.top, e1.top),
          bottom: Math.max(e0.bottom, e1.bottom),
          left: Math.min(e0.left, e1.left),
          right: Math.max(e0.right, e1.right)
        };
      }
    };
  }
  function getWrapper() {
    const FlexNode = getFlexNode();
    const nodeSize = accessor("nodeSize");
    const spacing = accessor("spacing");
    return class extends FlexNode {
      constructor(data) {
        super(data);
        Object.assign(this, {
          x: 0,
          y: 0,
          relX: 0,
          prelim: 0,
          shift: 0,
          change: 0,
          lExt: this,
          lExtRelX: 0,
          lThr: null,
          rExt: this,
          rExtRelX: 0,
          rThr: null
        });
      }
      get size() {
        return nodeSize(this.data);
      }
      spacing(oNode) {
        return spacing(this.data, oNode.data);
      }
      get x() {
        return this.data.x;
      }
      set x(v) {
        this.data.x = v;
      }
      get y() {
        return this.data.y;
      }
      set y(v) {
        this.data.y = v;
      }
      update() {
        layoutChildren(this);
        resolveX(this);
        return this;
      }
    };
  }
  function wrap(FlexClass, treeData, children2) {
    const _wrap = (data, parent) => {
      const node = new FlexClass(data);
      Object.assign(node, {
        parent,
        depth: parent === null ? 0 : parent.depth + 1,
        height: 0,
        length: 1
      });
      const kidsData = children2(data) || [];
      node.children = kidsData.length === 0 ? null : kidsData.map((kd) => _wrap(kd, node));
      if (node.children) {
        Object.assign(node, node.children.reduce((hl, kid) => ({
          height: Math.max(hl.height, kid.height + 1),
          length: hl.length + kid.length
        }), node));
      }
      return node;
    };
    return _wrap(treeData, null);
  }
  Object.assign(layout, {
    nodeSize(arg) {
      return arguments.length ? (opts.nodeSize = arg, layout) : opts.nodeSize;
    },
    spacing(arg) {
      return arguments.length ? (opts.spacing = arg, layout) : opts.spacing;
    },
    children(arg) {
      return arguments.length ? (opts.children = arg, layout) : opts.children;
    },
    hierarchy(treeData, children2) {
      const kids = typeof children2 === "undefined" ? opts.children : children2;
      return wrap(getFlexNode(), treeData, kids);
    },
    dump(tree) {
      const nodeSize = accessor("nodeSize");
      const _dump = (i0) => (node) => {
        const i1 = i0 + "  ";
        const i2 = i0 + "    ";
        const {
          x: x2,
          y: y2
        } = node;
        const size = nodeSize(node);
        const kids = node.children || [];
        const kdumps = kids.length === 0 ? " " : `,${i1}children: [${i2}${kids.map(_dump(i2)).join(i2)}${i1}],${i0}`;
        return `{ size: [${size.join(", ")}],${i1}x: ${x2}, y: ${y2}${kdumps}},`;
      };
      return _dump("\n")(tree);
    }
  });
  return layout;
}
flextree.version = version;
const layoutChildren = (w, y2 = 0) => {
  w.y = y2;
  (w.children || []).reduce((acc, kid) => {
    const [i, lastLows] = acc;
    layoutChildren(kid, w.y + w.ySize);
    const lowY = (i === 0 ? kid.lExt : kid.rExt).bottom;
    if (i !== 0)
      separate(w, i, lastLows);
    const lows = updateLows(lowY, i, lastLows);
    return [i + 1, lows];
  }, [0, null]);
  shiftChange(w);
  positionRoot(w);
  return w;
};
const resolveX = (w, prevSum, parentX) => {
  if (typeof prevSum === "undefined") {
    prevSum = -w.relX - w.prelim;
    parentX = 0;
  }
  const sum = prevSum + w.relX;
  w.relX = sum + w.prelim - parentX;
  w.prelim = 0;
  w.x = parentX + w.relX;
  (w.children || []).forEach((k) => resolveX(k, sum, w.x));
  return w;
};
const shiftChange = (w) => {
  (w.children || []).reduce((acc, child) => {
    const [lastShiftSum, lastChangeSum] = acc;
    const shiftSum = lastShiftSum + child.shift;
    const changeSum = lastChangeSum + shiftSum + child.change;
    child.relX += changeSum;
    return [shiftSum, changeSum];
  }, [0, 0]);
};
const separate = (w, i, lows) => {
  const lSib = w.children[i - 1];
  const curSubtree = w.children[i];
  let rContour = lSib;
  let rSumMods = lSib.relX;
  let lContour = curSubtree;
  let lSumMods = curSubtree.relX;
  let isFirst = true;
  while (rContour && lContour) {
    if (rContour.bottom > lows.lowY)
      lows = lows.next;
    const dist = rSumMods + rContour.prelim - (lSumMods + lContour.prelim) + rContour.xSize / 2 + lContour.xSize / 2 + rContour.spacing(lContour);
    if (dist > 0 || dist < 0 && isFirst) {
      lSumMods += dist;
      moveSubtree(curSubtree, dist);
      distributeExtra(w, i, lows.index, dist);
    }
    isFirst = false;
    const rightBottom = rContour.bottom;
    const leftBottom = lContour.bottom;
    if (rightBottom <= leftBottom) {
      rContour = nextRContour(rContour);
      if (rContour)
        rSumMods += rContour.relX;
    }
    if (rightBottom >= leftBottom) {
      lContour = nextLContour(lContour);
      if (lContour)
        lSumMods += lContour.relX;
    }
  }
  if (!rContour && lContour)
    setLThr(w, i, lContour, lSumMods);
  else if (rContour && !lContour)
    setRThr(w, i, rContour, rSumMods);
};
const moveSubtree = (subtree, distance) => {
  subtree.relX += distance;
  subtree.lExtRelX += distance;
  subtree.rExtRelX += distance;
};
const distributeExtra = (w, curSubtreeI, leftSibI, dist) => {
  const curSubtree = w.children[curSubtreeI];
  const n = curSubtreeI - leftSibI;
  if (n > 1) {
    const delta = dist / n;
    w.children[leftSibI + 1].shift += delta;
    curSubtree.shift -= delta;
    curSubtree.change -= dist - delta;
  }
};
const nextLContour = (w) => {
  return w.hasChildren ? w.firstChild : w.lThr;
};
const nextRContour = (w) => {
  return w.hasChildren ? w.lastChild : w.rThr;
};
const setLThr = (w, i, lContour, lSumMods) => {
  const firstChild = w.firstChild;
  const lExt = firstChild.lExt;
  const curSubtree = w.children[i];
  lExt.lThr = lContour;
  const diff = lSumMods - lContour.relX - firstChild.lExtRelX;
  lExt.relX += diff;
  lExt.prelim -= diff;
  firstChild.lExt = curSubtree.lExt;
  firstChild.lExtRelX = curSubtree.lExtRelX;
};
const setRThr = (w, i, rContour, rSumMods) => {
  const curSubtree = w.children[i];
  const rExt = curSubtree.rExt;
  const lSib = w.children[i - 1];
  rExt.rThr = rContour;
  const diff = rSumMods - rContour.relX - curSubtree.rExtRelX;
  rExt.relX += diff;
  rExt.prelim -= diff;
  curSubtree.rExt = lSib.rExt;
  curSubtree.rExtRelX = lSib.rExtRelX;
};
const positionRoot = (w) => {
  if (w.hasChildren) {
    const k0 = w.firstChild;
    const kf = w.lastChild;
    const prelim = (k0.prelim + k0.relX - k0.xSize / 2 + kf.relX + kf.prelim + kf.xSize / 2) / 2;
    Object.assign(w, {
      prelim,
      lExt: k0.lExt,
      lExtRelX: k0.lExtRelX,
      rExt: kf.rExt,
      rExtRelX: kf.rExtRelX
    });
  }
};
const updateLows = (lowY, index, lastLows) => {
  while (lastLows !== null && lowY >= lastLows.lowY)
    lastLows = lastLows.next;
  return {
    lowY,
    index,
    next: lastLows
  };
};
/*! @gera2ld/jsx-dom v2.1.1 | ISC License */
var VTYPE_ELEMENT = 1;
var VTYPE_FUNCTION = 2;
var MOUNT_SINGLE = 1;
var MOUNT_ARRAY = 4;
var SVG_NS = "http://www.w3.org/2000/svg";
var XLINK_NS = "http://www.w3.org/1999/xlink";
var NS_ATTRS = {
  show: XLINK_NS,
  actuate: XLINK_NS,
  href: XLINK_NS
};
var isLeaf = function isLeaf2(c) {
  return typeof c === "string" || typeof c === "number";
};
var isElement = function isElement2(c) {
  return (c == null ? void 0 : c.vtype) === VTYPE_ELEMENT;
};
var isRenderFunction = function isRenderFunction2(c) {
  return (c == null ? void 0 : c.vtype) === VTYPE_FUNCTION;
};
function jsx(type, props) {
  var vtype;
  if (typeof type === "string")
    vtype = VTYPE_ELEMENT;
  else if (typeof type === "function")
    vtype = VTYPE_FUNCTION;
  else
    throw new Error("Invalid VNode type");
  return {
    vtype,
    type,
    props
  };
}
function Fragment(props) {
  return props.children;
}
var DEFAULT_ENV = {
  isSvg: false
};
function insertDom(parent, ref) {
  if (ref.type === MOUNT_SINGLE) {
    if (ref.node != null)
      parent.append(ref.node);
  } else if (ref.type === MOUNT_ARRAY) {
    ref.children.forEach(function(ch) {
      insertDom(parent, ch);
    });
  } else {
    throw new Error("Unkown ref type " + JSON.stringify(ref));
  }
}
function mountAttributes(domElement, props, env) {
  for (var key in props) {
    if (key === "key" || key === "children" || key === "ref")
      continue;
    if (key === "dangerouslySetInnerHTML") {
      domElement.innerHTML = props[key].__html;
    } else if (key === "innerHTML" || key === "textContent" || key === "innerText") {
      domElement[key] = props[key];
    } else if (key.startsWith("on")) {
      domElement[key.toLowerCase()] = props[key];
    } else {
      setDOMAttribute(domElement, key, props[key], env.isSvg);
    }
  }
}
var attrMap = {
  className: "class",
  labelFor: "for"
};
function setDOMAttribute(el, attr, value, isSVG) {
  attr = attrMap[attr] || attr;
  if (value === true) {
    el.setAttribute(attr, "");
  } else if (value === false) {
    el.removeAttribute(attr);
  } else {
    var namespace2 = isSVG ? NS_ATTRS[attr] : void 0;
    if (namespace2 !== void 0) {
      el.setAttributeNS(namespace2, attr, value);
    } else {
      el.setAttribute(attr, value);
    }
  }
}
function mount(vnode, env) {
  if (env === void 0) {
    env = DEFAULT_ENV;
  }
  if (vnode == null || typeof vnode === "boolean") {
    return {
      type: MOUNT_SINGLE,
      node: null
    };
  }
  if (vnode instanceof Node) {
    return {
      type: MOUNT_SINGLE,
      node: vnode
    };
  }
  if (isRenderFunction(vnode)) {
    var _ref = vnode, type = _ref.type, props = _ref.props;
    if (type === Fragment) {
      var node = document.createDocumentFragment();
      if (props.children) {
        var childrenRef = mount(props.children, env);
        insertDom(node, childrenRef);
      }
      return {
        type: MOUNT_SINGLE,
        node
      };
    }
    var childVNode = type(props);
    return mount(childVNode, env);
  }
  if (isLeaf(vnode)) {
    return {
      type: MOUNT_SINGLE,
      node: document.createTextNode("" + vnode)
    };
  }
  if (isElement(vnode)) {
    var _node;
    var _ref2 = vnode, _type = _ref2.type, _props = _ref2.props;
    if (!env.isSvg && _type === "svg") {
      env = Object.assign({}, env, {
        isSvg: true
      });
    }
    if (!env.isSvg) {
      _node = document.createElement(_type);
    } else {
      _node = document.createElementNS(SVG_NS, _type);
    }
    mountAttributes(_node, _props, env);
    var _childrenRef;
    if (_props.children) {
      var childEnv = env;
      if (env.isSvg && _type === "foreignObject") {
        childEnv = Object.assign({}, childEnv, {
          isSvg: false
        });
      }
      _childrenRef = mount(_props.children, childEnv);
    }
    if (_childrenRef != null)
      insertDom(_node, _childrenRef);
    var ref = _props.ref;
    if (typeof ref === "function")
      ref(_node);
    return {
      type: MOUNT_SINGLE,
      node: _node
    };
  }
  if (Array.isArray(vnode)) {
    return {
      type: MOUNT_ARRAY,
      children: vnode.map(function(child) {
        return mount(child, env);
      })
    };
  }
  throw new Error("mount: Invalid Vnode!");
}
function flattenWithoutNull(array2) {
  var result = [];
  for (var i = 0; i < array2.length; i += 1) {
    var item = array2[i];
    if (Array.isArray(item))
      result = result.concat(flattenWithoutNull(item));
    else if (item != null)
      result.push(item);
  }
  return result;
}
function asDom(result) {
  if (result.type === MOUNT_SINGLE) {
    return result.node;
  }
  return result.children.map(asDom);
}
function mountDom(vnode) {
  if (Array.isArray(vnode)) {
    return flattenWithoutNull(vnode.map(mountDom));
  }
  return asDom(mount(vnode));
}
var css_248z$1 = ".markmap{font:300 16px/20px sans-serif}.markmap-link{fill:none}.markmap-node>circle{cursor:pointer}.markmap-foreign{display:inline-block}.markmap-foreign a{color:#0097e6}.markmap-foreign a:hover{color:#00a8ff}.markmap-foreign code{background-color:#f0f0f0;border-radius:2px;color:#555;font-size:calc(1em - 2px)}.markmap-foreign :not(pre)>code{padding:.2em .4em}.markmap-foreign del{text-decoration:line-through}.markmap-foreign em{font-style:italic}.markmap-foreign strong{font-weight:bolder}.markmap-foreign mark{background:#ffeaa7}.markmap-foreign pre,.markmap-foreign pre[class*=language-]{margin:0;padding:.2em .4em}";
var css_248z = ".markmap-container{height:0;left:-100px;overflow:hidden;position:absolute;top:-100px;width:0}.markmap-container>.markmap-foreign{display:inline-block}.markmap-container>.markmap-foreign>div:last-child{white-space:nowrap}";
function linkWidth(nodeData) {
  const data = nodeData.data;
  return Math.max(4 - 2 * data.depth, 1.5);
}
function adjustSpacing(tree, spacing) {
  walkTree(tree, (d, next) => {
    d.ySizeInner = d.ySize - spacing;
    d.y += spacing;
    next();
  }, "children");
}
function minBy(numbers, by) {
  const index = minIndex(numbers, by);
  return numbers[index];
}
function stopPropagation(e) {
  e.stopPropagation();
}
function createViewHooks() {
  return {
    transformHtml: new Hook()
  };
}
const refreshHook = new Hook();
const defaultColorFn = ordinal(category10);
const isMacintosh = typeof navigator !== "undefined" && navigator.userAgent.includes("Macintosh");
class Markmap {
  constructor(svg, opts) {
    this.revokers = [];
    ["handleZoom", "handleClick", "handlePan"].forEach((key) => {
      this[key] = this[key].bind(this);
    });
    this.viewHooks = createViewHooks();
    this.svg = svg.datum ? svg : select(svg);
    this.styleNode = this.svg.append("style");
    this.zoom = zoom().filter((event) => {
      if (this.options.scrollForPan) {
        if (event.type === "wheel")
          return event.ctrlKey && !event.button;
      }
      return (!event.ctrlKey || event.type === "wheel") && !event.button;
    }).on("zoom", this.handleZoom);
    this.setOptions(opts);
    this.state = {
      id: this.options.id || this.svg.attr("id") || getId()
    };
    this.g = this.svg.append("g");
    this.revokers.push(refreshHook.tap(() => {
      this.setData();
    }));
  }
  getStyleContent() {
    const {
      style
    } = this.options;
    const {
      id: id2
    } = this.state;
    const styleText = typeof style === "function" ? style(id2) : "";
    return [this.options.embedGlobalCSS && css_248z$1, styleText].filter(Boolean).join("\n");
  }
  updateStyle() {
    this.svg.attr("class", addClass(this.svg.attr("class"), "markmap", this.state.id));
    const style = this.getStyleContent();
    this.styleNode.text(style);
  }
  handleZoom(e) {
    const {
      transform: transform2
    } = e;
    this.g.attr("transform", transform2);
  }
  handlePan(e) {
    e.preventDefault();
    const transform$1 = transform(this.svg.node());
    const newTransform = transform$1.translate(-e.deltaX / transform$1.k, -e.deltaY / transform$1.k);
    this.svg.call(this.zoom.transform, newTransform);
  }
  handleClick(_, d) {
    var _data$payload;
    const {
      data
    } = d;
    data.payload = _extends({}, data.payload, {
      fold: (_data$payload = data.payload) != null && _data$payload.fold ? 0 : 1
    });
    this.renderData(d.data);
  }
  initializeData(node) {
    let nodeId = 0;
    const {
      color: color2,
      nodeMinHeight,
      maxWidth,
      initialExpandLevel
    } = this.options;
    const {
      id: id2
    } = this.state;
    const container = mountDom(jsx("div", {
      className: `markmap-container markmap ${id2}-g`
    }));
    const style = mountDom(jsx("style", {
      children: [this.getStyleContent(), css_248z].join("\n")
    }));
    document.body.append(container, style);
    const groupStyle = maxWidth ? `max-width: ${maxWidth}px` : "";
    let foldRecursively = 0;
    walkTree(node, (item, next, parent) => {
      var _item$children, _parent$state, _item$payload;
      item.children = (_item$children = item.children) == null ? void 0 : _item$children.map((child) => _extends({}, child));
      nodeId += 1;
      const group = mountDom(jsx("div", {
        className: "markmap-foreign",
        style: groupStyle,
        children: jsx("div", {
          dangerouslySetInnerHTML: {
            __html: item.content
          }
        })
      }));
      container.append(group);
      item.state = _extends({}, item.state, {
        id: nodeId,
        el: group.firstChild
      });
      item.state.path = [parent == null ? void 0 : (_parent$state = parent.state) == null ? void 0 : _parent$state.path, item.state.id].filter(Boolean).join(".");
      color2(item);
      const isFoldRecursively = ((_item$payload = item.payload) == null ? void 0 : _item$payload.fold) === 2;
      if (isFoldRecursively) {
        foldRecursively += 1;
      } else if (foldRecursively || initialExpandLevel >= 0 && item.depth >= initialExpandLevel) {
        item.payload = _extends({}, item.payload, {
          fold: 1
        });
      }
      next();
      if (isFoldRecursively)
        foldRecursively -= 1;
    });
    const nodes = arrayFrom(container.childNodes).map((group) => group.firstChild);
    this.viewHooks.transformHtml.call(this, nodes);
    nodes.forEach((node2) => {
      node2.parentNode.append(node2.cloneNode(true));
    });
    walkTree(node, (item, next, parent) => {
      var _parent$state2;
      const rect = item.state.el.getBoundingClientRect();
      item.content = item.state.el.innerHTML;
      item.state.size = [Math.ceil(rect.width) + 1, Math.max(Math.ceil(rect.height), nodeMinHeight)];
      item.state.key = [parent == null ? void 0 : (_parent$state2 = parent.state) == null ? void 0 : _parent$state2.id, item.state.id].filter(Boolean).join(".") + // FIXME: find a way to check content hash
      item.content;
      next();
    });
    container.remove();
    style.remove();
  }
  setOptions(opts) {
    this.options = _extends({}, Markmap.defaultOptions, opts);
    if (this.options.zoom) {
      this.svg.call(this.zoom);
    } else {
      this.svg.on(".zoom", null);
    }
    this.svg.on("wheel", this.options.pan ? this.handlePan : null);
  }
  setData(data, opts) {
    if (data)
      this.state.data = data;
    if (opts)
      this.setOptions(opts);
    this.initializeData(this.state.data);
    this.updateStyle();
    this.renderData();
  }
  renderData(originData) {
    var _origin$data$state$x, _origin$data$state$y;
    if (!this.state.data)
      return;
    const {
      spacingHorizontal,
      paddingX,
      spacingVertical,
      autoFit,
      color: color2
    } = this.options;
    const layout = flextree().children((d) => {
      var _d$payload;
      return !((_d$payload = d.payload) != null && _d$payload.fold) && d.children;
    }).nodeSize((d) => {
      const [width, height] = d.data.state.size;
      return [height, width + (width ? paddingX * 2 : 0) + spacingHorizontal];
    }).spacing((a, b) => {
      return a.parent === b.parent ? spacingVertical : spacingVertical * 2;
    });
    const tree = layout.hierarchy(this.state.data);
    layout(tree);
    adjustSpacing(tree, spacingHorizontal);
    const descendants = tree.descendants().reverse();
    const links = tree.links();
    const linkShape = linkHorizontal();
    const minX = min(descendants, (d) => d.x - d.xSize / 2);
    const maxX = max(descendants, (d) => d.x + d.xSize / 2);
    const minY = min(descendants, (d) => d.y);
    const maxY = max(descendants, (d) => d.y + d.ySizeInner);
    Object.assign(this.state, {
      minX,
      maxX,
      minY,
      maxY
    });
    if (autoFit)
      this.fit();
    const origin = originData && descendants.find((item) => item.data === originData) || tree;
    const x0 = (_origin$data$state$x = origin.data.state.x0) != null ? _origin$data$state$x : origin.x;
    const y0 = (_origin$data$state$y = origin.data.state.y0) != null ? _origin$data$state$y : origin.y;
    const node = this.g.selectAll(childSelector("g")).data(descendants, (d) => d.data.state.key);
    const nodeEnter = node.enter().append("g").attr("data-depth", (d) => d.data.depth).attr("data-path", (d) => d.data.state.path).attr("transform", (d) => `translate(${y0 + origin.ySizeInner - d.ySizeInner},${x0 + origin.xSize / 2 - d.xSize})`);
    const nodeExit = this.transition(node.exit());
    nodeExit.select("line").attr("x1", (d) => d.ySizeInner).attr("x2", (d) => d.ySizeInner);
    nodeExit.select("foreignObject").style("opacity", 0);
    nodeExit.attr("transform", (d) => `translate(${origin.y + origin.ySizeInner - d.ySizeInner},${origin.x + origin.xSize / 2 - d.xSize})`).remove();
    const nodeMerge = node.merge(nodeEnter).attr("class", (d) => {
      var _d$data$payload;
      return ["markmap-node", ((_d$data$payload = d.data.payload) == null ? void 0 : _d$data$payload.fold) && "markmap-fold"].filter(Boolean).join(" ");
    });
    this.transition(nodeMerge).attr("transform", (d) => `translate(${d.y},${d.x - d.xSize / 2})`);
    const line = nodeMerge.selectAll(childSelector("line")).data((d) => [d], (d) => d.data.state.key).join((enter) => {
      return enter.append("line").attr("x1", (d) => d.ySizeInner).attr("x2", (d) => d.ySizeInner);
    }, (update) => update, (exit) => exit.remove());
    this.transition(line).attr("x1", -1).attr("x2", (d) => d.ySizeInner + 2).attr("y1", (d) => d.xSize).attr("y2", (d) => d.xSize).attr("stroke", (d) => color2(d.data)).attr("stroke-width", linkWidth);
    const circle = nodeMerge.selectAll(childSelector("circle")).data((d) => d.data.children ? [d] : [], (d) => d.data.state.key).join((enter) => {
      return enter.append("circle").attr("stroke-width", "1.5").attr("cx", (d) => d.ySizeInner).attr("cy", (d) => d.xSize).attr("r", 0).on("click", (e, d) => this.handleClick(e, d));
    }, (update) => update, (exit) => exit.remove());
    this.transition(circle).attr("r", 6).attr("cx", (d) => d.ySizeInner).attr("cy", (d) => d.xSize).attr("stroke", (d) => color2(d.data)).attr("fill", (d) => {
      var _d$data$payload2;
      return (_d$data$payload2 = d.data.payload) != null && _d$data$payload2.fold && d.data.children ? color2(d.data) : "#fff";
    });
    const foreignObject = nodeMerge.selectAll(childSelector("foreignObject")).data((d) => [d], (d) => d.data.state.key).join((enter) => {
      const fo = enter.append("foreignObject").attr("class", "markmap-foreign").attr("x", paddingX).attr("y", 0).style("opacity", 0).on("mousedown", stopPropagation).on("dblclick", stopPropagation);
      fo.append("xhtml:div").select(function select2(d) {
        const clone = d.data.state.el.cloneNode(true);
        this.replaceWith(clone);
        return clone;
      }).attr("xmlns", "http://www.w3.org/1999/xhtml");
      return fo;
    }, (update) => update, (exit) => exit.remove()).attr("width", (d) => Math.max(0, d.ySizeInner - paddingX * 2)).attr("height", (d) => d.xSize);
    this.transition(foreignObject).style("opacity", 1);
    const path2 = this.g.selectAll(childSelector("path")).data(links, (d) => d.target.data.state.key).join((enter) => {
      const source = [y0 + origin.ySizeInner, x0 + origin.xSize / 2];
      return enter.insert("path", "g").attr("class", "markmap-link").attr("data-depth", (d) => d.target.data.depth).attr("data-path", (d) => d.target.data.state.path).attr("d", linkShape({
        source,
        target: source
      }));
    }, (update) => update, (exit) => {
      const source = [origin.y + origin.ySizeInner, origin.x + origin.xSize / 2];
      return this.transition(exit).attr("d", linkShape({
        source,
        target: source
      })).remove();
    });
    this.transition(path2).attr("stroke", (d) => color2(d.target.data)).attr("stroke-width", (d) => linkWidth(d.target)).attr("d", (d) => {
      const source = [d.source.y + d.source.ySizeInner, d.source.x + d.source.xSize / 2];
      const target = [d.target.y, d.target.x + d.target.xSize / 2];
      return linkShape({
        source,
        target
      });
    });
    descendants.forEach((d) => {
      d.data.state.x0 = d.x;
      d.data.state.y0 = d.y;
    });
  }
  transition(sel) {
    const {
      duration
    } = this.options;
    return sel.transition().duration(duration);
  }
  /**
   * Fit the content to the viewport.
   */
  async fit() {
    const svgNode2 = this.svg.node();
    const {
      width: offsetWidth,
      height: offsetHeight
    } = svgNode2.getBoundingClientRect();
    const {
      fitRatio
    } = this.options;
    const {
      minX,
      maxX,
      minY,
      maxY
    } = this.state;
    const naturalWidth = maxY - minY;
    const naturalHeight = maxX - minX;
    const scale = Math.min(offsetWidth / naturalWidth * fitRatio, offsetHeight / naturalHeight * fitRatio, 2);
    const initialZoom = identity.translate((offsetWidth - naturalWidth * scale) / 2 - minY * scale, (offsetHeight - naturalHeight * scale) / 2 - minX * scale).scale(scale);
    return this.transition(this.svg).call(this.zoom.transform, initialZoom).end().catch(noop$1);
  }
  /**
   * Pan the content to make the provided node visible in the viewport.
   */
  async ensureView(node, padding) {
    let g;
    let itemData;
    this.g.selectAll(childSelector("g")).each(function walk(d) {
      if (d.data === node) {
        g = this;
        itemData = d;
      }
    });
    if (!g || !itemData)
      return;
    const svgNode2 = this.svg.node();
    const relRect = svgNode2.getBoundingClientRect();
    const transform$1 = transform(svgNode2);
    const [left, right] = [itemData.y, itemData.y + itemData.ySizeInner + 2].map((x2) => x2 * transform$1.k + transform$1.x);
    const [top, bottom] = [itemData.x - itemData.xSize / 2, itemData.x + itemData.xSize / 2].map((y2) => y2 * transform$1.k + transform$1.y);
    const pd = _extends({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, padding);
    const dxs = [pd.left - left, relRect.width - pd.right - right];
    const dys = [pd.top - top, relRect.height - pd.bottom - bottom];
    const dx = dxs[0] * dxs[1] > 0 ? minBy(dxs, Math.abs) / transform$1.k : 0;
    const dy = dys[0] * dys[1] > 0 ? minBy(dys, Math.abs) / transform$1.k : 0;
    if (dx || dy) {
      const newTransform = transform$1.translate(dx, dy);
      return this.transition(this.svg).call(this.zoom.transform, newTransform).end().catch(noop$1);
    }
  }
  /**
   * Scale content with it pinned at the center of the viewport.
   */
  async rescale(scale) {
    const svgNode2 = this.svg.node();
    const {
      width: offsetWidth,
      height: offsetHeight
    } = svgNode2.getBoundingClientRect();
    const halfWidth = offsetWidth / 2;
    const halfHeight = offsetHeight / 2;
    const transform$1 = transform(svgNode2);
    const newTransform = transform$1.translate((halfWidth - transform$1.x) * (1 - scale) / transform$1.k, (halfHeight - transform$1.y) * (1 - scale) / transform$1.k).scale(scale);
    return this.transition(this.svg).call(this.zoom.transform, newTransform).end().catch(noop$1);
  }
  destroy() {
    this.svg.on(".zoom", null);
    this.svg.html(null);
    this.revokers.forEach((fn) => {
      fn();
    });
  }
  static create(svg, opts, data) {
    const mm = new Markmap(svg, opts);
    if (data) {
      mm.setData(data);
      mm.fit();
    }
    return mm;
  }
}
Markmap.defaultOptions = {
  autoFit: false,
  color: (node) => defaultColorFn(`${node.state.path}`),
  duration: 500,
  embedGlobalCSS: true,
  fitRatio: 0.95,
  maxWidth: 0,
  nodeMinHeight: 16,
  paddingX: 8,
  scrollForPan: isMacintosh,
  spacingHorizontal: 80,
  spacingVertical: 5,
  initialExpandLevel: -1,
  zoom: true,
  pan: true
};
let pluginName;
let isInMindMapMode = false;
let toggleButton = null;
let currentMarkmap = null;
function extractPageStructure() {
  const mainEditor = document.querySelector(".orca-block-editor-blocks");
  if (!mainEditor) {
    console.warn("[调试] 找不到主编辑器区域");
    return [];
  }
  const blocks = mainEditor.querySelectorAll(".orca-container.orca-block");
  console.log("[调试] 找到块数量:", blocks.length);
  const structure = [];
  blocks.forEach((block, index) => {
    const blockElement = block;
    const dataId = blockElement.dataset.id;
    const indent = parseInt(blockElement.dataset.indent || "0");
    const type = blockElement.dataset.type || "text";
    if (blockElement.querySelector("table") || blockElement.querySelector(".orca-table") || blockElement.querySelector("thead") || blockElement.querySelector("tbody") || blockElement.querySelector("tr") || blockElement.querySelector("td") || blockElement.querySelector("th") || blockElement.closest("table") || blockElement.closest(".orca-table") || blockElement.closest("tr") || type === "table" || blockElement.className.includes("table")) {
      console.log(`[调试] 跳过表格块${index}: ID=${dataId}, 类型=${type}, 类名=${blockElement.className}`);
      return;
    }
    let content = "";
    const contentElement = blockElement.querySelector(".orca-repr-main-content");
    if (contentElement) {
      const textElements = contentElement.querySelectorAll(".orca-inline, .orca-repr-title, h1, h2, h3, h4, h5, h6");
      if (textElements.length > 0) {
        content = Array.from(textElements).map((el) => el.textContent || "").join(" ").trim();
      } else {
        content = contentElement.textContent || "";
      }
    }
    console.log(`[调试] 块${index}: ID=${dataId}, 层级=${indent}, 类型=${type}, 内容="${content}"`);
    if (content.trim()) {
      structure.push({
        id: dataId || `block-${Date.now()}-${Math.random()}`,
        content: content.substring(0, 200),
        level: indent,
        type,
        element: blockElement
      });
    }
  });
  console.log("[调试] 提取到的结构:", structure);
  return structure;
}
function blocksToMarkdown(blocks) {
  console.log("[调试] 开始转换块为Markdown，块数量:", blocks.length);
  if (blocks.length === 0) {
    console.log("[调试] 无内容，返回默认标题");
    return "# 页面内容为空";
  }
  let markdown = "";
  for (const block of blocks) {
    const indent = "#".repeat(Math.min(block.level + 1, 6));
    let content = block.content.trim();
    if (content.length > 50) {
      content = content.replace(/(.{50})/g, "$1\n").replace(/\n\s+/g, "\n");
    }
    if (content) {
      const line = `${indent} ${content}

`;
      markdown += line;
      console.log(`[调试] 添加行: ${line.trim()}`);
    }
  }
  const result = markdown.trim();
  console.log("[调试] 最终Markdown:", result);
  return result;
}
function createMindMapContainer() {
  const containerId = `markmap-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  const bodyBg = window.getComputedStyle(document.body).backgroundColor;
  const rootBg = window.getComputedStyle(document.documentElement).backgroundColor;
  const bodyClasses = document.body.className;
  const rootClasses = document.documentElement.className;
  const orcaBg1 = getComputedStyle(document.body).getPropertyValue("--orca-color-bg-1");
  console.log("[主题调试] body背景:", bodyBg);
  console.log("[主题调试] root背景:", rootBg);
  console.log("[主题调试] body类名:", bodyClasses);
  console.log("[主题调试] root类名:", rootClasses);
  console.log("[主题调试] --orca-color-bg-1:", orcaBg1);
  const isDarkTheme = document.documentElement.classList.contains("dark") || document.body.classList.contains("dark") || document.documentElement.classList.contains("theme-dark") || bodyBg.includes("33, 37, 41") || // Bootstrap深色背景
  bodyBg.includes("rgb(33, 37, 41)") || bodyBg.includes("40, 40, 40") || // 常见深色背景
  bodyBg.includes("38, 38, 38") || // 虎鲸笔记深色背景
  bodyBg.includes("rgb(38, 38, 38)") || rootBg.includes("33, 37, 41") || orcaBg1.includes("dark") || orcaBg1.includes("15%") || // 虎鲸笔记深色主题变量
  orcaBg1.includes("hsl(0 0% 15%)");
  console.log("[主题调试] 检测结果 isDarkTheme:", isDarkTheme);
  const bgColor = isDarkTheme ? "#2c2c2c" : "#ffffff";
  const textColor = isDarkTheme ? "white" : "#333333";
  const circleStroke = isDarkTheme ? "rgba(255, 255, 255, 0.3)" : "rgba(0, 0, 0, 0.2)";
  return `
    <style>
      /* 隐藏顶部导航栏 */
      .orca-headbar, .orca-header, .page-header {
        display: none !important;
      }
      
      .${containerId} text {
        fill: ${textColor} !important;
        font-size: 14px !important;
        font-family: var(--orca-font-family, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif) !important;
        font-weight: 500 !important;
        stroke: none !important;
      }
      .${containerId} .markmap-node {
        cursor: pointer;
      }
      .${containerId} .markmap-link {
        fill: none;
        stroke-width: 2;
        opacity: 0.8;
      }
      .${containerId} circle {
        stroke: ${circleStroke} !important;
        stroke-width: 1 !important;
      }
      /* 文本换行处理 */
      .${containerId} foreignObject {
        overflow: visible;
      }
    </style>
    <div style="
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: ${bgColor};
      overflow: hidden;
      font-family: var(--orca-font-family, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif);
      z-index: 10000;
    ">
      <svg id="${containerId}" class="${containerId}" style="width: 100%; height: 100%;"></svg>
      
      <!-- 控制按钮面板 -->
      <div id="markmap-controls-${containerId}" style="
        position: absolute;
        bottom: 20px;
        left: 20px;
        display: flex;
        gap: 8px;
        z-index: 10001;
      ">
        <button id="zoom-in-${containerId}" style="
          width: 40px;
          height: 40px;
          border-radius: 50%;
          border: none;
          background: rgba(0, 0, 0, 0.7);
          color: white;
          cursor: pointer;
          font-size: 18px;
          font-weight: bold;
          display: flex;
          align-items: center;
          justify-content: center;
          transition: all 0.2s ease;
        ">+</button>
        
        <button id="zoom-out-${containerId}" style="
          width: 40px;
          height: 40px;
          border-radius: 50%;
          border: none;
          background: rgba(0, 0, 0, 0.7);
          color: white;
          cursor: pointer;
          font-size: 18px;
          font-weight: bold;
          display: flex;
          align-items: center;
          justify-content: center;
          transition: all 0.2s ease;
        ">-</button>
        
        <button id="close-${containerId}" style="
          width: 40px;
          height: 40px;
          border-radius: 50%;
          border: none;
          background: rgba(220, 53, 69, 0.8);
          color: white;
          cursor: pointer;
          font-size: 16px;
          display: flex;
          align-items: center;
          justify-content: center;
          transition: all 0.2s ease;
        ">✕</button>
      </div>
      
      <div id="loading-${containerId}" style="
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: #666;
        font-size: 16px;
        display: none;
      ">初始化思维导图中...</div>
    </div>
  `;
}
function initializeMarkmap(containerId, markdown) {
  try {
    console.log("[调试] 开始初始化Markmap，容器ID:", containerId);
    console.log("[调试] 输入的Markdown:", markdown);
    const container = document.getElementById(containerId);
    if (!container) {
      console.error("[调试] 找不到Markmap容器:", containerId);
      return;
    }
    console.log("[调试] 找到容器:", container);
    const transformer = new browserExports.Transformer();
    console.log("[调试] 创建Transformer成功");
    const { root: root2, features } = transformer.transform(markdown);
    console.log("[调试] Transformer转换结果 - root:", root2);
    console.log("[调试] Transformer转换结果 - features:", features);
    const options = {
      maxWidth: 200,
      // 设置最大宽度，超过会换行
      spacingVertical: 10,
      spacingHorizontal: 80,
      paddingX: 8,
      autoFit: true,
      pan: true,
      zoom: true
    };
    currentMarkmap = Markmap.create(container, options, root2);
    console.log("[调试] Markmap实例创建成功:", currentMarkmap);
    const zoomInBtn = document.getElementById(`zoom-in-${containerId}`);
    const zoomOutBtn = document.getElementById(`zoom-out-${containerId}`);
    const closeBtn = document.getElementById(`close-${containerId}`);
    if (zoomInBtn) {
      zoomInBtn.onclick = () => {
        if (currentMarkmap) {
          currentMarkmap.rescale(1.5);
          console.log("[调试] 放大");
        }
      };
    }
    if (zoomOutBtn) {
      zoomOutBtn.onclick = () => {
        if (currentMarkmap) {
          currentMarkmap.rescale(0.75);
          console.log("[调试] 缩小");
        }
      };
    }
    if (closeBtn) {
      closeBtn.onclick = () => {
        console.log("[调试] 关闭按钮点击");
        switchToEditMode();
      };
    }
    const escHandler = (e) => {
      if (e.key === "Escape" && isInMindMapMode) {
        console.log("[调试] ESC键被按下，准备退出思维导图模式");
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        switchToEditMode();
        return false;
      }
    };
    if (window.markmapEscHandler) {
      document.removeEventListener("keydown", window.markmapEscHandler, true);
      document.removeEventListener("keydown", window.markmapEscHandler, false);
      window.markmapEscHandler = null;
    }
    document.addEventListener("keydown", escHandler, true);
    window.markmapEscHandler = escHandler;
    const wheelZoomHandler = (e) => {
      if (isInMindMapMode && e.ctrlKey && !e.metaKey) {
        e.preventDefault();
        e.stopPropagation();
        if (currentMarkmap) {
          const delta = e.deltaY > 0 ? 0.9 : 1.1;
          currentMarkmap.rescale(delta);
          console.log("[调试] Ctrl+滚轮缩放:", delta > 1 ? "放大" : "缩小");
        }
      }
    };
    const overlay = document.getElementById("mindmap-overlay");
    if (overlay) {
      overlay.addEventListener("wheel", wheelZoomHandler, { passive: false });
      window.markmapWheelHandler = wheelZoomHandler;
      window.markmapOverlay = overlay;
    }
    setTimeout(() => {
      if (currentMarkmap) {
        currentMarkmap.fit();
        console.log("[调试] Markmap fit完成");
        const svgElements = container.querySelectorAll("text");
        console.log("[调试] SVG中的文本元素数量:", svgElements.length);
        svgElements.forEach((text, i) => {
          console.log(`[调试] 文本元素${i}:`, text.textContent, "样式:", window.getComputedStyle(text));
        });
      }
    }, 500);
    console.log("[调试] Markmap 初始化成功");
  } catch (error) {
    console.error("[调试] Markmap 初始化失败:", error);
    const container = document.getElementById(containerId);
    if (container) {
      container.parentElement.innerHTML = `
        <div style="
          display: flex;
          align-items: center;
          justify-content: center;
          height: 100vh;
          color: #ef4444;
          font-size: 16px;
          text-align: center;
        ">
          <div>
            <div>思维导图初始化失败</div>
            <div style="font-size: 14px; color: #666; margin-top: 10px;">
              错误: ${error instanceof Error ? error.message : "未知错误"}
            </div>
          </div>
        </div>
      `;
    }
  }
}
function createToggleButton() {
  const button = document.createElement("button");
  button.className = "orca-button plain";
  button.innerHTML = '<i class="ti ti-brain orca-headbar-icon"></i>';
  button.title = "切换思维导图模式";
  button.style.cssText = `
    transition: all 0.2s ease;
    border-radius: 4px;
  `;
  button.onclick = () => toggleMindMapMode();
  button.onmouseenter = () => {
    if (!isInMindMapMode) {
      button.style.background = "var(--orca-color-bg-2, #f0f0f0)";
    }
  };
  button.onmouseleave = () => {
    if (!isInMindMapMode) {
      button.style.background = "";
    }
  };
  return button;
}
function updateButtonState() {
  if (!toggleButton)
    return;
  if (isInMindMapMode) {
    toggleButton.style.background = "var(--orca-color-primary, #2563eb)";
    toggleButton.style.color = "white";
    toggleButton.title = "返回编辑模式";
    const icon = toggleButton.querySelector("i");
    if (icon) {
      icon.style.color = "white";
    }
  } else {
    toggleButton.style.background = "";
    toggleButton.style.color = "";
    toggleButton.title = "切换思维导图模式";
    const icon = toggleButton.querySelector("i");
    if (icon) {
      icon.style.color = "";
    }
  }
}
function switchToMindMapMode() {
  if (isInMindMapMode)
    return;
  try {
    const mainEditor = document.querySelector(".orca-block-editor-blocks");
    if (!mainEditor) {
      orca.notify("error", "找不到主编辑区域");
      return;
    }
    const blocks = extractPageStructure();
    if (blocks.length === 0) {
      orca.notify("warn", "当前页面没有可显示的内容");
      return;
    }
    const markdown = blocksToMarkdown(blocks);
    const containerHTML = createMindMapContainer();
    mainEditor.style.display = "none";
    const overlay = document.createElement("div");
    overlay.id = "mindmap-overlay";
    overlay.innerHTML = containerHTML;
    const parentContainer = mainEditor.parentElement;
    if (parentContainer) {
      parentContainer.appendChild(overlay);
    } else {
      document.body.appendChild(overlay);
    }
    console.log("[调试] 创建思维导图覆盖层，原始编辑器被隐藏但未删除");
    const svgElement = overlay.querySelector("svg");
    if (svgElement) {
      const containerId = svgElement.id;
      setTimeout(() => {
        initializeMarkmap(containerId, markdown);
      }, 100);
    }
    isInMindMapMode = true;
    updateButtonState();
    orca.notify("success", `已切换到思维导图模式 - ${blocks.length} 个节点`);
  } catch (error) {
    console.error("切换到思维导图模式失败:", error);
    const errorMsg = error instanceof Error ? error.message : "未知错误";
    orca.notify("error", `切换失败: ${errorMsg}`);
  }
}
function switchToEditMode() {
  var _a;
  if (!isInMindMapMode)
    return;
  try {
    const mainEditor = document.querySelector(".orca-block-editor-blocks");
    if (!mainEditor) {
      orca.notify("error", "找不到主编辑区域");
      return;
    }
    if (window.markmapEscHandler) {
      document.removeEventListener("keydown", window.markmapEscHandler, true);
      document.removeEventListener("keydown", window.markmapEscHandler, false);
      window.markmapEscHandler = null;
      console.log("[调试] ESC键监听器已清理");
    }
    if (window.markmapWheelHandler && window.markmapOverlay) {
      window.markmapOverlay.removeEventListener("wheel", window.markmapWheelHandler);
      window.markmapWheelHandler = null;
      window.markmapOverlay = null;
      console.log("[调试] 滚轮缩放监听器已清理");
    }
    try {
      const allKeydownListeners = document.querySelectorAll("*");
      allKeydownListeners.forEach((element) => {
        var _a2;
        if (element.tagName === "SVG" && element.id && element.id.startsWith("markmap-")) {
          const clonedElement = element.cloneNode(true);
          (_a2 = element.parentNode) == null ? void 0 : _a2.replaceChild(clonedElement, element);
        }
      });
      if (window.d3) {
        window.d3.selectAll("*").on("keydown", null);
        window.d3.selectAll("*").on("keyup", null);
        window.d3.selectAll("*").on("keypress", null);
      }
      console.log("[调试] 额外键盘事件清理完成");
    } catch (e) {
      console.warn("[调试] 额外清理时出错:", e);
    }
    if (currentMarkmap) {
      try {
        if (currentMarkmap.svg) {
          currentMarkmap.svg.selectAll("*").on(".zoom", null);
          currentMarkmap.svg.selectAll("*").on(".drag", null);
          currentMarkmap.svg.selectAll("*").on("click", null);
          currentMarkmap.svg.selectAll("*").on("dblclick", null);
        }
        if (currentMarkmap.zoom) {
          currentMarkmap.svg.call(currentMarkmap.zoom.on("zoom", null));
        }
        (_a = currentMarkmap.destroy) == null ? void 0 : _a.call(currentMarkmap);
      } catch (e) {
        console.warn("清理Markmap实例时出错:", e);
      }
      currentMarkmap = null;
    }
    const overlay = document.getElementById("mindmap-overlay");
    if (overlay) {
      overlay.remove();
      console.log("[调试] 覆盖层已移除");
    }
    mainEditor.style.display = "";
    console.log("[调试] 恢复原始编辑器显示");
    setTimeout(() => {
      try {
        if (orca && orca.editor && typeof orca.editor.init === "function") {
          orca.editor.init();
          console.log("[调试] 虎鲸编辑器重新初始化");
        }
        const firstEditableElement = mainEditor.querySelector('[contenteditable="true"], [contenteditable="plaintext-only"]');
        if (firstEditableElement) {
          firstEditableElement.focus();
          firstEditableElement.blur();
          setTimeout(() => firstEditableElement.focus(), 50);
        } else {
          mainEditor.focus();
          mainEditor.blur();
          setTimeout(() => mainEditor.focus(), 50);
        }
        const inputEvent = new Event("input", { bubbles: true, cancelable: true });
        const keydownEvent = new KeyboardEvent("keydown", { bubbles: true, cancelable: true, key: "" });
        mainEditor.dispatchEvent(inputEvent);
        mainEditor.dispatchEvent(keydownEvent);
        if (orca && orca.editor && typeof orca.editor.refresh === "function") {
          orca.editor.refresh();
          console.log("[调试] 虎鲸编辑器刷新");
        }
        if (orca && orca.editor && typeof orca.editor.bindEvents === "function") {
          orca.editor.bindEvents();
          console.log("[调试] 虎鲸编辑器重新绑定事件");
        }
        console.log("[调试] 编辑器完全重新激活完成");
      } catch (e) {
        console.warn("编辑器重新激活失败:", e);
      }
    }, 200);
    setTimeout(() => {
      try {
        const activeElement = document.activeElement;
        if (!mainEditor.contains(activeElement)) {
          const firstEditableElement = mainEditor.querySelector('[contenteditable="true"], [contenteditable="plaintext-only"]');
          if (firstEditableElement) {
            firstEditableElement.focus();
          }
          console.log("[调试] 二次聚焦确认完成");
        }
      } catch (e) {
        console.warn("二次聚焦失败:", e);
      }
    }, 500);
    isInMindMapMode = false;
    updateButtonState();
    orca.notify("success", "已返回编辑模式");
  } catch (error) {
    console.error("切换回编辑模式失败:", error);
    const errorMsg = error instanceof Error ? error.message : "未知错误";
    orca.notify("error", `切换失败: ${errorMsg}`);
  }
}
function toggleMindMapMode() {
  if (isInMindMapMode) {
    switchToEditMode();
  } else {
    switchToMindMapMode();
  }
}
function addButtonToToolbar() {
  const toolbar = document.querySelector(".orca-headbar-global-tools.orca-headbar-right");
  if (!toolbar) {
    console.warn("未找到工具栏，尝试延迟添加");
    setTimeout(addButtonToToolbar, 1e3);
    return;
  }
  if (toggleButton && toggleButton.parentNode) {
    return;
  }
  toggleButton = createToggleButton();
  toolbar.insertBefore(toggleButton, toolbar.firstChild);
  console.log("思维导图按钮已添加到工具栏");
}
function removeButtonFromToolbar() {
  if (toggleButton && toggleButton.parentNode) {
    toggleButton.parentNode.removeChild(toggleButton);
    toggleButton = null;
  }
}
async function load(_name) {
  pluginName = _name;
  console.log(`页面思维导图插件 ${pluginName} 开始加载...`);
  orca.commands.registerCommand(
    `${pluginName}.toggle`,
    toggleMindMapMode,
    "切换思维导图模式"
  );
  if (orca.commands && typeof orca.commands.registerShortcut === "function") {
    orca.commands.registerShortcut(
      "Ctrl+Shift+M",
      `${pluginName}.toggle`
    );
  }
  addButtonToToolbar();
  console.log(`页面思维导图插件 ${pluginName} 加载完成`);
}
async function unload() {
  console.log("页面思维导图插件开始卸载...");
  if (isInMindMapMode) {
    switchToEditMode();
  }
  if (window.markmapEscHandler) {
    document.removeEventListener("keydown", window.markmapEscHandler, true);
    document.removeEventListener("keydown", window.markmapEscHandler, false);
    window.markmapEscHandler = null;
  }
  if (window.markmapWheelHandler && window.markmapOverlay) {
    window.markmapOverlay.removeEventListener("wheel", window.markmapWheelHandler);
    window.markmapWheelHandler = null;
    window.markmapOverlay = null;
  }
  try {
    if (window.d3) {
      window.d3.selectAll("*").on("keydown", null);
      window.d3.selectAll("*").on("keyup", null);
      window.d3.selectAll("*").on("keypress", null);
    }
    const overlay = document.getElementById("mindmap-overlay");
    if (overlay) {
      overlay.remove();
    }
    console.log("[调试] 卸载时事件清理完成");
  } catch (e) {
    console.warn("卸载清理时出错:", e);
  }
  removeButtonFromToolbar();
  if (orca.commands && typeof orca.commands.unregisterCommand === "function") {
    orca.commands.unregisterCommand(`${pluginName}.toggle`);
  }
  if (orca.commands && typeof orca.commands.unregisterShortcut === "function") {
    orca.commands.unregisterShortcut("Ctrl+Shift+M");
  }
  isInMindMapMode = false;
  currentMarkmap = null;
  console.log("页面思维导图插件卸载完成");
  orca.notify("info", "思维导图插件已禁用");
}
export {
  load,
  unload
};
//# sourceMappingURL=index.js.map
